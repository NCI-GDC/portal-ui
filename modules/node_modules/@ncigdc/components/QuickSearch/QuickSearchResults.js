// @flow
/* eslint react/prop-types:1 */

import React from 'react';
import _ from 'lodash';
import Highlight from 'react-highlighter';
import entityShortnameMapping from '@ncigdc/utils/entityShortnameMapping';
import jsonpath from 'jsonpath/jsonpath';
import type { TSearchHit } from './types';

const styles = {
  container: {
    position: 'absolute',
    right: 0,
    top: '100%',
    backgroundColor: '#fff',
    listStyleType: 'none',
    padding: 0,
    boxShadow: 'rgba(0, 0, 0, 0.156863) 0px 2px 5px 0px, rgba(0, 0, 0, 0.117647) 0px 2px 10px 0px',
    zIndex: 200,
    maxHeight: '500px',
    overflowY: 'auto',
    width: '406px',
  },
  item: {
    padding: '0.5rem 1rem',
    transition: 'all 0.1s ease',
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'stretch',
  },
  itemIconWrapper: {
    marginLeft: '-1rem',
    marginTop: '-0.5rem',
    marginBottom: '-0.5rem',
    marginRight: '1rem',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'flex-start',
    width: 32,
    backgroundColor: '#505556',
    flexShrink: 0,
  },
  itemIcon: {
    width: '100%',
    height: '3.2rem',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    color: '#fff',
    backgroundColor: '#453D3D',
  },
  itemTitle: {
    fontWeight: '500',
  },
  selectedItem: {
    backgroundColor: 'rgb(0, 80, 131)',
    color: '#fff',
  },
  deemphasizedItem: {
    color: '#999',
  },
  highlights: {
    fontSize: '1.14rem',
    fontStyle: 'italic',
    color: '#525252',
  },
  loadingMessage: {
    minWidth: '11em',
    textAlign: 'left',
    color: '#999',
  },
};

const doctypeFieldsOfInterestMap = {
  gene_centric: [
    'synonyms',
    'id',
  ],
  ssm_centric: [
    'genomic_dna_change',
    (item, query) => (
      jsonpath.query(item, `$.consequence[?(@.transcript.aa_change.toLowerCase().includes("${query.toLowerCase()}"))]`)
        .map(consequence => `${consequence.transcript.gene.symbol} ${consequence.transcript.aa_change}`)
        .join(', ')
    ),
  ],
  annotation: [
    'symbol',
  ],
  file: [
    'file_name',
    'file_id',
  ],
  project: [
    'project_id',
    'name',
    (item) => item.primary_site.join(', '),
  ],
  case: [
    'case_id',
    'project.project_id',
    'sample_ids',
    'submitter_sample_ids',
    'portion_ids',
    'submitter_portion_ids',
    'analyte_ids',
    'submitter_analyte_ids',
    'aliquot_ids',
    'submitter_aliquot_ids',
  ],
};

const ResultHighlights = ({ item, query, style }) => {
  const fields = doctypeFieldsOfInterestMap[item._type] || [];
  const values = fields.map(field => (_.isFunction(field) ? field(item, query) : [].concat(_.get(item, field)).join(', ')));
  const valuesMatchingQuery = values.filter(x => x && x.toLowerCase().includes(query.toLowerCase()));
  return (
    <div style={style}>
      {valuesMatchingQuery.map(value => (
        <Highlight key={value} search={query}>{value}</Highlight>
      ))}
    </div>
  );
};

type TProps = {
  results: TSearchHit[],
  query: string,
  onSelectItem: Function,
  onActivateItem: Function,
  isLoading: boolean,
};

export default ({ results = [], query, isLoading, onSelectItem, onActivateItem }: TProps) => (
  <ul style={{ ...styles.container }}>
    {
      results.map((item, i) => (
        <li
          key={item._id}
          style={{
            ...(item.isSelected && styles.selectedItem),
            ...styles.item,
            ...(isLoading && styles.deemphasizedItem),
          }}
          onMouseEnter={() => onSelectItem(item)}
          onClick={() => onActivateItem(item)}
        >
          <div style={styles.itemIconWrapper}>
            <span style={styles.itemIcon}>
              {entityShortnameMapping[item._type]}
            </span>
          </div>
          <div>
            <span style={styles.itemTitle}>{ item.symbol || item._id }</span>
            <ResultHighlights item={item} query={query} style={{ ...styles.highlights, ...(item.isSelected && _.pick(styles.selectedItem, 'color')) }} />
          </div>
        </li>
      ))
    }
  </ul>
);
