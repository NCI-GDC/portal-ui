/* @flow */

import React from 'react';
import Relay from 'react-relay';
import LocationSubscriber from '@ncigdc/components/LocationSubscriber';

import SearchPage from '@ncigdc/components/SearchPage';
import ProjectsCharts from '@ncigdc/components/ProjectsCharts';

import type { TRawQuery } from '@ncigdc/utils/uri/types';

import ProjectTable from './ProjectTable';
import ProjectAggregations from './ProjectAggregations';


export type TProps = {
  relay: Object,
  autocomplete: {
    hits: Array<Object>,
  },
  viewer: {
    projects: {
      aggregations: string,
      hits: string,
    },
  },
};

export const ProjectsPageComponent = (props: TProps) => (
  <SearchPage
    Facets={
      <ProjectAggregations
        aggregations={props.viewer.projects.aggregations}
        suggestions={(props.autocomplete || { hits: [] }).hits}
        setAutocomplete={value => props.relay.setVariables({ idAutocomplete: value, runAutocomplete: !!value })}
      />
    }
    Results={<ProjectTable hits={props.viewer.projects.hits} />}
    charts={<LocationSubscriber>{(ctx: {| pathname: string, query: TRawQuery |}) => (
      <ProjectsCharts
        hits={props.viewer.projects.hits}
        query={ctx.query}
        pathname={ctx.pathname}
      />
    )}</LocationSubscriber>}
  />
);

export const ProjectsPageQuery = {
  initialVariables: {
    size: 1000,
    offset: null,
    filters: null,
    sort: null,
    idAutocomplete: null,
    runAutocomplete: false,
  },
  fragments: {
    /*
    autocomplete: () => Relay.QL`
      fragment on Projects {
          hits(first: 5, id_autocomplete: $idAutocomplete) {
            edges @include(if: $runAutocomplete) {
              node {
                project_id
                name
                primary_site
              }
            }
          }
      }
    `,
    */
    viewer: () => Relay.QL`
      fragment on Root {
        projects {
          aggregations(filters: $filters) {
            ${ProjectAggregations.getFragment('aggregations')}
          }
          hits(first: $size offset: $offset, sort: $sort, filters: $filters) {
            ${ProjectTable.getFragment('hits')}
            ${ProjectsCharts.getFragment('hits')}
          }
        }
      }
    `,
  },
};

const ProjectsPage = Relay.createContainer(
  ProjectsPageComponent,
  ProjectsPageQuery
);

export default ProjectsPage;
