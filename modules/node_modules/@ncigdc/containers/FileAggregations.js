/* @flow */

import React from 'react';
import Relay from 'react-relay';

import TermAggregation from '@ncigdc/components/Aggregations/TermAggregation';
import SuggestionFacet from '@ncigdc/components/Aggregations/SuggestionFacet';

import type { TBucket } from '@ncigdc/components/Aggregations/types';

import { withTheme } from '@ncigdc/theme';
import FileIcon from '@ncigdc/theme/icons/File';
import { Row, Column } from '@ncigdc/uikit/Flex';

export type TProps = {
  aggregations: {
    access: { buckets: [TBucket] },
    data_category: { buckets: [TBucket] },
    data_format: { buckets: [TBucket] },
    data_type: { buckets: [TBucket] },
    experimental_strategy: { buckets: [TBucket] },
    platform: { buckets: [TBucket] },
    analysis__workflow_type: { buckets: [TBucket] },
  },
  theme: Object,
  suggestions: Array<Object>,
  setAutocomplete: Function,
};

export const FileAggregationsComponent = (props: TProps) => (
    <div>
      <SuggestionFacet
        title="File"
        doctype="files"
        fieldNoDoctype="file_id"
        placeholder="Search for File Id"
        hits={props.suggestions}
        setAutocomplete={() => { /* autcomplete turned off for now */ }}
        dropdownItem={(x) => (
          <span style={{ display: 'flex' }}>
            <Column>
              <FileIcon style={{ paddingRight: '1rem', paddingTop: '1rem' }} />
            </Column>
            <Column>
              <span style={{ fontWeight: 'bold' }}>
                {x.node.file_id}
              </span>
              {x.node.file_name}
            </Column>
          </span>
        )}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'data_category'}
        title="Data Category"
        buckets={props.aggregations.data_category.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'data_type'}
        title="Data Type"
        buckets={props.aggregations.data_type.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'experimental_strategy'}
        title="Experimental Strategy"
        buckets={props.aggregations.experimental_strategy.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'analysis__workflow_type'}
        title="Workflow Type"
        buckets={props.aggregations.analysis__workflow_type.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'data_format'}
        title="Data Format"
        buckets={props.aggregations.data_format.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'platform'}
        title="Platform"
        buckets={props.aggregations.platform.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'access'}
        title="Access"
        buckets={props.aggregations.access.buckets}
      />
    </div>
  );

export const FileAggregationsQuery = {
  fragments: {
    aggregations: () => Relay.QL`
      fragment on FileAggregations {
        access {
          buckets {
            doc_count
            key
          }
        }
        data_category {
          buckets {
            doc_count
            key
          }
        }
        data_format {
          buckets {
            doc_count
            key
          }
        }
        data_type {
          buckets {
            doc_count
            key
          }
        }
        experimental_strategy {
          buckets {
            doc_count
            key
          }
        }
        analysis__workflow_type {
          buckets {
            doc_count
            key
          }
        }
        platform {
          buckets {
            doc_count
            key
          }
        }
      }
    `,
  },
};

const FileAggregations = Relay.createContainer(
  withTheme(FileAggregationsComponent),
  FileAggregationsQuery
);

export default FileAggregations;
