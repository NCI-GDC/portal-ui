/* @flow */

import React from 'react';
import Relay from 'react-relay';

import { Row } from '@ncigdc/uikit/Flex';
import Button from '@ncigdc/uikit/Button';

import SearchPage from '@ncigdc/components/SearchPage';
import TabbedLinks from '@ncigdc/components/TabbedLinks';
import SmartSearchLink from '@ncigdc/components/Links/SmartSearchLink';
import GenesTab from '@ncigdc/components/Cohort/GenesTab';
import MutationsTab from '@ncigdc/components/Cohort/MutationsTab';
import OncogridTab from '@ncigdc/components/Cohort/OncogridTab';
import CasesTab from '@ncigdc/components/Cohort/CasesTab';

import CohortCasesCharts from '@ncigdc/components/Cohort/CohortCasesCharts';

import CaseTable from '@ncigdc/containers/cohort/CaseTable';
import CaseAggregations from '@ncigdc/containers/cohort/CaseAggregations';
import GeneAggregations from '@ncigdc/containers/cohort/GeneAggregations';
import SSMAggregations from '@ncigdc/containers/cohort/SSMAggregations';

export type TProps = {
  autocomplete: {
    cases: {
      hits: Array<Object>,
    },
    genes: {
      hits: Array<Object>,
    },
    ssms: {
      hits: Array<Object>,
    },
  },
  relay: Object,
  viewer: {
    cohort: {
      cases: {
        aggregations: string,
        hits: {
          total: number,
        },
      },
      genes: {
        aggregations: string,
        hits: {
          total: number,
        },
      },
      ssms: {
        aggregations: string,
        hits: {
          total: number,
        },
      },
    },
  },
  showFacets: boolean,
  setShowFacets: Function,
};

export const CohortPageComponent = (props: TProps) => (
  <SearchPage
    facetTabs={[
      {
        id: 'cases',
        text: 'Cases',
        component: (
          <CaseAggregations
            aggregations={props.viewer.cohort.cases.aggregations}
            suggestions={(props.autocomplete || { cases: { hits: [] } }).cases.hits}
            setAutocomplete={
              value => props.relay.setVariables({ idAutocompleteCases: value, runAutocompleteCases: !!value })
            }
          />
        ),
      },
      {
        id: 'genes',
        text: 'Genes',
        component: (
          <GeneAggregations
            aggregations={props.viewer.cohort.genes.aggregations}
            suggestions={(props.autocomplete || { genes: { hits: [] } }).genes.hits}
            setAutocomplete={
              value => props.relay.setVariables({ idAutocompleteGenes: value, runAutocompleteGenes: !!value })
            }
          />
        ),
      },
      {
        id: 'mutations',
        text: 'Mutations',
        component: (
          <SSMAggregations
            aggregations={props.viewer.cohort.ssms.aggregations}
            suggestions={(props.autocomplete || { ssms: { hits: [] } }).ssms.hits}
            setAutocomplete={
              value => props.relay.setVariables({ idAutocompleteSsms: value, runAutocompleteSsms: !!value })
            }
          />
        ),
      },
    ]}
    results={
      <TabbedLinks
        queryParam="searchTableTab"
        defaultIndex={0}
        tabToolbar={
          <Row spacing="2rem" style={{ alignItems: 'center' }}>
            <Button leftIcon={<i className="fa fa-database" />}>
              Repository
            </Button>
            <SmartSearchLink>
              <Button leftIcon={<i className="fa fa-gears" />}>
                Advanced Search
              </Button>
            </SmartSearchLink>
          </Row>
        }
        links={[
          {
            id: 'cases',
            text: `Cases (${props.viewer.cohort.cases.hits.total.toLocaleString()})`,
            component: (
              <CasesTab
                hits={props.viewer.cohort.cases.hits}
                aggregations={props.viewer.cohort.cases.aggregations}
              />
            ),
          },
          {
            id: 'genes',
            text: `Genes (${props.viewer.cohort.genes.hits.total.toLocaleString()})`,
            component: (
              <GenesTab
                totalNumCases={props.viewer.cohort.cases.hits.total}
              />
            ),
          },
          {
            id: 'mutations',
            text: `Mutations (${props.viewer.cohort.ssms.hits.total.toLocaleString()})`,
            component: (
              <MutationsTab
                totalNumCases={props.viewer.cohort.cases.hits.total}
              />
            ),
          },
          {
            id: 'oncogrid',
            text: 'OncoGrid',
            component: (
              <OncogridTab />
            ),
          },
        ]}
      />
    }
  />
);

export const CohortPageQuery = {
  initialVariables: {
    cases_offset: null,
    cases_size: null,
    cases_sort: null,
    genes_offset: null,
    genes_size: null,
    genes_sort: null,
    ssms_offset: null,
    ssms_size: null,
    ssms_sort: null,
    filters: null,
    idAutocompleteCases: null,
    runAutocompleteCases: false,
    idAutocompleteGenes: null,
    runAutocompleteGenes: false,
    idAutocompleteSsms: null,
    runAutocompleteSsms: false,
  },
  fragments: {
    /*
    autocomplete: () => Relay.QL`
      fragment on Cohort {
        cases {
          hits(first: 5, id_autocomplete: $idAutocompleteCases) {
            edges @include(if: $runAutocompleteCases) {
              node {
                case_id
                project {
                  project_id
                }
              }
            }
          }
        }
        genes {
          hits(first: 5, id_autocomplete: $idAutocompleteGenes) {
            edges @include(if: $runAutocompleteGenes) {
              node {
                symbol
                name
              }
            }
          }
        }
        ssms {
          hits(first: 5, id_autocomplete: $idAutocompleteSsms) {
            edges @include(if: $runAutocompleteSsms) {
              node {
                ssm_id
              }
            }
          }
        }
      }
    `,
    */
    viewer: () => Relay.QL`
      fragment on Root {
        cohort {
          cases {
            aggregations(filters: $filters) {
              ${CaseAggregations.getFragment('aggregations')}
              ${CohortCasesCharts.getFragment('aggregations')}
            }
            hits(first: $cases_size, offset: $cases_offset, filters: $filters, sort: $cases_sort) {
              ${CaseTable.getFragment('hits')}
              total
            }
          }
          genes {
            aggregations(filters: $filters) {
              ${GeneAggregations.getFragment('aggregations')}
            }
            hits(first: $genes_size offset: $genes_offset, filters: $filters) {
              total
            }
          }
          ssms {
            aggregations(filters: $filters) {
              ${SSMAggregations.getFragment('aggregations')}
            }
            hits(first: $ssms_size offset: $ssms_offset, filters: $filters) {
              total
            }
          }
        }
      }
    `,
  },
};

const CohortPage = Relay.createContainer(
  CohortPageComponent,
  CohortPageQuery
);

export default CohortPage;
