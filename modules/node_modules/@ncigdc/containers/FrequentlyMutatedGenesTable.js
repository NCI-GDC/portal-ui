// @flow

import React from 'react';
import Relay from 'react-relay';
import withSize from '@ncigdc/utils/withSize';
import { isEqual } from 'lodash';
import { scaleOrdinal, schemeCategory10 } from 'd3';
import { lifecycle, compose, withState } from 'recompose';
import withRouter from '@ncigdc/utils/withRouter';
import { makeFilter } from '@ncigdc/utils/filters';
import Showing from '@ncigdc/components/Pagination/Showing';
import { parseIntParam, parseFilterParam } from '@ncigdc/utils/uri';
import GeneLink from '@ncigdc/components/Links/GeneLink';
import EntityPageHorizontalTable from '@ncigdc/components/EntityPageHorizontalTable';
import Loader from '@ncigdc/uikit/Loaders/Loader';
import { Row } from '@ncigdc/uikit/Flex';
import { Tooltip } from '@ncigdc/uikit/Tooltip';
import { tableToolTipHint } from '@ncigdc/theme/mixins';
import { SpinnerIcon } from '@ncigdc/theme/icons';
import Hidden from '@ncigdc/components/Hidden';
import Pagination from '@ncigdc/components/Pagination';
import SurvivalIcon from '@ncigdc/theme/icons/SurvivalIcon';
import { getSurvivalCurves } from '@ncigdc/utils/survivalplot';
import GeneProjectBreakdown from '@ncigdc/containers/GeneProjectBreakdown';

const colors = scaleOrdinal(schemeCategory10);

const FrequentlyMutatedGenesTableComponent = compose(
  withRouter,
  withState('survivalLoadingId', 'setSurvivalLoadingId', ''),
  lifecycle({
    componentDidMount(): void {
      this.props.relay.setVariables({
        fetchData: true,
        fmgTable_offset: parseIntParam(this.props.query.fmgTable_offset, this.props.relay.route.params.fmgTable_offset || 0),
        fmgTable_size: parseIntParam(this.props.query.fmgTable_size, this.props.relay.route.params.fmgTable_size || 10),
        fmgTable_filters: parseFilterParam(this.props.query.fmgTable_filters, this.props.defaultFilters || null),
      });
    },
    componentWillReceiveProps(nextProps: Object): void {
      if (!isEqual(this.props.query, nextProps.query)) {
        this.props.relay.setVariables({
          fmgTable_offset: parseIntParam(nextProps.query.fmgTable_offset, nextProps.relay.route.params.fmgTable_offset || 0),
          fmgTable_size: parseIntParam(nextProps.query.fmgTable_size, nextProps.relay.route.params.fmgTable_size, 10),
          fmgTable_filters: parseFilterParam(nextProps.query.fmgTable_filters, nextProps.defaultFilters || null),
        });
      }
    },
  }),
  withSize()
)(({
  projectId = '',
  cohort: { genes, cases, filteredCases },
  relay,
  setSurvivalLoadingId,
  survivalLoadingId,
  setSelectedSurvivalData,
  selectedSurvivalData,
  projectBreakdown,
}) => {
  if (genes && !genes.hits.edges.length) {
    return <Row style={{ padding: '1rem' }}>No gene data found.</Row>;
  }

  const data = !genes ? [] : genes.hits.edges.map(x => x.node);

  const numCasesAggByProject = cases.aggregations.project__project_id.buckets.reduce((acc, b) => ({
    ...acc,
    [b.key]: b.doc_count,
  }), {});

  return (
    <Loader
      loading={!genes}
      height="387px"
    >
      <Row style={{ backgroundColor: 'white', padding: '1rem', justifyContent: 'space-between' }}>
        <Showing
          docType="genes"
          prefix={'fmgTable'}
          params={relay.route.params}
          total={!genes ? 0 : genes.hits.total}
        />
      </Row>
      <EntityPageHorizontalTable
        headings={[
          { key: 'symbol', title: 'Symbol' },
          { key: 'name', title: 'Name' },
          { key: 'cytoband', title: 'Cytoband' },
          ...(projectId ?
          [{
            key: 'num_affected_cases_project',
            title: (
              <Tooltip
                Component={
                  <span>
                    Breakdown of Affected Cases in {projectId} <br />
                    # of Cases where Gene is <br />mutated /# SSM tested Cases
                  </span>
                }
                style={tableToolTipHint()}
              >
                # Affected Cases<br />in {projectId}
              </Tooltip>),
          }] : []),
          ...(!projectId ?
          [{
            key: 'num_affected_cases_cohort',
            title: (
              <Tooltip
                Component={
                  <span>
                    Breakdown of Affected Cases in cohort <br />
                    # of Cases where Gene is <br />mutated /# SSM tested Cases
                  </span>
                }
                style={tableToolTipHint()}
              >
                # Affected Cases<br />in cohort
              </Tooltip>),
          }] : []),
          {
            key: 'num_affected_cases_all',
            title: (
              <Tooltip
                Component={
                  <span>
                    # of Cases where gene contains <br />
                    SSM filtered by current criteria <br />
                    / # SSM tested donors portal wide
                  </span>
                }
                style={tableToolTipHint()}
              >
                # Affected Cases<br /> Across all Projects
              </Tooltip>
            ),
          },
          // TODO: make secondary call
          // {
          //   key: 'num_mutations',
          //   title: (
          //     <Tooltip
          //       Component='# of SSM in the gene'
          //       style={tableToolTipHint()}
          //     >
          //       # Mutations
          //     </Tooltip>
          //   ),
          // },
          {
            title: 'Survival Analysis',
            key: 'survival_plot',
            style: { textAlign: 'center', width: '100px' },
          },
        ]}
        data={data.map(g => ({
          ...g,
          symbol: <GeneLink id={g.gene_id}>{g.symbol}</GeneLink>,
          cytoband: (g.cytoband || []).join(', '),
          num_affected_cases_project:
            `${g.score} / ${numCasesAggByProject[projectId]}
            (${((g.score / numCasesAggByProject[projectId]) * 100).toFixed(2)}%)`,
          num_affected_cases_cohort:
            `${g.score} / ${filteredCases.hits.total}
            (${((g.score / filteredCases.hits.total) * 100).toFixed(2)}%)`,
          num_affected_cases_all: (
            <GeneProjectBreakdown
              id={g.gene_id}
              cohort={projectBreakdown}
              allCases={g.case}
              numCasesAggByProject={numCasesAggByProject}
            />
          ),
          // TODO: make secondary call
          // num_mutations: (
          //   /*  TODO: Commented out as part of PRTL-683
          //       Should be revert back once Exploration page is ready
          //   <CohortLink
          //     query={{
          //       searchTableTab: 'mutations',
          //       filters: makeFilter([{ field: 'genes.gene_id', value: [g.gene_id] }], false),
          //     }}
          //   >
          //     {g.case.reduce((acc, c) => acc + (c.ssm || []).length, 0).toLocaleString()}
          //   </CohortLink>*/
          //   <span>
          //     {g.case.reduce((acc, c) => acc + (c.ssm || []).length, 0).toLocaleString()}
          //   </span>
          // ),
          survival_plot: (
            <Tooltip Component={`Click icon to plot ${g.symbol}`}>
              <button
                style={{ padding: '2px 3px' }}
                onClick={() => {
                  if (g.symbol !== selectedSurvivalData.id) {
                    setSurvivalLoadingId(g.symbol);
                    getSurvivalCurves({
                      field: 'gene.symbol',
                      value: g.symbol,
                      currentFilters: projectId ?
                      {
                        op: 'and',
                        content: [
                          {
                            op: '=',
                            content: {
                              field: 'cases.project.project_id',
                              value: projectId,
                            },
                          },
                        ],
                      } : null,
                    })
                      .then(data => {
                        setSelectedSurvivalData(data);
                        setSurvivalLoadingId('');
                      });
                  } else {
                    setSelectedSurvivalData({});
                  }
                }}
              >
                <span
                  style={{
                    color: colors(selectedSurvivalData.id === g.symbol ? 1 : 0),
                    cursor: 'pointer',
                  }}
                >
                  {survivalLoadingId === g.symbol ? <SpinnerIcon /> : <SurvivalIcon />}
                  <Hidden>add to survival plot</Hidden>
                </span>
              </button>
            </Tooltip>
          ),
        }))}
      />
      <Pagination
        prefix={'fmgTable'}
        params={relay.route.params}
        total={!genes ? 0 : genes.hits.total}
      />
    </Loader>
  );
});

export const FrequentlyMutatedGenesTableQuery = {
  initialVariables: {
    fetchData: false,
    fmgTable_filters: null,
    fmgTable_size: 10,
    fmgTable_offset: 0,
    score: 'case.project.project_id',
    ssmTested: makeFilter([{
      field: 'available_variation_data',
      value: 'ssm',
    }], false),
  },
  fragments: {
    cohort: () => Relay.QL`
      fragment on Cohort {
        cases {
          aggregations(filters: $ssmTested) {
            project__project_id {
              buckets {
                doc_count
                key
              }
            }
          }
          hits(first: 0) { total }
        }
        filteredCases: cases @include(if: $fetchData) {
          hits(first: 0 filters: $fmgTable_filters) {
            total
          }
        }
        genes @include(if: $fetchData) {
          hits (
            first: $fmgTable_size
            offset: $fmgTable_offset
            filters: $fmgTable_filters
            score: $score
          ) {
            total
            edges {
              node {
                score
                symbol
                name
                cytoband
                gene_id
                case {
                  hits(first: 0) {
                    total
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const FrequentlyMutatedGenesTable = Relay.createContainer(
  FrequentlyMutatedGenesTableComponent,
  FrequentlyMutatedGenesTableQuery
);

export default FrequentlyMutatedGenesTable;
