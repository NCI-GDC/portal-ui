// @flow

import React from 'react';
import withSize from 'react-sizeme';
import { compose } from 'recompose';

import { RepositoryFilesLink } from '@ncigdc/components/Links/RepositoryLink';
import withRouter from '@ncigdc/utils/withRouter';

import ageDisplay from '@ncigdc/utils/ageDisplay';
import { makeFilter } from '@ncigdc/utils/filters';
import { DATA_CATEGORIES } from '@ncigdc/utils/constants';

import { Row, Column } from '@ncigdc/uikit/Flex';
import { Tooltip } from '@ncigdc/uikit/Tooltip';

import BarChart from '@ncigdc/components/Charts/BarChart';
import EntityPageHorizontalTable from '@ncigdc/components/EntityPageHorizontalTable';
import { tableToolTipHint } from '@ncigdc/theme/mixins';

import { withTheme } from '@ncigdc/theme';

type TProps = {
  mostAffectedCasesChart: Array<Object>,
  mostAffectedCasesTable: Array<Object>,
  theme: Object,
  size: {
    width: number,
  },
  push: Function,
};

const enhance = compose(
  withTheme,
  withSize(),
  withRouter
);

const MostAffectedCases = ({
  mostAffectedCasesChart,
  mostAffectedCasesTable,
  theme,
  size: {
    width,
  },
  push,
}: TProps) => {
  const chartMargin = { top: 30, right: 50, bottom: 105, left: 40 };
  const bandWidth = (width - chartMargin.right - chartMargin.left) / (mostAffectedCasesChart.length + 1) * 0.7;

  return (
    <Column>
      {!!mostAffectedCasesChart.length &&
        <div>
          <Row style={{ padding: '0 2rem', justifyContent: 'center' }}>
            <BarChart
              data={mostAffectedCasesChart.map(c => ({
                label: `${c.case_id.substring(0, 8)}\u2026`,
                value: c.gene.length,
                tooltip: <span>{c.case_id}<br />{c.gene.length} Genes Affected</span>,
                onClick: () => push(`/cases/${c.case_id}`),
              }))}
              margin={chartMargin}
              height={250}
              bandwidth={bandWidth}
              yAxis={{ title: '# Genes Affected' }}
              styles={{
                xAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                yAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                bars: { fill: theme.secondary },
                tooltips: {
                  fill: '#fff',
                  stroke: theme.greyScale4,
                  textFill: theme.greyScale3,
                },
              }}
            />
          </Row>

          <EntityPageHorizontalTable
            headings={[
              { key: 'id', title: 'UUID' },
              { key: 'primary_site', title: 'Site' },
              { key: 'gender', title: 'Gender' },
              { key: 'age_at_diagnosis', title: 'Age at Diagnosis' },
              { key: 'tumor_stage', title: 'Stage' },
              { key: 'days_to_death',
                title: <Tooltip Component='Survival (days)' style={tableToolTipHint()}>Survival</Tooltip>,
              },
              { key: 'days_to_last_follow_up',
                title: <Tooltip Component='Days to Last Follow Up' style={tableToolTipHint()}>Last Follow<br />Up</Tooltip>,
                style: { textAlign: 'right' },
              },
              { key: 'data_types',
                title: 'Available Files per Data Category',
                style: { textAlign: 'right' },
                subheadings: Object.keys(DATA_CATEGORIES).map(k =>
                  <abbr key={DATA_CATEGORIES[k].abbr}>
                    <Tooltip Component={DATA_CATEGORIES[k].full} style={tableToolTipHint()}>
                      {DATA_CATEGORIES[k].abbr}
                    </Tooltip>
                  </abbr>
                ),
              },
              {
                key: 'num_mutations',
                title: '#Mutations',
                style: { textAlign: 'right' },
              },
              {
                key: 'num_genes',
                title: '#Genes',
                style: { textAlign: 'right' },
              },
            ]}
            data={mostAffectedCasesTable.map(c => {
              const dataCategorySummary = c.summary.data_categories.reduce((acc, d) => ({
                ...acc, [d.data_category]: d.file_count,
              }), {});
              const diagnoses = (c.diagnoses || [])[0] || {};

              return {
                id: <a href={`/cases/${c.case_id}`}>{c.case_id}</a>,
                primary_site: c.project.primary_site,
                gender: c.demographic ? c.demographic.gender : '',
                age_at_diagnosis: ageDisplay(diagnoses.age_at_diagnosis),
                tumor_stage: diagnoses.tumor_stage,
                days_to_last_follow_up: diagnoses.days_to_last_follow_up,
                num_mutations: c.gene.reduce((sum, g) => sum + g.ssm.length, 0),
                num_genes: c.gene.length,
                data_types: Object.keys(DATA_CATEGORIES).map(k => (
                  dataCategorySummary[DATA_CATEGORIES[k].full] ? (
                    <RepositoryFilesLink
                      query={{
                        filters: makeFilter([
                          { field: 'cases.case_id', value: c.case_id },
                          { field: 'files.data_category', value: DATA_CATEGORIES[k].full },
                        ], false),
                      }}
                    >
                      {dataCategorySummary[DATA_CATEGORIES[k].full]}
                    </RepositoryFilesLink>
                  ) : '--'
                )
              ) };
            })}
          />
        </div>
      }
      {!mostAffectedCasesTable.length &&
        <span style={{ padding: '2rem' }}>No most affected case data to display</span>
      }
    </Column>
  );
};

export default enhance(MostAffectedCases);
