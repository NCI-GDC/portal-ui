// @flow

import React from 'react';
import Relay from 'react-relay';
import { compose, lifecycle, withProps, withState } from 'recompose';
import moment from 'moment';
import { insertRule } from 'glamor';
import * as d3 from 'd3';
import { isEqual } from 'lodash';
import lolliplot from '@oncojs/lolliplot';
import withRouter from '@ncigdc/utils/withRouter';
import { buildProteinLolliplotData } from '@ncigdc/utils/data';
import { makeFilter } from '@ncigdc/utils/filters';
import { withTooltip } from '@ncigdc/uikit/Tooltip';
import { Row, Column } from '@ncigdc/uikit/Flex';
import DropdownItem from '@ncigdc/uikit/DropdownItem';
import Dropdown from '@ncigdc/uikit/Dropdown';
import Button from '@ncigdc/uikit/Button';
import { visualizingButton } from '@ncigdc/theme/mixins';
import DoubleHelix from '@ncigdc/theme/icons/DoubleHelix';
import SpinnerParticle from '@ncigdc/uikit/Loaders/Particle';
import DownloadVisualizationButton from '@ncigdc/components/DownloadVisualizationButton';

const id = 'protein-viewer-root';
const selector = `#${id}`;

insertRule(`
  ${selector} text { user-select: none; }
  [class^="mutation-circle"] { cursor: pointer; }
`);

const styles = {
  heading: {
    flexGrow: 1,
    fontSize: '2.2rem',
    marginBottom: 7,
    marginTop: 7,
    display: 'flex',
    alignItems: 'center',
  },
};

const initialState = {
  activeTranscript: {},
  loading: true,
  actions: {
    reset: () => {},
  },
};

const LolliplotComponent = compose(
  withTooltip,
  withRouter,
  withState('state', 'setState', initialState),
  withProps({
    renderProteinLolliplot(data, transcript, { setState, setTooltip, push }): void {
      const element = document.querySelector(selector);
      element.innerHTML = '';
      setState(s => ({
        ...s,
        actions: lolliplot({
          d3,
          data,
          element,
          width: element.clientWidth - 40,
          height: 450,
          domainWidth: transcript.length_amino_acid,
          onMutationClick: d => { push(`/ssms/${d.id}`); },
          onMutationMouseover: d => {
            setTooltip(
              <span>
                <div>AA Change: {d.aa_change}</div>
                <div>DNA Change: {d.genomic_dna_change}</div>
                <div># of Cases: {d.donors}</div>
                <div>Functional Impact: {d.impact}</div>
              </span>
            );
          },
          onMutationMouseout: () => setTooltip(),
          onProteinMouseover: d => {
            setTooltip(
              <span>
                <div>{d.id}</div>
                <div>{d.description}</div>
                <div><b>Click to zoom</b></div>
              </span>
            );
          },
          onProteinMouseout: () => setTooltip(),
        })
      }));
    },
  }),
  lifecycle({
    componentDidMount() {
      const transcript = this.props.node.transcripts.hits.edges.find(x => x.node.is_canonical).node;

      this.props.relay.setVariables({
        fetchData: true,
        filters: makeFilter([
          {
            field: 'consequence.transcript.transcript_id',
            value: [transcript.transcript_id],
          },
        ], false),
      })
    },
    async componentWillReceiveProps(nextProps) {
      if (
        (!this.props.ssms.hits && nextProps.ssms.hits) ||
        !isEqual(this.props.state.activeTranscript, nextProps.state.activeTranscript)
      ) {
        const transcript = nextProps.state.activeTranscript.transcript_id
          ? nextProps.state.activeTranscript
          : this.props.node.transcripts.hits.edges.find(x => x.node.is_canonical).node;

        if (nextProps.ssms.hits.edges.length) {
          const data = nextProps.ssms.hits.edges.map(x => x.node);

          const proteinLolliplotData = buildProteinLolliplotData({
            transcript,
            data
          });

          this.props.renderProteinLolliplot(proteinLolliplotData, transcript, nextProps);
        }

        this.props.setState(s => ({
          ...s,
          activeTranscript: transcript,
          loading: false,
          notEnoughData: !nextProps.ssms.hits.edges.length,
        }));
      }
    },
  })
)(({
  state: {
    loading,
    activeTranscript,
    proteinLolliplotData = {},
    notEnoughData = false,
    actions: {
      reset,
    },
  },
  setState,
  node: gene,
}) => {
  return (
    <Column>
      <Row>
        <h1 style={{ ...styles.heading, padding: '1rem' }} id="protein">
          <DoubleHelix width="12px" />
          <span style={{ marginLeft: '1rem' }}>Protein</span>
        </h1>
      </Row>
      <Row style={{ marginBottom: '2rem', padding: '0 2rem' }} spacing="1rem">
        <span style={{ alignSelf: 'center' }}>
          Transcript:
        </span>
        <Dropdown
          selected={
            <span
              style={{
                fontWeight: activeTranscript.transcript_id === gene.canonical_transcript_id
                  ? 'bold' : 'initial',
              }}
            >
              {activeTranscript.transcript_id} ({activeTranscript.length_amino_acid} aa)
            </span>
          }
        >
          {gene.transcripts.hits.edges.map(x => x.node)
          .filter(t => t.transcript_id === gene.canonical_transcript_id)
          .map(t =>
            <DropdownItem
              key={t.transcript_id}
              style={{
                fontWeight: 'bold',
                ...(activeTranscript.transcript_id === t.transcript_id && {
                  backgroundColor: 'rgb(44, 136, 170)',
                  color: 'white',
                }),
                cursor: 'pointer',
              }}
              onClick={() => setState(s => ({ ...s, activeTranscript: t }))}
            >
              {t.transcript_id} ({t.length_amino_acid} aa)
            </DropdownItem>
          )}
          {gene.transcripts.hits.edges.map(x => x.node)
          .filter(t => t.length_amino_acid && t.transcript_id !== gene.canonical_transcript_id)
          .map(t =>
            <DropdownItem
              key={t.transcript_id}
              style={{
                ...(activeTranscript.transcript_id === t.transcript_id && {
                  backgroundColor: 'rgb(44, 136, 170)',
                  color: 'white',
                }),
                cursor: 'pointer',
              }}
              onClick={() => setState(s => ({ ...s, activeTranscript: t }))}
            >
              {t.transcript_id} ({t.length_amino_acid} aa)
            </DropdownItem>
          )}
        </Dropdown>
        <Button
          style={visualizingButton}
          onClick={reset}
          leftIcon={<i className="fa fa-refresh" />}
        >
          Reset
        </Button>
        <DownloadVisualizationButton
          svg="#protein-viewer-root svg.chart"
          data={proteinLolliplotData}
          stylePrefix="#protein-viewer-root"
          slug={`protein_viewer-${gene.symbol}-${moment().format('YYYY-MM-DD')}`}
        />
      </Row>
      {loading &&
        <Column style={{ alignItems: 'center', padding: '20px' }}>
          <SpinnerParticle />
        </Column>
      }
      {!loading && notEnoughData &&
        <Column style={{ alignItems: 'center', padding: '20px' }}>
          Not enough data
        </Column>
      }
      <div style={{ padding: '0 3rem' }} id={id} />
    </Column>
  );``
});

export const LolliplotQuery = {
  initialVariables: {
    fetchData: false,
    filters: null,
    score: 'occurrence.case.project.project_id',
  },
  fragments: {
    node: () => Relay.QL`
      fragment on Gene {
        gene_id
        canonical_transcript_id
        transcripts {
          hits(first: 99) {
            edges {
              node {
                is_canonical
                transcript_id
                length_amino_acid
                domains {
                  hit_name
                  start
                  end
                }
              }
            }
          }
        }
      }
    `,
    ssms: () => Relay.QL`
      fragment on Ssms {
        dummy_field: hits (first: 1) { total }
        hits(first: 100 filters: $filters, score: $score) @include(if: $fetchData) {
          total
          edges {
            node {
              score
              ssm_id
              genomic_dna_change
              consequence {
                hits(first: 100) {
                  edges {
                    node {
                      transcript {
                        aa_change
                        aa_start
                        annotation {
                          impact
                        }
                        consequence_type
                        gene {
                          gene_id
                          symbol
                        }
                        is_canonical
                        transcript_id
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const Lolliplot = Relay.createContainer(
  LolliplotComponent,
  LolliplotQuery
);

export default Lolliplot;
