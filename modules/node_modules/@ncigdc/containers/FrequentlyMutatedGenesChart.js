// @flow

import React from 'react';
import Relay from 'react-relay';
import withSize from '@ncigdc/utils/withSize';
import { lifecycle, compose } from 'recompose';
import { isEqual } from 'lodash';
import withRouter from '@ncigdc/utils/withRouter';
import { parseFilterParam } from '@ncigdc/utils/uri';
import { makeFilter } from '@ncigdc/utils/filters';
import Loader from '@ncigdc/uikit/Loaders/Loader';
import { withTheme } from '@ncigdc/theme';
import { graphTitle } from '@ncigdc/theme/mixins';
import { Row } from '@ncigdc/uikit/Flex';
import DownloadVisualizationButton from '@ncigdc/components/DownloadVisualizationButton';
import BarChart from '@ncigdc/components/Charts/BarChart';

const FrequentlyMutatedGenesChartComponent = compose(
  withRouter,
  lifecycle({
    componentDidMount(): void {
      this.props.relay.setVariables({
        fetchData: true,
        fmgChart_filters: parseFilterParam(
          this.props.query.fmgChart_filters,
          this.props.defaultFilters || null
        ),
      });
    },
    componentWillReceiveProps(nextProps: Object): void {
      if (!isEqual(this.props.query, nextProps.query)) {
        this.props.relay.setVariables({
          fmgChart_filters: parseFilterParam(
            nextProps.query.fmgChart_filters,
            nextProps.defaultFilters || null
          ),
        });
      }
    },
  }),
  withTheme,
  withSize()
)(({
  projectId = '',
  theme,
  size: {
    width,
  },
  cohort: { genes, cases, filteredCases },
  push,
  showSurvivalPlot = true,
  context = 'cohort',
}) => {
  const chartMargin = { top: 30, right: 50, bottom: 105, left: 40 };

  const maxBars = 20;
  const bandWidth = (
    (width - chartMargin.right - chartMargin.left) /
    (maxBars + 1) / (showSurvivalPlot ? 1 : 2)
  ) * 0.7;

  const mutatedGenesChartData = !!genes && genes.hits.edges.map(x => x.node);

  const numCasesAggByProject = cases.aggregations.project__project_id.buckets.reduce((acc, b) => ({
    ...acc,
    [b.key]: b.doc_count,
  }), {});

  const tooltipContext = (ctx, g) => {
    switch (ctx) {
      case 'project': {
        return (
          <span>
            <b>{g.symbol}</b><br />
            {g.score} Case{g.score > 1 ? 's' : ''}
            &nbsp;affected in {projectId}<br />
            {g.score} / {numCasesAggByProject[projectId]}
            &nbsp;({((g.score / numCasesAggByProject[projectId]) * 100)
            .toFixed(2)}%)
          </span>
        );
      }
      case 'cohort': {
        return (
          <span>
            <b>{g.symbol}</b><br />
            {g.score} Case{g.score > 1 ? 's' : ''}
            &nbsp;affected in cohort<br />
            {g.score} / {filteredCases.hits.total}
            &nbsp;({((g.score / filteredCases.hits.total) * 100)
            .toFixed(2)}%)
          </span>
        );
      }
      default: {
        return <span />;
      }
    }
  };

  return (
    <Loader
      loading={!genes}
      height="400px"
    >
      {!!mutatedGenesChartData &&
        <Row>
          <span>
            <div style={{ textAlign: 'right', marginRight: 50, marginLeft: 30 }}>
              <DownloadVisualizationButton
                disabled={!mutatedGenesChartData.length}
                svg="#mutated-genes-chart svg"
                data={mutatedGenesChartData}
                slug="bar-chart"
                tooltipHTML="Download image or data"
                noText
              />
            </div>
            <div style={graphTitle()}>Distribution of Most Frequently Mutated Genes</div>
            {!!mutatedGenesChartData.length &&
              <div id="mutated-genes-chart">
                <Row style={{ padding: '2rem 2rem 0' }}>
                  <BarChart
                    data={
                      mutatedGenesChartData
                        .sort((a, b) => b.score - a.score)
                        .map(g => ({
                          label: g.symbol,
                          value: projectId
                            ? ((g.score / numCasesAggByProject[projectId]) * 100)
                            : (g.score / cases.hits.total) * 100,
                          tooltip: tooltipContext(context, g),
                          onClick: () => push(`/genes/${g.gene_id}`),
                        }))
                    }
                    yAxis={{ title: '% of Cases Affected' }}
                    bandwidth={bandWidth}
                    margin={chartMargin}
                    height={300}
                    styles={{
                      xAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                      yAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                      bars: { fill: theme.secondary },
                      tooltips: {
                        fill: '#fff',
                        stroke: theme.greyScale4,
                        textFill: theme.greyScale3,
                      },
                    }}
                  />
                </Row>
              </div>
            }
          </span>
        </Row>
      }
    </Loader>
  );
});

export const FrequentlyMutatedGenesChartQuery = {
  initialVariables: {
    fetchData: false,
    fmgChart_filters: null,
    score: 'case.project.project_id',
    ssmTested: makeFilter([{
      field: 'available_variation_data',
      value: 'ssm',
    }], false),
  },
  fragments: {
    cohort: () => Relay.QL`
      fragment on Cohort {
        cases {
          aggregations(filters: $ssmTested) {
            project__project_id {
              buckets {
                doc_count
                key
              }
            }
          }
          hits(first: 0) { total }
        }
        filteredCases: cases @include(if: $fetchData) {
          hits(first: 0 filters: $fmgChart_filters) {
            total
          }
        }
        genes @include(if: $fetchData) {
          hits (first: 20 filters: $fmgChart_filters, score: $score) @include(if: $fetchData) {
            total
            edges {
              node {
                id
                score
                symbol
                gene_id
                case {
                  hits(first: 1) {
                    total
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const FrequentlyMutatedGenesChart = Relay.createContainer(
  FrequentlyMutatedGenesChartComponent,
  FrequentlyMutatedGenesChartQuery
);

export default FrequentlyMutatedGenesChart;
