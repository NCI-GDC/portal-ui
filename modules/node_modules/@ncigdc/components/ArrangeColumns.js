// @flow
import React from 'react';
import { connect } from 'react-redux';
import { compose, withState, pure } from 'recompose';
import ArrangeIcon from 'react-icons/lib/fa/bars';

import { Row } from '@ncigdc/uikit/Flex';
import SortableItem from '@ncigdc/uikit/SortableItem';
import tableColumns from '@ncigdc/tableColumns';
import { toggleColumn, setColumns } from '@ncigdc/dux/tableColumns';
import styled from '@ncigdc/theme/styled';

const SortRow = styled(Row, {
  lineHeight: '1.5',
  alignItems: 'center',
  padding: '0.3rem 0.6rem',
  ':hover': {
    backgroundColor: ({ theme }) => theme.greyScale6,
  },
});

const ArrangeColumns = compose(
  connect((state, props) => ({
    activeColumns: state.tableColumns[props.entityType],
  })),
  withState('state', 'setState',
    ({ entityType }) => ({ draggingIndex: null, columns: tableColumns[entityType].table })
  ),
  pure
)(({
  dispatch,
  activeColumns,
  setState,
  state,
  searchTerm,
  entityType,
}) => {
  const filteredColumns = state.columns.filter(x =>
    x.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div>
      {filteredColumns.map((column, i) =>
        <SortableItem
          key={column.id}
          updateState={nextState => setState(state => { // eslint-disable-line
            if (!nextState.items && state.items) {
              const nextColumnIds = state.items.reduce((acc, x) => (
                [...acc, ...(activeColumns.includes(x.id) ? [x.id] : [])]
              ), []);

              dispatch(setColumns({ entityType, ids: nextColumnIds }));
            }
            return { columns: filteredColumns, ...nextState };
          })}
          draggingIndex={state.draggingIndex}
          items={filteredColumns}
          sortId={i}
          outline="list"
        >
          <SortRow>
            <Row
              style={{ width: '100%', cursor: 'pointer' }}
              onClick={() => dispatch(toggleColumn({ entityType, id: column.id }))}
            >
              <input
                readOnly
                style={{ pointerEvents: 'none' }}
                type="checkbox"
                checked={activeColumns.includes(column.id)}
              />
              <span style={{ marginLeft: '0.3rem' }}>{column.name}</span>
            </Row>
            <ArrangeIcon style={{ marginLeft: 'auto', cursor: 'row-resize' }} />
          </SortRow>
        </SortableItem>
      )}
    </div>
  );
});

export default ArrangeColumns;
