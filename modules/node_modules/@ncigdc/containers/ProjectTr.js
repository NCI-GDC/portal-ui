/* @flow */

import React from 'react';

import { RepositoryCasesLink, RepositoryFilesLink } from '@ncigdc/components/Links/RepositoryLink';
import ProjectLink from '@ncigdc/components/Links/ProjectLink';
import { findDataCategory, CATEGORY_MAP } from '@ncigdc/utils/data';
import { makeFilter } from '@ncigdc/utils/filters';

import type { TCategory } from '@ncigdc/utils/data/types';

import { Tr, Td } from '@ncigdc/uikit/Table';
import CollapsibleList from '@ncigdc/uikit/CollapsibleList';

import { withTheme } from '@ncigdc/theme';

export type TProps = {|
  index: number,
  node: {|
    disease_type: string,
    name: string,
    primary_site: string,
    program: {|
      name: string,
    |},
    project_id: string,
    summary: {|
      case_count: number,
      data_categories: Array<{|
        case_count?: number,
        data_category: TCategory,
      |}>,
      file_count: number,
    |},
  |},
  theme: Object,
|};

export const ProjectTrComponent = ({ node, index, theme }: TProps) => {
  type TLinkProps = { fields?: Array<Object>, children?: mixed };
  type TLink = (props: TLinkProps) => any;

  const CasesLink: TLink = ({ fields = [], children }) => (
    <RepositoryCasesLink
      query={{
        filters: makeFilter([{ field: 'cases.project.project_id', value: [node.project_id] }, ...fields], false),
      }}
    >
      {children}
    </RepositoryCasesLink>
  );

  const FilesLink: TLink = ({ fields = [], children }) => (
    <RepositoryCasesLink
      query={{
        filters: makeFilter([{ field: 'cases.project.project_id', value: [node.project_id] }, ...fields], false),
      }}
    >
      {children}
    </RepositoryCasesLink>
  );

  return (
    <Tr
      style={{
        backgroundColor: index % 2 === 0 ? theme.tableStripe : '#fff',
      }}
    >
      <Td>
        <ProjectLink id={node.project_id} />
      </Td>
      <Td style={{ whiteSpace: 'normal' }}>
        <CollapsibleList data={node.disease_type} />
      </Td>
      <Td>
        <CollapsibleList data={node.primary_site} />
      </Td>
      <Td>{node.program.name}</Td>
      <Td>
        <CasesLink>{node.summary.case_count.toLocaleString()}</CasesLink>
      </Td>
      <Td>
        <CasesLink
          fields={[{ field: 'files.data_category', value: CATEGORY_MAP.Seq }]}
        >
          {findDataCategory('Seq', node.summary.data_categories).case_count.toLocaleString()}
        </CasesLink>
      </Td>
      <Td>
        <CasesLink
          fields={[{ field: 'files.data_category', value: CATEGORY_MAP.Exp }]}
        >
          {findDataCategory('Exp', node.summary.data_categories).case_count.toLocaleString()}
        </CasesLink>
      </Td>
      <Td>
        <CasesLink
          fields={[{ field: 'files.data_category', value: CATEGORY_MAP.SNV }]}
        >
          {findDataCategory('SNV', node.summary.data_categories).case_count.toLocaleString()}
        </CasesLink>
      </Td>
      <Td>
        <CasesLink
          fields={[{ field: 'files.data_category', value: CATEGORY_MAP.CNV }]}
        >
          {findDataCategory('CNV', node.summary.data_categories).case_count.toLocaleString()}
        </CasesLink>
      </Td>
      <Td>
        <CasesLink
          fields={[{ field: 'files.data_category', value: CATEGORY_MAP.Clinical }]}
        >
          {findDataCategory('Clinical', node.summary.data_categories).case_count.toLocaleString()}
        </CasesLink>
      </Td>
      <Td>
        <CasesLink
          fields={[{ field: 'files.data_category', value: CATEGORY_MAP.Bio }]}
        >
          {findDataCategory('Bio', node.summary.data_categories).case_count.toLocaleString()}
        </CasesLink>
      </Td>
      <Td>
        <RepositoryFilesLink
          query={{
            filters: makeFilter([{ field: 'cases.project.project_id', value: node.project_id }], false),
          }}
        >
          {node.summary.file_count.toLocaleString()}
        </RepositoryFilesLink>
      </Td>
    </Tr>
  );
};

export default withTheme(ProjectTrComponent);
