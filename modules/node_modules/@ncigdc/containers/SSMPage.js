/* @flow */

import React from 'react';
import Relay from 'react-relay';
import { compose, lifecycle } from 'recompose';

import { makeFilter } from '@ncigdc/utils/filters';
import FullWidthLayout from '@ncigdc/components/Layouts/FullWidthLayout';
import SSM from '@ncigdc/components/SSM';
import Lolliplot from '@ncigdc/containers/Lolliplot';
import SsmSummary from '@ncigdc/containers/SsmSummary';
import SsmExternalReferences from '@ncigdc/containers/SsmExternalReferences';
import CancerDistributionChart from '@ncigdc/containers/CancerDistributionChart';
import CancerDistributionTable from '@ncigdc/containers/CancerDistributionTable';

export type TProps = {
  node: {
    genomic_dna_change: string,
    ssm_id: string,
    cosmic_id: string,
    consequence: {
      hits: {
        edges: Array<{
          node: {
            transcript: {
              aa_change: string,
              consequence_type: string,
              transcript_id: string,
              is_canonical: boolean,
              annotation: {
                impact: string,
                hgvsc: string,
                dbsnp_rs: string,
              },
              gene: {
                external_db_ids: {
                  entrez_gene: string,
                  uniprotkb_swissprot: string,
                  hgnc: string,
                  omim_gene: string,
                },
                symbol: string,
                gene_strand: string,
                gene_id: string,
              },
            },
          },
        }>,
      },
    },
  },
  viewer: {
    cohort: {
      projects: Object,
      cancerDistributionTableCohortFragment: Object,
      cases: {
        aggregations: {
          project__project_id: {
            buckets: Array<Object>,
          },
        },
      },
    },
  },
};

export const SSMPageComponent = compose(
  lifecycle({
    componentDidMount(): void {
      const { node, relay } = this.props; // eslint-disable-line fp/no-this
      const transcript = node.consequence.hits.edges.find(x =>
        x.node.transcript.is_canonical
      ).node.transcript;

      relay.setVariables({
        fetchVizData: true,
        ssmFilters: makeFilter([
          {
            field: 'consequence.transcript.transcript_id',
            value: [transcript.transcript_id],
          },
        ], false),
        geneFilters: makeFilter([
          {
            field: 'genes.gene_id',
            value: [transcript.gene.gene_id],
          },
        ], false),
      });
    },
  })
)((props: TProps) => (
  <FullWidthLayout
    title={props.node.ssm_id}
    entityType="MU"
  >
    <SSM
      node={props.node}
      viewer={props.viewer}
      allCasesAgg={props.viewer.cohort.cases.aggregations.project__project_id.buckets}
    />
  </FullWidthLayout>
));

export const SSMPageQuery = {
  initialVariables: {
    score: 'occurrence.case.project.project_id',
    fetchVizData: false,
    geneFilters: null,
    ssmFilters: null,
  },
  fragments: {
    node: () => Relay.QL`
      fragment on Ssm {
        ssm_id
        cosmic_id
        chromosome
        start_position
        reference_allele
        genomic_dna_change
        tumor_allele
        mutation_subtype
        ncbi_build
        consequence {
          hits(first: 99) {
            edges {
              node {
                transcript {
                  aa_change
                  consequence_type
                  transcript_id
                  is_canonical
                  annotation {
                    impact
                    hgvsc
                    dbsnp_rs
                  }
                  gene {
                    external_db_ids {
                      entrez_gene
                      uniprotkb_swissprot
                      hgnc
                      omim_gene
                    }
                    symbol
                    gene_strand
                    gene_id
                  }
                }
              }
            }
          }
        }
        # ${SsmSummary.getFragment('node')}
        # ${SsmExternalReferences.getFragment('node')}
      }
    `,
    viewer: () => Relay.QL`
      fragment on Root {
        projects {
          ${CancerDistributionTable.getFragment('projects')}
        }
        cancerDistributionTableCohortFragment: cohort {
          ${CancerDistributionTable.getFragment('cohort')}
        }
        ${Lolliplot.getFragment('viewer')}
        cohort {
          lolliplotFragment: ssms {
            ${Lolliplot.getFragment('ssms')}
          }
          cases {
            ${CancerDistributionChart.getFragment('cases')}
            ${CancerDistributionTable.getFragment('cases')}
            aggregations {
              project__project_id {
                buckets {
                  doc_count
                  key
                }
              }
            }
          }
        }
      }
    `,
  },
};

const SSMPage = Relay.createContainer(
  SSMPageComponent,
  SSMPageQuery
);

export default SSMPage;
