/* @flow */

import React from 'react';
import { createRefetchContainer, graphql } from 'react-relay/compat';

import SearchPage from '@ncigdc/components/SearchPage';
import ProjectsCharts from '@ncigdc/components/ProjectsCharts';
import TabbedLinks from '@ncigdc/components/TabbedLinks';
import GitHut from '@ncigdc/components/GitHut';

import ProjectTable from './ProjectTable';
import ProjectAggregations from './ProjectAggregations';

export type TProps = {
  relay: Object,
  viewer: {
    autocomplete: {
      hits: Array<Object>,
    },
    projects: {
      aggregations: string,
      hits: string,
    },
  },
  showFacets: boolean,
  setShowFacets: Function,
};

export const ProjectsPageComponent = (props: TProps) => {
  console.log(props);
  return (
    <SearchPage
      filtersLinkProps={{
        linkPathname: '/repository',
        linkText: 'Open Query in Data Page',
        linkFieldMap: (field: string) => {
          if (field.indexOf('projects.summary') > -1) {
            return `files.${field.split('.').pop()}`;
          }

          if (field.indexOf('projects.primary_site') > -1 || field.indexOf('projects.disease_type') > -1) {
            return field.replace('projects', 'cases');
          }

          return field.replace(/^projects/, 'cases.project');
        },
      }}
      facetTabs={[
        {
          id: 'projects',
          text: 'Projects',
          component: (
            <ProjectAggregations
              aggregations={props.viewer.projects.aggregations}
              suggestions={(props.viewer.autocomplete || { hits: [] }).hits}
              setAutocomplete={(value, onReadyStateChange) => props.relay.refetch(fragmentVariables => ({ idAutocomplete: value, runAutocomplete: !!value }), onReadyStateChange)}
            />
        ),
        },
      ]}
      results={
        <span>
          <ProjectsCharts hits={props.viewer.projects.hits} explore={props.viewer.explore} />
          <TabbedLinks
            queryParam="projectsTableTab"
            defaultIndex={0}
            links={[
              {
                id: 'table',
                text: 'Table',
                component: <ProjectTable params={props.params} projects={props.viewer.projects.hits} />,
              },
              {
                id: 'graph',
                text: 'Graph',
                component: <GitHut params={props.params} />,
              },
            ]}
          />
        </span>
    }
    />
  );
};

const ProjectsPage = createRefetchContainer(
  ProjectsPageComponent,
  graphql.experimental`
    fragment ProjectsPage_viewer on Root
     @argumentDefinitions(
      size: {type: "Int", defaultValue: 1000}
      offset: {type: "Int"}
      filters: {type: "FiltersArgument"}
      idAutocomplete: {type: "String"}
      runAutocomplete: {type: "Boolean", defaultValue: false}
      projects_sort: {type: "[Sort]"}
     ) {
      explore {
        ...ProjectsCharts_explore
      }
      autocomplete: query(query: $idAutocomplete types: ["project"]) @include(if: $runAutocomplete) {
        hits {
          id
          ...on Project {
            project_id
            name
            primary_site
          }
        }
      }
      projects {
        aggregations(filters: $filters) {
          ...ProjectAggregations_aggregations
        }
        hits(first: $size offset: $offset, sort: $projects_sort, filters: $filters) {
          ...ProjectTable_projects
          ...ProjectsCharts_hits
        }
      }
    }
  `,
  graphql.experimental`
    query ProjectsPageRefetchQuery(
      $size: Int
      $offset: Int
      $filters: FiltersArgument
      $idAutocomplete: String
      $runAutocomplete: Boolean
      $projects_sort: [Sort]
    ) {
      viewer {
        ...ProjectsPage_viewer @arguments(
          size: $size
          offset: $offset
          filters: $filters
          idAutocomplete: $idAutocomplete
          runAutocomplete: $runAutocomplete
          projects_sort: $projects_sort
        )
      }
    }
  `
);

export default ProjectsPage;
