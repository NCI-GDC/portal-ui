// @flow

import React from 'react';
import Relay from 'react-relay';
import { compose } from 'recompose';

import withSize from '@ncigdc/utils/withSize';
import withRouter from '@ncigdc/utils/withRouter';
import { makeFilter } from '@ncigdc/utils/filters';
import { buildCancerDistributionData } from '@ncigdc/utils/data';
import { Row, Column } from '@ncigdc/uikit/Flex';
import DownloadVisualizationButton from '@ncigdc/components/DownloadVisualizationButton';
import { withTheme } from '@ncigdc/theme';
import BarChart from '@ncigdc/components/Charts/BarChart';

type TProps = {
  aggregations: Object;
  node: Object,
  size: {
    width: number;
  },
  theme: Object,
};

const CancerDistributionChartComponent = compose(
  withSize(),
  withRouter,
  withTheme
)(({
  cases,
  node: gene,
  size: {
    width,
  },
  theme,
  push,
}: TProps = {}) => {
  const casesByProjectMap = cases.aggregations.project__project_id.buckets.reduce((acc, bucket) =>
    ({ ...acc, [bucket.key]: bucket.doc_count }), {}
  );

  const cancerDistData = gene.case.hits.edges.map(x => x.node)
    .reduce(buildCancerDistributionData(casesByProjectMap), {});

  const sortedCancerDistData = Object.keys(cancerDistData)
    .map(k => ({ project_id: k, ...cancerDistData[k] }))
    .sort((a, b) => b.freq - a.freq);

  const chartData = sortedCancerDistData.map(d => ({
    label: d.project_id,
    value: (d.freq * 100),
    onClick: () => push(`/projects/${d.project_id}`),
    tooltip: (
      <span>
        {d.cases.length.toLocaleString()} Case{d.cases.length > 1 ? 's' : ''} Affected in <b>{d.project_id}</b><br />
        {d.cases.length.toLocaleString()} / {casesByProjectMap[d.project_id].toLocaleString()}&nbsp;({(d.freq * 100).toFixed(2)}%)
      </span>
    ),
  }));

  const chartMargin = { top: 30, right: 50, bottom: 105, left: 40 };

  const maxBars = 20;
  const bandWidth = ((width - chartMargin.right - chartMargin.left) / (maxBars + 1) / 2) * 0.7;

  return (
    <span>
      {chartData.length >= 5 &&
        <Column>
          <h5 style={{ textTransform: 'uppercase', padding: '0 2rem' }}>
            {`${sortedCancerDistData.reduce((acc, d) => [...acc, ...d.cases], []).length} cases affected by
            ${sortedCancerDistData.reduce((acc, d) => [...acc, ...d.ssms], []).length} mutations across
            ${sortedCancerDistData.length} projects`}
          </h5>
          <Row style={{ padding: '0 2rem' }}>
            <span>
              <div style={{ textAlign: 'right' }}>
                <DownloadVisualizationButton
                  svg="#cancer-distribution svg"
                  data={chartData.map(d => ({ label: d.label, value: d.value }))}
                  slug="bar-chart"
                  noText
                  tooltipHTML="Download image or data"
                />
              </div>
              <BarChart
                margin={chartMargin}
                bandwidth={bandWidth}
                data={chartData}
                yAxis={{ title: '% of Cases Affected' }}
                height={300}
                styles={{
                  xAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                  yAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                  bars: { fill: theme.secondary },
                  tooltips: {
                    fill: '#fff',
                    stroke: theme.greyScale4,
                    textFill: theme.greyScale3,
                  },
                }}
              />
            </span>
          </Row>
        </Column>
      }
    </span>
  );
});

const CancerDistributionChartQuery = {
  initialVariables: {
    ssmTested: makeFilter([{
      field: 'available_variation_data',
      value: 'ssm',
    }], false),
  },
  fragments: {
    node: () => Relay.QL`
      fragment on Gene {
        case {
          hits(first: 99) {
            edges {
              node {
                submitter_id
                case_id
                primary_site
                disease_type
                project {
                  project_id
                }
                ssm {
                  hits(first: 99) {
                    edges {
                      node {
                        ssm_id
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
    cases: () => Relay.QL`
      fragment on CohortCases {
        aggregations(filters: $ssmTested) {
          project__project_id {
            buckets {
              doc_count
              key
            }
          }
        }
      }
    `,
  },
};

const CancerDistributionChart = Relay.createContainer(
  CancerDistributionChartComponent,
  CancerDistributionChartQuery
);

export default CancerDistributionChart;
