// @flow

import React from 'react';
import Relay from 'react-relay';
import { compose, withPropsOnChange } from 'recompose';
import externalReferenceLinks from '@ncigdc/utils/externalReferenceLinks';
import EntityPageVerticalTable from '@ncigdc/components/EntityPageVerticalTable';
import BookIcon from '@ncigdc/theme/icons/Book';
import { ExternalLink } from '@ncigdc/uikit/Links';

const styles = {
  summary: {
    marginBottom: '2rem',
    minWidth: '450px',
  },
  column: {
    width: '100%',
    minWidth: 450,
  },
};

type TProps = {
  node: Object,
  dbSNP: string,
};

const SsmExternalReferencesComponent = compose(
  withPropsOnChange(['node'], ({ node }) => ({
    dbSNP: node.consequence.hits.edges.reduce((acc, c) => (
      c.node.transcript.annotation.dbsnp_rs ? c.node.transcript.annotation.dbsnp_rs : acc
    ), ''),
  }))
)(({ node, dbSNP }: TProps = {}) => (
  <EntityPageVerticalTable
    title={<span><BookIcon style={{ marginRight: '1rem' }} /> External References</span>}
    thToTd={[
      {
        th: (<span style={{ textTransform: 'none' }}>dbSNP</span>),
        td: (dbSNP && /rs(\d+)$/g.test(dbSNP)) ? dbSNP : '--',
      },
      { th: 'COSMIC',
        td: ((node.cosmic_id || []).length ? <ul style={{ listStyle: 'none', paddingLeft: 0, marginBottom: 0 }}>
          {(node.cosmic_id || []).map(
          (c) => (
            <li key={c}>
              <ExternalLink
                href={externalReferenceLinks[c.substring(0, 4).toLowerCase()](c.match(/(\d+)$/g))}
              >
                {c}
              </ExternalLink>
            </li>
          ))
        }
        </ul> : '--') },
    ]}
    style={{ ...styles.summary, ...styles.column, alignSelf: 'flex-start' }}
  />
));

export const SsmExternalReferencesQuery = {
  fragments: {
    node: () => Relay.QL`
      fragment on Ssm {
        cosmic_id
        consequence {
          hits(first: 99) {
            edges {
              node {
                transcript {
                  annotation {
                    dbsnp_rs
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const SsmExternalReferences = Relay.createContainer(
  SsmExternalReferencesComponent,
  SsmExternalReferencesQuery
);

export default SsmExternalReferences;
