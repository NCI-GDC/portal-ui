// @flow

import React from 'react';
import Relay from 'react-relay';
import withSize from '@ncigdc/utils/withSize';
import { isEqual } from 'lodash';
import { compose, withPropsOnChange } from 'recompose';
import withRouter from '@ncigdc/utils/withRouter';
import { parseFilterParam } from '@ncigdc/utils/uri';
import { makeFilter } from '@ncigdc/utils/filters';
import { withTheme } from '@ncigdc/theme';
import { graphTitle } from '@ncigdc/theme/mixins';
import { Row } from '@ncigdc/uikit/Flex';
import Loader from '@ncigdc/uikit/Loaders/Loader';
import DownloadVisualizationButton from '@ncigdc/components/DownloadVisualizationButton';
import BarChart from '@ncigdc/components/Charts/BarChart';
import wrapSvg from '@ncigdc/utils/wrapSvg';

const TITLE = 'Distribution of Most Frequent Mutations';

const FrequentMutationsChartComponent = compose(
  withRouter,
  withPropsOnChange(
    (props, nextProps) => ['query', 'projectId', 'defaultFilters']
      .some((propName) => !isEqual(props[propName], nextProps[propName])),
    ({ relay, query, defaultFilters }) => {
      relay.setVariables({
        fetchData: true,
        fmChart_filters: parseFilterParam(
          query.fmChart_filters,
          defaultFilters || null
        ),
      });
    }
  ),
  withTheme,
  withSize()
)(({
  theme,
  showSurvivalPlot,
  size: {
    width,
  },
  cohort: { ssms, filteredCases },
  push,
  context,
}) => {
  const chartMargin = { top: 30, right: 50, bottom: 105, left: 40 };

  const maxBars = 20;
  const bandWidth = (
    (width - chartMargin.right - chartMargin.left) /
    (maxBars + 1) / (showSurvivalPlot ? 1 : 2)
  ) * 0.7;

  return (
    <Loader
      loading={!ssms}
      height="400px"
    >
      {ssms && !!ssms.hits.edges.length && (
        <Row>
          <span>
            <div style={{ textAlign: 'right', marginRight: 50, marginLeft: 30 }}>
              <DownloadVisualizationButton
                svg={() => wrapSvg({ selector: '#mutation-chart svg', title: TITLE })}
                data={ssms.hits.edges.map(x => x.node)}
                slug="bar-chart"
                noText
                tooltipHTML="Download image or data"
              />
            </div>
            <div style={graphTitle()}>{TITLE}</div>
            <Row id="mutation-chart" style={{ padding: '10px' }}>
              <BarChart
                bandwidth={bandWidth}
                data={ssms.hits.edges
                  .sort((a, b) => b.node.score - a.node.score)
                  .map(({ node }) => ({
                  label: `${node.ssm_id.substr(0, 8)}...`,
                  value: node.score,
                  tooltip: (
                    <span>
                      <b>{node.ssm_id}</b><br />
                      <div>{node.score.toLocaleString()} Case{node.score > 1 ?
                        's' : ''}
                      &nbsp;affected in {context}</div>
                      {!!filteredCases.hits.total &&
                        <div>
                          <span>{node.score.toLocaleString()}</span>
                          <span> / </span>
                          <span>{filteredCases.hits.total.toLocaleString()}</span>
                          <span>&nbsp;({
                            ((node.score / filteredCases.hits.total) * 100).toFixed(2)
                          }%)</span>
                        </div>
                      }
                    </span>
                  ),
                  onClick: () => push(`/ssms/${node.ssm_id}`),
                }))}
                margin={chartMargin}
                height={300}
                yAxis={{ title: '# Affected Cases' }}
                styles={{
                  xAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                  yAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                  bars: { fill: theme.secondary },
                  tooltips: {
                    fill: '#fff',
                    stroke: theme.greyScale4,
                    textFill: theme.greyScale3,
                  },
                }}
              />
            </Row>
          </span>
        </Row>
      )}
    </Loader>
  );
});

export const FrequentMutationsChartQuery = {
  initialVariables: {
    fetchData: false,
    fmChart_filters: null,
    score: 'occurrence.case.project.project_id',
    ssmTested: makeFilter([{
      field: 'available_variation_data',
      value: 'ssm',
    }], false),
  },
  fragments: {
    cohort: () => Relay.QL`
      fragment on Cohort {
        d: cases { hits(first: 0) { total }}
        filteredCases: cases @include(if: $fetchData) {
          hits(first: 0 filters: $fmChart_filters) {
            total
          }
        }
        ssms @include(if: $fetchData) {
          hits (first: 20 filters: $fmChart_filters, score: $score) {
            total
            edges {
              node {
                score
                genomic_dna_change
                ssm_id
                occurrence {
                  hits(first: 0) {
                    total
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const FrequentMutationsChart = Relay.createContainer(
  FrequentMutationsChartComponent,
  FrequentMutationsChartQuery
);

export default FrequentMutationsChart;
