/* @flow */
/* eslint jsx-a11y/no-static-element-interactions: 0, max-len: 1 */

import React from 'react';
import Relay from 'react-relay';

import _ from 'lodash';
import { compose, defaultProps } from 'recompose';

import Modal from '@ncigdc/uikit/Modal';
import TermAggregation from '@ncigdc/components/Aggregations/TermAggregation';
import SuggestionFacet from '@ncigdc/components/Aggregations/SuggestionFacet';
import RangeFacet from '@ncigdc/components/Aggregations/RangeFacet';
import PrefixFacet from '@ncigdc/components/Aggregations/PrefixFacet';
import { Row, Column } from '@ncigdc/uikit/Flex';
import FacetSelection from '@ncigdc/components/FacetSelection';
import FacetWrapper from '@ncigdc/components/FacetWrapper';

import type { TBucket } from '@ncigdc/components/Aggregations/types';

import { withTheme } from '@ncigdc/theme';
import styled from '@ncigdc/theme/styled';
import CaseLink from '@ncigdc/components/Links/CaseLink';
import CaseIcon from '@ncigdc/theme/icons/Case';
import { initialCaseAggregationsVariables, repositoryCaseAggregationsFragment } from '@ncigdc/utils/generated-relay-query-parts';
import withFacetSelection from '@ncigdc/utils/withFacetSelection';
import escapeForRelay from '@ncigdc/utils/escapeForRelay';
import tryParseJSON from '@ncigdc/utils/tryParseJSON';

export type TProps = {
  aggregations: {
    demographic__ethnicity: { buckets: [TBucket] },
    demographic__gender: { buckets: [TBucket] },
    demographic__race: { buckets: [TBucket] },
    diagnoses__vital_status: { buckets: [TBucket] },
    diagnoses__days_to_death: { max: number, min: number },
    diagnoses__age_at_diagnosis: { max: number, min: number },
    project__disease_type: { buckets: [TBucket] },
    project__primary_site: { buckets: [TBucket] },
    project__program__name: { buckets: [TBucket] },
    project__project_id: { buckets: [TBucket] },
  },
  hits: {
    edges: Array<{|
      node: {|
       id: string,
     |},
   |}>,
  },
  setAutocomplete: Function,
  theme: Object,
  suggestions: Array<Object>,

  userSelectedFacets: Array<{|
    description: String,
    doc_type: String,
    field: String,
    full: String,
    type: "id" | "string" | "long",
    |}>,
  handleSelectFacet: Function,
  handleResetFacets: Function,
  presetFacetFields: Array<String>,
  shouldShowFacetSelection: Boolean,
  facetExclusionTest: Function,
};

const storageKey = 'RepositoryCaseAggregations.userSelectedFacets';

const presetFacets = [
  { title: 'Case', field: 'case_id', full: 'cases.case_id', doc_type: 'cases', type: 'id' },
  { title: 'Case Submitter ID', field: 'submitter_id', full: 'cases.submitter_id', doc_type: 'cases', type: 'id' },
  { title: 'Primary Site', field: 'project.primary_site', full: 'project.cases.primary_site', doc_type: 'cases', type: 'keyword' },
  { title: 'Cancer Program', field: 'project.program.name', full: 'project.program.cases.name', doc_type: 'cases', type: 'keyword' },
  { title: 'Project', field: 'project.project_id', full: 'project.cases.project_id', doc_type: 'cases', type: 'keyword' },
  { title: 'Days to Death', field: 'diagnoses.days_to_death', full: 'diagnoses.cases.days_to_death', doc_type: 'cases', type: 'long' },
  { title: 'Disease Type', field: 'project.disease_type', full: 'project.cases.disease_type', doc_type: 'cases', type: 'keyword' },
  { title: 'Age at Diagnosis', field: 'diagnoses.age_at_diagnosis', full: 'diagnoses.cases.age_at_diagnosis', doc_type: 'cases', type: 'long', additionalProps: { convertDays: true } },
  { title: 'Gender', field: 'demographic.gender', full: 'demographic.cases.gender', doc_type: 'cases', type: 'keyword' },
  { title: 'Vital Status', field: 'diagnoses.vital_status', full: 'diagnoses.cases.vital_status', doc_type: 'cases', type: 'keyword' },
  { title: 'Race', field: 'demographic.race', full: 'demographic.cases.race', doc_type: 'cases', type: 'keyword' },
  { title: 'Ethnicity', field: 'demographic.ethnicity', full: 'demographic.cases.ethnicity', doc_type: 'cases', type: 'keyword' },
];

const presetFacetFields = presetFacets.map(x => x.field);

const enhance = compose(
  withFacetSelection({
    storageKey,
    presetFacetFields,
    validFacetDocTypes: ['cases'],
  })
);

const styles = {
  link: {
    textDecoration: 'underline',
    color: '#2a72a5',
  },
};

export const CaseAggregationsComponent = (props: TProps) => (
  <div>
    <div className="text-right" style={{ padding: '10px 15px', borderBottom: `1px solid ${props.theme.greyScale5}` }}>
      {
        !!props.userSelectedFacets.length && (
          <span>
            <a onClick={props.handleResetFacets} style={styles.link}>
              Reset
            </a> &nbsp;|&nbsp;
          </span>)
      }
      <a onClick={() => props.setShouldShowFacetSelection(true)} style={styles.link}>
        Add a Case/Biospecimen Filter
      </a>
    </div>
    <Modal
      isOpen={props.shouldShowFacetSelection}
      style={{ content: { border: 0 } }}
    >
      <FacetSelection
        title="Add a Case/Biospecimen Filter"
        onSelect={props.handleSelectFacet}
        onRequestClose={() => props.setShouldShowFacetSelection(false)}
        excludeFacetsBy={props.facetExclusionTest}
      />
    </Modal>

    {
      props.userSelectedFacets.map((facet) => (
        <FacetWrapper
          isRemovable
          key={facet.full}
          facet={facet}
          aggregation={props.aggregations[escapeForRelay(facet.field)]}
          relay={props.relay}
          onRequestRemove={() => props.handleRequestRemoveFacet(facet)}
          style={{ borderBottom: `1px solid ${props.theme.greyScale5}` }}
        />
      ))
    }

    <SuggestionFacet
      title="Case"
      doctype="cases"
      fieldNoDoctype="case_id"
      placeholder="Search for Case ID"
      hits={props.suggestions}
      setAutocomplete={() => {}}
      dropdownItem={(x) => (
        <span style={{ display: 'flex' }}>
          <Column>
            <CaseIcon style={{ paddingRight: '1rem', paddingTop: '1rem' }} />
          </Column>
          <Column>
            <span style={{ fontWeight: 'bold' }}>
              {x.node.case_id}
            </span>
            {x.node.project.project_id}
          </Column>
        </span>
      )}
    />

    {
      _.reject(presetFacets, { full: 'cases.case_id' }).map((facet) => (
        <FacetWrapper
          key={facet.full}
          facet={facet}
          title={facet.title}
          aggregation={props.aggregations[escapeForRelay(facet.field)]}
          relay={props.relay}
          style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
          additionalProps={facet.additionalProps}
        />
      ))
    }
  </div>
);

export const CaseAggregationsQuery = {
  initialVariables: _.mapValues(initialCaseAggregationsVariables, (value, key) => {
    const userSelectedFacetsFromStorage = tryParseJSON(window.localStorage.getItem(storageKey)) || [];
    const escapedFieldsToShow = presetFacetFields.concat(userSelectedFacetsFromStorage.map(x => x.field)).filter(Boolean).map(escapeForRelay);
    return value || _.includes(escapedFieldsToShow, key.replace(/^shouldShow_/, ''));
  }),
  fragments: {
    aggregations: repositoryCaseAggregationsFragment,
  },
};

const CaseAggregations = Relay.createContainer(
  enhance(withTheme(CaseAggregationsComponent)),
  CaseAggregationsQuery
);

export default CaseAggregations;
