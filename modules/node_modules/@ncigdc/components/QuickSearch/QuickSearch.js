// @flow

import React from 'react';
import _ from 'lodash';
import { compose, withState, withProps, withHandlers, getContext } from 'recompose';
import styled from '@ncigdc/theme/styled';
import { SEARCH_FIELDS } from '@ncigdc/utils/constants';
import QuickSearchResults from './QuickSearchResults';
import type { TSearchHit } from './types';

const styles = {
  iconPadding: {
    paddingRight: '4px',
  },
  container: {
    position: 'relative',
  },
};

const SearchInput = styled.input({
  fontSize: '14px',
  height: '2rem',
  paddingLeft: '1rem',
  border: ({ theme }) => `1px solid ${theme.greyScale5}`,
  width: '10rem',
  borderRadius: '4px',
});

const TYPE_PATHS_MAP = {
  annotation: '/annotations',
  case: '/cases',
  file: '/files',
  'gene-centric': '/genes',
  occurrence: '/occurrence',
  project: '/projects',
  report: '/report',
  'ssm-centric': '/ssms',
};

const getPreviousItem = (items, reference) => (reference ? _.nth(items, items.indexOf(reference) - 1) : _.last(items));
const getNextItem = (items, reference) => (reference ? _.nth(items, items.indexOf(reference) + 1) : _.first(items));


let timeOfMostRecentRequest;

export default
  compose(
    withState('state', 'setState', {
      results: [],
      selectedResult: null,
      query: '',
      isLoading: false,
      isInSearchMode: false,
    }),
    getContext({
      router: React.PropTypes.object,
    }),
    withHandlers({
      handleQueryChange: ({ api = API, setState }) => _.debounce(async (query) => {
        setState(s => ({ ...s, query, isLoading: true }));
        const timeOfCurrentRequest = new Date().getTime();
        timeOfMostRecentRequest = timeOfCurrentRequest;
        const url = `${api}all?fields=${SEARCH_FIELDS.join(',')}&query=${window.encodeURIComponent(query)}&size=10`;
        const res = await fetch(url);
        const { data } = await res.json();
        // prevent results that come back out-of-order from being displayed
        if (timeOfMostRecentRequest === timeOfCurrentRequest) {
          setState(s => ({ ...s, results: data.hits, isLoading: false }));
        }
      }, 350),
      handleReset: ({ setState }) => () => {
        setState(s => ({ ...s, isInSearchMode: false, query: '' }));
      },
    }),
    withHandlers({
      handleSelectResult: ({ setState }) => (selectedResult: TSearchHit) => setState(s => ({ ...s, selectedResult })),
      handleActivateResult: ({ router, handleReset }) => (result: TSearchHit) => {
        handleReset();
        router.transitionTo(`${TYPE_PATHS_MAP[result._type]}/${result._id}`);
      },
    }),
    withHandlers({
      handleKeyDown: ({ state, handleSelectResult, handleActivateResult, handleReset }) => (event) => ({
        ArrowUp: () => {
          event.preventDefault();
          if (_.isEmpty(state.results)) return;
          handleSelectResult(getPreviousItem(state.results, state.selectedResult));
        },
        ArrowDown: () => {
          event.preventDefault();
          if (_.isEmpty(state.results)) return;
          handleSelectResult(getNextItem(state.results, state.selectedResult));
        },
        Enter: () => handleActivateResult(state.selectedResult),
        Escape: () => handleReset(),
      }[event.key] || _.noop)(),
    })
  )(({ state, handleQueryChange, handleKeyDown, handleSelectResult, handleActivateResult, handleReset, setState, tabIndex, style }) => {
    return (
      <a
        tabIndex={tabIndex}
        onClick={() => !state.isInSearchMode && setState({ isInSearchMode: true })}
        style={{
          ...style,
          ...styles.container,
        }}
      >
        <i className="fa fa-search stock-icon" style={styles.iconPadding} />
        { !state.isInSearchMode && <span className="hidden-md hidden-sm" data-translate>Quick Search</span> }

        {
          state.isInSearchMode && <SearchInput
            autoFocus
            onBlur={() => setTimeout(handleReset, 100)}
            placeholder="Quick Search"
            type="text"
            onChange={event => handleQueryChange(event.target.value)}
            onKeyDown={handleKeyDown}
          />
        }
        {
          state.isInSearchMode && state.query && (
            <QuickSearchResults
              results={_.map(state.results, (item => (item === state.selectedResult ? { ...item, isSelected: true } : item)))}
              query={state.query}
              onSelectItem={handleSelectResult}
              onActivateItem={handleActivateResult}
              isLoading={state.isLoading}
            />
          )
        }
      </a>
    );
  });
