/* @flow */

import React from 'react';
import Relay from 'react-relay';

import { Row } from '@ncigdc/uikit/Flex';
import Button from '@ncigdc/uikit/Button';

import SearchPage from '@ncigdc/components/SearchPage';
import TabbedLinks from '@ncigdc/components/TabbedLinks';
import AnnotationsLink from '@ncigdc/components/Links/AnnotationsLink';
import SmartSearchLink from '@ncigdc/components/Links/SmartSearchLink';

import CaseTable from './CaseTable';
import CaseAggregations from './CaseAggregations';
import FileTable from './FileTable';
import FileAggregations from './FileAggregations';

export type TProps = {
  relay: Object,
  viewer: {
    autocomplete_case: {
      hits: Array<Object>,
    },
    autocomplete_file: {
      hits: Array<Object>,
    },
    repository: {
      cases: {
        aggregations: string,
        hits: string,
      },
      files: {
        aggregations: string,
        hits: string,
      },
    },
  },
};

export const RepositoryPageComponent = (props: TProps) => {
  const setAutocompleteCases = value => props.relay.setVariables(
    {
      idAutocompleteCase: value,
      runAutocompleteCase: !!value,
    }
  );
  const setAutocompleteFiles = value => props.relay.setVariables(
    {
      idAutocompleteFile: value,
      runAutocompleteFile: !!value,
    }
  );

  return (
    <div>
      <SearchPage
        facets={
          <TabbedLinks
            queryParam="facetTab"
            defaultIndex={0}
            links={[
              {
                id: 'cases',
                text: 'Cases',
                component: (
                  <CaseAggregations
                    aggregations={props.viewer.repository.cases.aggregations}
                    hits={(props.viewer.repository.cases || {}).hits || {}}
                    suggestions={(props.viewer.autocomplete_case || { hits: [] }).hits}
                    setAutocomplete={setAutocompleteCases}
                  />
                ),
              },
              {
                id: 'files',
                text: 'Files',
                component: (
                  <FileAggregations
                    aggregations={props.viewer.repository.files.aggregations}
                    suggestions={(props.viewer.autocomplete_file || { hits: [] }).hits}
                    setAutocomplete={setAutocompleteFiles}
                  />
                ),
              },
            ]}
          />
        }
        results={
          <TabbedLinks
            queryParam="searchTableTab"
            defaultIndex={0}
            tabToolbar={
              <Row spacing="2rem" style={{ alignItems: 'center' }}>
                <SmartSearchLink>
                  <Button leftIcon={<i className="fa fa-gears" />}>
                    Advanced Search
                  </Button>
                </SmartSearchLink>
                <AnnotationsLink>
                  <Button leftIcon={<i className="fa fa-edit" />}>
                    Browse Annotations
                  </Button>
                </AnnotationsLink>
              </Row>
            }
            links={[
              {
                id: 'cases',
                text: `Cases (${props.viewer.repository.cases.hits.total.toLocaleString()})`,
                component: <CaseTable hits={props.viewer.repository.cases.hits} />,
              },
              {
                id: 'files',
                text: `Files (${props.viewer.repository.files.hits.total.toLocaleString()})`,
                component: <FileTable hits={props.viewer.repository.files.hits} />,
              },
            ]}
          />
        }
      />
    </div>
  );
};

export const RepositoryPageQuery = {
  initialVariables: {
    cases_offset: null,
    cases_size: null,
    cases_sort: null,
    files_offset: null,
    files_size: null,
    files_sort: null,
    filters: null,
    idAutocompleteCase: null,
    idAutocompleteFile: null,
    runAutocompleteCase: false,
    runAutocompleteFile: false,
  },
  fragments: {
    viewer: () => Relay.QL`
      fragment on Root {
        autocomplete_case: query (query: $idAutocompleteCase types: ["case"]) @include(if: $runAutocompleteCase) {
          hits {
            id
            ...on Case {
              case_id
              project {
                project_id
              }
              submitter_id
            }
          }
        }
        autocomplete_file: query (query: $idAutocompleteFile types: ["file"]) @include(if: $runAutocompleteFile) {
          hits {
            id
            ... on File {
              file_id
              file_name
              submitter_id
            }
          }
        }
        repository {
          cases {
            aggregations(filters: $filters) {
              ${CaseAggregations.getFragment('aggregations')}
            }
            hits(first: $cases_size offset: $cases_offset, filters: $filters, sort: $cases_sort) {
              ${CaseTable.getFragment('hits')}
              total
            }
          }
          files {
            aggregations(filters: $filters) {
              ${FileAggregations.getFragment('aggregations')}
            }
            hits(first: $files_size offset: $files_offset, filters: $filters, sort: $files_sort) {
              ${FileTable.getFragment('hits')}
              total
            }
          }
        }
      }
    `,
  },
};

const RepositoryPage = Relay.createContainer(
  RepositoryPageComponent,
  RepositoryPageQuery
);

export default RepositoryPage;
