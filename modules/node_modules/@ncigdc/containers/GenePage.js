/* @flow */

import React from 'react';
import Relay from 'react-relay';

import ChartIcon from '@ncigdc/theme/icons/BarChart';
import { Row, Column } from '@ncigdc/uikit/Flex';
import { makeFilter } from '@ncigdc/utils/filters';
import GeneSummary from '@ncigdc/containers/GeneSummary';
import GeneExternalReferences from '@ncigdc/containers/GeneExternalReferences';
import CancerDistributionChart from '@ncigdc/containers/CancerDistributionChart';
import CancerDistributionTable from '@ncigdc/containers/CancerDistributionTable';
import Lolliplot from '@ncigdc/containers/Lolliplot';
import FrequentMutationsChart from '@ncigdc/containers/FrequentMutationsChart';
import FrequentMutationsTable from '@ncigdc/containers/FrequentMutationsTable';
import FullWidthLayout from '@ncigdc/components/Layouts/FullWidthLayout';

const styles = {
  heading: {
    flexGrow: 1,
    fontSize: '2.2rem',
    marginBottom: 7,
    marginTop: 7,
    display: 'flex',
    alignItems: 'center',
  },
  card: {
    backgroundColor: 'white',
  },
};

export type TProps = {|
  node: {
    gene_id: string,
    symbol: string,
    transcripts: {
      hits: {
        edges: Array<Object>,
      },
    },
  },
  viewer: {
    cohort: {
      cases: {
        aggregations: Object,
      },
      lolliplotFragment: Object,
    },
    frequentMutationsChartFragment: Object,
    frequentMutationsTableFragment: Object,
  },
|};

export const GenePageComponent = (props: TProps) => {
  const fmFilters = makeFilter([
    {
      field: 'consequence.transcript.gene.gene_id',
      value: [props.node.gene_id],
    },
    {
      field: 'consequence.transcript.transcript_id',
      value: [(props.node.transcripts.hits.edges.find(x => x.node.is_canonical) || {}).node.transcript_id],
    },
  ], false);

  return (
    <FullWidthLayout
      title={props.node.symbol}
      entityType="GN"
    >
      <Column spacing="2rem">
        <Row spacing="2rem">
          <Row flex="1"><GeneSummary node={props.node} /></Row>
          <Row flex="1"><GeneExternalReferences node={props.node} /></Row>
        </Row>
        <Column style={styles.card} id="cancer-distribution">
          <Row>
            <h1 style={{ ...styles.heading, padding: '1rem' }}>
              <ChartIcon style={{ marginRight: '1rem' }} />
              Cancer Distribution
            </h1>
          </Row>
          <Column>
            <CancerDistributionChart node={props.node} aggregations={props.viewer.cohort.cases.aggregations} />
            <CancerDistributionTable node={props.node} aggregations={props.viewer.cohort.cases.aggregations} />
          </Column>
        </Column>

        <Column style={{ ...styles.card, marginTop: '2rem' }}>
          <Lolliplot
            ssms={props.viewer.cohort.lolliplotFragment}
            node={props.node}
          />
        </Column>

        <Column style={{ ...styles.card, marginTop: '2rem' }}>
          <h1 style={{ ...styles.heading, padding: '1rem' }} id="frequent-mutations">
            <ChartIcon style={{ marginRight: '1rem' }} />
            Most Frequent Mutations
          </h1>

          <Column>
            <FrequentMutationsChart
              defaultFilters={fmFilters}
              cohort={props.viewer.frequentMutationsChartFragment}
            />
            <FrequentMutationsTable
              defaultFilters={fmFilters}
              cohort={props.viewer.frequentMutationsTableFragment}
              shouldShowGeneSymbol={false}
            />
          </Column>
        </Column>
      </Column>
    </FullWidthLayout>
  );
};

export const GenePageQuery = {
  fragments: {
    node: () => Relay.QL`
      fragment on Gene {
        gene_id
        symbol
        transcripts {
          hits(first: 99) {
            edges {
              node {
                is_canonical
                transcript_id
              }
            }
          }
        }
        ${Lolliplot.getFragment('node')}
        ${GeneSummary.getFragment('node')}
        ${GeneExternalReferences.getFragment('node')}
        ${CancerDistributionChart.getFragment('node')}
        ${CancerDistributionTable.getFragment('node')}
      }
    `,
    viewer: () => Relay.QL`
      fragment on Root {
        frequentMutationsTableFragment: cohort {
          ${FrequentMutationsTable.getFragment('cohort')}
        }
        frequentMutationsChartFragment: cohort {
          ${FrequentMutationsChart.getFragment('cohort')}
        }
        cohort {
          lolliplotFragment: ssms {
            ${Lolliplot.getFragment('ssms')}
          }
          cases {
            aggregations {
              ${CancerDistributionChart.getFragment('aggregations')}
              ${CancerDistributionTable.getFragment('aggregations')}
            }
          }
        }
      }
    `,
  },
};

const GenePage = Relay.createContainer(
  GenePageComponent,
  GenePageQuery
);

export default GenePage;
