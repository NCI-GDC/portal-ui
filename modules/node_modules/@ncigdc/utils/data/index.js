/* @flow */
import _ from 'lodash';
import { DATA_CATEGORIES } from '@ncigdc/utils/constants';

import type {
  TCategoryMap,
  TFindDataCategory,
  TSumDataCategories,
  TCategoryAbbr,
} from './types';

export const CATEGORY_MAP: TCategoryMap = _.fromPairs(Object.values(DATA_CATEGORIES).map(c => [c.abbr, c.full]));

export const findDataCategory: TFindDataCategory = (category, categories) => (
  categories.find(
    x => x.data_category === CATEGORY_MAP[category]
  ) || { data_category: CATEGORY_MAP[category], file_count: 0, case_count: 0 }
);

export const sumDataCategories: TSumDataCategories = categories => (
  Object.keys(CATEGORY_MAP).reduce((acc, key: TCategoryAbbr) =>
    acc + findDataCategory(key, categories).file_count, 0
  )
);

type TBuildProteinLolliplotArgs = {
  transcript: {
    domains: Array<Object>,
    transcript_id: string,
  },
  data: Array<Object>,
};
export const buildProteinLolliplotData = ({
  transcript = {
    domains: [],
    transcript_id: '',
  },
  data = [],
}: TBuildProteinLolliplotArgs = {}) => ({
  mutations: data
    .filter(mutation => mutation.consequence.hits.edges.find(c =>
      c.node.transcript.transcript_id === transcript.transcript_id)
    )
    .map(mutation => {
      const consequence = mutation.consequence.hits.edges.find(c =>
        c.node.transcript.transcript_id === transcript.transcript_id
      ).node;

      return {
        id: mutation.ssm_id,
        donors: mutation.score,
        genomic_dna_change: mutation.genomic_dna_change,
        x: consequence.transcript.aa_start,
        consequence: consequence.transcript.consequence_type,
        impact: (consequence.transcript.annotation || {}).impact || 'UNKNOWN',
        aa_change: consequence.transcript.aa_change,
      };
    })
    .filter(mutation => mutation.x),

  proteins: (transcript.domains || [])
    .map(protein => ({
      id: protein.hit_name,
      start: protein.start,
      end: protein.end,
      description: protein.description,
    })),
});

export const buildCancerDistributionData = allCasesAggByProject => (acc, c) => {
  const cases = [...new Set([...(acc[c.project.project_id] || { cases: [] }).cases, c.case_id])];
  return {
    ...acc,
    [c.project.project_id]: {
      disease_type: c.disease_type,
      cancer_type: c.project.cancer_type || 'tbd',
      site: c.primary_site,
      cases,
      ssms: [...new Set([
        ...(acc[c.project.project_id] || { ssms: [] }).ssms,
        ...c.ssm.hits.edges.map(m => m.node.ssm_id),
      ])],
      freq: cases.length / allCasesAggByProject[c.project.project_id],
    },
  };
};
