// @flow

// Vendor
import React from 'react';
import { compose, pure } from 'recompose';
import SearchIcon from 'react-icons/lib/fa/search';
import LocationSubscriber from '@ncigdc/components/LocationSubscriber';

// Custom
import { parseFilterParam } from '@ncigdc/utils/uri';
import { getFilterValue } from '@ncigdc/utils/filters';
import { Row, Column } from '@ncigdc/uikit/Flex';
import withDropdown from '@ncigdc/uikit/withDropdown';
import styled from '@ncigdc/theme/styled';
import { dropdown } from '@ncigdc/theme/mixins';
import Link from '@ncigdc/components/Links/Link';
import CheckCircleOIcon from '@ncigdc/theme/icons/CheckCircleOIcon';
import type { TRawQuery } from '@ncigdc/utils/uri/types';
import Hidden from '../Hidden';
import { Container, StyledInput, CheckedRow, CheckedLink } from './';

const MagnifyingGlass = styled(SearchIcon, {
  backgroundColor: ({ theme }) => theme.greyScale5,
  color: ({ theme }) => theme.greyScale2,
  padding: '0.8rem',
  width: '3.4rem',
  height: '3.4rem',
  borderRadius: '4px 0 0 4px',
  border: ({ theme }) => `1px solid ${theme.greyScale4}`,
  borderRight: 'none',
});

const StyledDropdownRow = styled(Row, ({
  color: ({ theme }) => theme.greyScale4,
  padding: '1rem',
  textDecoration: 'none',
  fontStyle: 'italic',
}));

const StyledDropdownLink = styled(Link, ({
  color: ({ theme }) => theme.greyScale2,
  padding: '1rem',
  ':link': {
    textDecoration: 'none',
    color: ({ theme }) => theme.primary,
  },
  ':visited': {
    textDecoration: 'none',
    color: ({ theme }) => theme.primary,
  },
  ':hover': {
    backgroundColor: 'rgb(31, 72, 108)',
    color: 'white',
    textDecoration: 'none',
  },
  width: '100%',
  textDecoration: 'none',
}));

let input;
const SuggestionFacet = compose(
  withDropdown,
  pure
)(({
  dropdownItem,
  title,
  doctype,
  fieldNoDoctype,
  placeholder,
  hits,
  setAutocomplete,
  setActive,
  active,
  mouseDownHandler,
  mouseUpHandler,
  collapsed,
  style,
}) => {
  const query = v => ({
    offset: 0,
    filters: {
      op: 'and',
      content: [{
        op: 'in',
        content: {
          field: `${doctype}.${fieldNoDoctype}`,
          value: [v],
        },
      }],
    },
  });

  return (
    <LocationSubscriber>{(ctx: {| pathname: string, query: TRawQuery |}) => {
      const { filters } = ctx.query || {};
      const currentFilters = parseFilterParam(filters, { content: [] }).content;
      const currentValues = getFilterValue({
        currentFilters,
        dotField: `${doctype}.${fieldNoDoctype}`,
      }) || { content: { value: [] } };
      return (
        <Container style={style}>
          {!collapsed &&
            <Column>
              {currentValues.content.value.map(v => (
                <CheckedRow key={v}>
                  <CheckedLink
                    merge="toggle"
                    query={{
                      offset: 0,
                      filters: {
                        op: 'and',
                        content: [{
                          op: 'in',
                          content: {
                            field: `${doctype}.${fieldNoDoctype}`,
                            value: [v],
                          },
                        }],
                      },
                    }}
                  >
                    <CheckCircleOIcon style={{ paddingRight: '0.5rem' }} />
                    {v}
                  </CheckedLink>
                </CheckedRow>
              ))}
              <Row>
                <label htmlFor={fieldNoDoctype}><MagnifyingGlass /><Hidden>{title}</Hidden></label>
                <StyledInput
                  id={fieldNoDoctype}
                  name={fieldNoDoctype}
                  getNode={node => { input = node; }}
                  onChange={() => {
                    setActive(!!input.value);
                    if (!!input.value) {
                      setAutocomplete(input.value);
                    }
                  }}
                  placeholder={placeholder}
                />
                {active &&
                <Column
                  style={{
                    ...dropdown,
                    marginTop: 0,
                    top: '35px',
                    width: '300px',
                    wordBreak: 'break-word',
                  }}
                  onMouseUp={mouseUpHandler}
                  onMouseDown={mouseDownHandler}
                >
                  {(hits || []).map(x => (
                    <Row
                      key={x.id}
                      style={{ alignItems: 'center' }}
                    >
                      <StyledDropdownLink
                        merge="add"
                        query={query(x[fieldNoDoctype])}
                        id={x[fieldNoDoctype]}
                        onClick={() => {
                          setActive(false);
                          input.value = '';
                        }}
                      >
                        {dropdownItem(x)}
                      </StyledDropdownLink>
                    </Row>
                  ))}
                  {(hits || []).length === 0 &&
                    <StyledDropdownRow>
                      No matching items found
                    </StyledDropdownRow>
                  }
                </Column>
                }
              </Row>
            </Column>
          }
        </Container>
      );
    }}</LocationSubscriber>
  );
});

export default SuggestionFacet;
