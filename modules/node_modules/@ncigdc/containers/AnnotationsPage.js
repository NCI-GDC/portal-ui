/* @flow */

import React from 'react';
import Relay from 'react-relay';

import SearchPage from '@ncigdc/components/SearchPage';

import AnnotationTable from './AnnotationTable';
import AnnotationAggregations from './AnnotationAggregations';

export type TProps = {
  location: Object,
  relay: Object,
  autocomplete: {
    hits: Array<Object>,
  },
  viewer: {
    annotations: {
      aggregations: string,
      hits: string,
    },
  },
};

export const AnnotationsPageComponent = (props: TProps) => (
  <SearchPage
    Facets={<AnnotationAggregations
      aggregations={props.viewer.annotations.aggregations}
      suggestions={(props.autocomplete || { hits: [] }).hits}
      setAutocomplete={
        (value) => { props.relay.setVariables({ idAutocomplete: value, runAutocomplete: !!value }); }
      }
    />}
    Results={<AnnotationTable hits={props.viewer.annotations.hits} />}
  />
);

export const AnnotationsPageQuery = {
  initialVariables: {
    size: null,
    offset: null,
    filters: null,
    idAutocomplete: null,
    runAutocomplete: false,
  },
  fragments: {
  /*
    autocomplete: () => Relay.QL`
      fragment on Annotations {
          hits(first: 5, id_autocomplete: $idAutocomplete) {
            edges @include(if: $runAutocomplete) {
              node {
                annotation_id
              }
            }
          }
      }
    `,
    */
    viewer: () => Relay.QL`
      fragment on Root {
        annotations {
          aggregations(filters: $filters) {
            ${AnnotationAggregations.getFragment('aggregations')}
          }
          hits(first: $size offset: $offset, filters: $filters) {
            ${AnnotationTable.getFragment('hits')}
          }
        }
      }
    `,
  },
};

const AnnotationsPage = Relay.createContainer(
  AnnotationsPageComponent,
  AnnotationsPageQuery
);

export default AnnotationsPage;
