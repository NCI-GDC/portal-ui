/* @flow */
/* eslint fp/no-class:0 */

import React from 'react';
import Relay from 'react-relay';
import { connect } from 'react-redux';
import ProjectsPage from '@ncigdc/containers/ProjectsPage';
import { parseIntParam, parseFilterParam } from '@ncigdc/utils/uri';
import { handleStateChange } from '@ncigdc/dux/relayProgress';
import { updateCachedComponent } from '@ncigdc/dux/cachedComponent';
import { viewerQuery } from './queries';

class ProjectsRoute extends Relay.Route {
  static routeName = 'ProjectsRoute';
  static queries = viewerQuery;
  static prepareParams = ({ location: { query } }) => {
    const q = query || {};
    return ({
      offset: parseIntParam(q.offset, 0),
      size: 1000,
      filters: parseFilterParam(q.filters, null),
      sort: q.sort || 'summary.case_count',
    });
  }
}

export default connect(state => state.cachedComponent)(({ path, component, ...props }) => (
  <Relay.Renderer
    Container={ProjectsPage}
    queryConfig={new ProjectsRoute(props)}
    environment={Relay.Store}
    render={({ props: relayProps }) => {
      if (path === ProjectsRoute.routeName) return component;
      if (relayProps) {
        const cached = <ProjectsPage {...relayProps} />;
        props.dispatch(updateCachedComponent({
          component: cached,
          path: ProjectsRoute.routeName,
        }));
        return cached;
      }
      return component || <div>loading</div>;
    }}
    onReadyStateChange={handleStateChange(props)}
  />
));
