// @flow

import React from 'react';
import Relay from 'react-relay';
import withSize from '@ncigdc/utils/withSize';
import { isEqual } from 'lodash';
import { compose, withPropsOnChange } from 'recompose';
import withRouter from '@ncigdc/utils/withRouter';
import { parseFilterParam } from '@ncigdc/utils/uri';
import { Row } from '@ncigdc/uikit/Flex';
import BarChart from '@ncigdc/components/Charts/BarChart';
import { withTheme } from '@ncigdc/theme';
import Loader from '@ncigdc/uikit/Loaders/Loader';

const MostAffectedCasesChartComponent = compose(
  withTheme,
  withSize(),
  withRouter,
  withPropsOnChange(
    (props, nextProps) => ['query', 'defaultFilters']
      .some((propName) => !isEqual(props[propName], nextProps[propName])),
    ({ relay, query, defaultFilters }) => {
      relay.setVariables({
        fetchData: true,
        macChart_filters: parseFilterParam(
          query.macChart_filters,
          defaultFilters || null
        ),
      });
    }
  )
)(({
  cohort: { cases },
  theme,
  size: {
    width,
  },
  push,
}) => {
  const chartMargin = { top: 30, right: 50, bottom: 105, left: 40 };

  const maxBars = 20;
  const bandWidth = (
    (width - chartMargin.right - chartMargin.left) /
    (maxBars + 1) / 2
  ) * 0.7;

  return (
    <Loader
      loading={!cases}
      height="400px"
    >
      {cases && !!cases.hits.edges.length &&
        <Row style={{ padding: '0 2rem' }}>
          <BarChart
            data={cases.hits.edges.map(x => x.node).map(c => ({
              label: `${c.case_id.substring(0, 8)}\u2026`,
              value: c.score,
              tooltip: <span>{c.case_id}<br />{c.score} Genes Affected</span>,
              onClick: () => push(`/cases/${c.case_id}`),
            }))}
            margin={chartMargin}
            height={300}
            bandwidth={bandWidth}
            yAxis={{ title: '# Affected Genes' }}
            styles={{
              xAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
              yAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
              bars: { fill: theme.secondary },
              tooltips: {
                fill: '#fff',
                stroke: theme.greyScale4,
                textFill: theme.greyScale3,
              },
            }}
          />
        </Row>
      }
    </Loader>
  );
});

export const MostAffectedCasesChartQuery = {
  initialVariables: {
    fetchData: false,
    macChart_filters: null,
    score: 'gene.gene_id',
  },
  fragments: {
    cohort: () => Relay.QL`
      fragment on Cohort {
        allCases: cases {
          hits(first: 0) { total }
        }
        cases @include(if: $fetchData) {
          hits (first: 20 filters: $macChart_filters, score: $score) @include(if: $fetchData) {
            total
            edges {
              node {
                score
                case_id
              }
            }
          }
        }
      }
    `,
  },
};

const MostAffectedCasesChart = Relay.createContainer(
  MostAffectedCasesChartComponent,
  MostAffectedCasesChartQuery
);

export default MostAffectedCasesChart;
