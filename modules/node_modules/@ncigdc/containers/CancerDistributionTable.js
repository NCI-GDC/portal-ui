// @flow
import React from 'react';
import Relay from 'react-relay';
import { lifecycle, compose } from 'recompose';
import { groupBy, isEqual, head, sortBy } from 'lodash';
import { tableToolTipHint } from '@ncigdc/theme/mixins';
import EntityPageHorizontalTable from '@ncigdc/components/EntityPageHorizontalTable';
import { Tooltip } from '@ncigdc/uikit/Tooltip';
import { Column } from '@ncigdc/uikit/Flex';
import { makeFilter } from '@ncigdc/utils/filters';
import ProjectLink from '@ncigdc/components/Links/ProjectLink';
import MutationsCount from '@ncigdc/containers/MutationsCount';
import GreyBox from '@ncigdc/uikit/GreyBox';
import Loader from '@ncigdc/uikit/Loaders/Loader';

type TProps = {|
  node: Object,
  aggregations: Object,
|};

const CancerDistributionTableComponent = compose(
  lifecycle({
    componentDidMount(): void {
      this.props.relay.setVariables({
        fetchFilteredCaseAggs: true,
        geneFilter: makeFilter([{ field: 'gene.gene_id', value: this.props.node.gene_id }], false),
      });
    },
    componentWillReceiveProps(nextProps: Object): void {
      if (!isEqual(nextProps.cases, this.props.cases) && nextProps.cases.filtered) {
        this.props.relay.setVariables({
          fetchProjects: true,
          numProjects: nextProps.cases.filtered.project__project_id.buckets.length,
          projectFilter:
            makeFilter([
              { field: 'project_id', value: nextProps.cases.filtered.project__project_id.buckets.map(b => b.key) },
            ], false),
        });
      }
    },
  })
)(({
  node: gene,
  cases,
  projects,
  cohort,
}: TProps = {}) => {
  const casesByProjectMap = (cases.total || { project__project_id: [] })
    .project__project_id.buckets.reduce((acc, bucket) => ({ ...acc, [bucket.key]: bucket.doc_count }), {});

  const projectsById = groupBy((projects.hits || { edges: [] }).edges, e => e.node.project_id);

  const cancerDistData = (cases.filtered || { project__project_id: { buckets: [] } })
  .project__project_id.buckets.map(b => {
    const totalCasesByProject = casesByProjectMap[b.key];
    const project = head(projectsById[b.key]);
    const freq = b.doc_count / totalCasesByProject;
    return {
      freq,
      project_id: (
        <ProjectLink id={b.key}>
          {b.key}
        </ProjectLink>),
      disease_type: project ? (project.node.disease_type || []).join(', ') : <GreyBox />,
      site: project ? (project.node.primary_site || []).join(', ') : <GreyBox />,
      num_affected_cases:
        `${b.doc_count} / ${totalCasesByProject.toLocaleString()} (${freq.toFixed(2)}%)`,
      num_mutations: <MutationsCount
        key={b.key}
        ssms={cohort.ssms}
        filters={makeFilter([
          { field: 'consequence.transcript.gene.gene_id', value: [gene.gene_id] },
          { field: 'ssms.occurrence.case.project.project_id', value: [b.key] },
        ], false)}
      />,
    };
  });

  const sortedCancerDistData = sortBy(cancerDistData, d => -d.freq);

  return (
    <Loader
      loading={!cases.filtered}
      height="387px"
    >
      <Column style={{ width: '100%', minWidth: 450 }}>
        <EntityPageHorizontalTable
          headings={[
            { key: 'project_id', title: 'Project ID' },
            { key: 'disease_type', title: 'Disease Type' },
            { key: 'site', title: 'Site' },
            { key: 'num_affected_cases',
              title: (
                <Tooltip
                  Component={`Number of Cases where ${gene.symbol} contains SSM`}
                  style={tableToolTipHint()}
                >
                  # Affected Cases
                </Tooltip>
              ),
            },
            { key: 'num_mutations',
              title: (
                <Tooltip
                  Component={`Number of SSM observed in ${gene.symbol}`}
                  style={tableToolTipHint()}
                >
                  # Mutations
                </Tooltip>
              ),
              style: { textAlign: 'right' },
            },
          ]}
          data={sortedCancerDistData}
        />
      </Column>
    </Loader>
  );
});

const CancerDistributionTableQuery = {
  initialVariables: {
    geneFilter: null,
    projectFilter: null,
    numProjects: null,
    fetchProjects: false,
    fetchFilteredCaseAggs: false,
    ssmTested: makeFilter([{
      field: 'available_variation_data',
      value: 'ssm',
    }], false),
  },
  fragments: {
    node: () => Relay.QL`
      fragment on Gene {
        symbol
        gene_id
      }
    `,
    projects: () => Relay.QL`
      fragment on Projects {
        blah: hits(first: 0) { total }
        hits(first: $numProjects filters: $projectFilter) @include(if: $fetchProjects) {
          edges {
            node {
              primary_site
              disease_type
              project_id
            }
          }
        }
      }
    `,
    cohort: () => Relay.QL`
      fragment on Cohort {
        ssms {
          ${MutationsCount.getFragment('ssms')}
        }
      }
    `,
    cases: () => Relay.QL`
      fragment on CohortCases {
        filtered: aggregations(filters: $geneFilter) @include(if: $fetchFilteredCaseAggs) {
          project__project_id {
            buckets {
              doc_count
              key
            }
          }
        }
        total: aggregations(filters: $ssmTested) {
          project__project_id {
            buckets {
              doc_count
              key
            }
          }
        }
      }
    `,
  },
};

const CancerDistributionTable = Relay.createContainer(
  CancerDistributionTableComponent,
  CancerDistributionTableQuery
);

export default CancerDistributionTable;
