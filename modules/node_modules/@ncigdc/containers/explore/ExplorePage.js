/* @flow */

import React from 'react';
import { createFragmentContainer, graphql } from 'react-relay/compat';
import { get } from 'lodash';

import SearchPage from '@ncigdc/components/SearchPage';
import TabbedLinks from '@ncigdc/components/TabbedLinks';
import MutationsTab from '@ncigdc/components/Explore/MutationsTab';
import OncogridTab from '@ncigdc/components/Explore/OncogridTab';
import CasesTab from '@ncigdc/components/Explore/CasesTab';
import NoResultsMessage from '@ncigdc/components/NoResultsMessage';

import CaseAggregations from '@ncigdc/containers/explore/CaseAggregations';
import GeneAggregations from '@ncigdc/containers/explore/GeneAggregations';
import SSMAggregations from '@ncigdc/containers/explore/SSMAggregations';


export type TProps = {
  autocomplete: {
    cases: {
      hits: Array<Object>,
    },
    genes: {
      hits: Array<Object>,
    },
    ssms: {
      hits: Array<Object>,
    },
  },
  relay: Object,
  viewer: {
    explore: {
      cases: {
        aggregations: string,
        hits: {
          total: number,
        },
      },
      genes: {
        aggregations: string,
        hits: {
          total: number,
        },
      },
      ssms: {
        aggregations: string,
        hits: {
          total: number,
        },
      },
    },
  },
  showFacets: boolean,
  setShowFacets: Function,
};

export const ExplorePageComponent = (props: TProps) => {
  console.log(props);
  return (
    <SearchPage
      facetTabs={[
        {
          id: 'cases',
          text: 'Cases',
          component: (
            <CaseAggregations
            aggregations={props.viewer.explore.cases.aggregations}
            suggestions={get(props, 'viewer.autocomplete_cases.hits', [])}
            setAutocomplete={
              (value, onReadyStateChange) => props.relay.setVariables({ idAutocompleteCases: value, runAutocompleteCases: !!value }, onReadyStateChange)
            }
          />
        ),
        },
        {
          id: 'genes',
          text: 'Genes',
          component: (
            <GeneAggregations
            aggregations={props.viewer.explore.genes.aggregations}
            suggestions={get(props, 'viewer.autocomplete_genes.hits', [])}
            setAutocomplete={
              (value, onReadyStateChange) => props.relay.setVariables({ idAutocompleteGenes: value, runAutocompleteGenes: !!value }, onReadyStateChange)
            }
          />
        ),
        },
        {
          id: 'mutations',
          text: 'Mutations',
          component: (
            <SSMAggregations
            aggregations={props.viewer.explore.ssms.aggregations}
            suggestions={get(props, 'viewer.autocomplete_ssms.hits', [])}
            setAutocomplete={
              (value, onReadyStateChange) => props.relay.setVariables({ idAutocompleteSsms: value, runAutocompleteSsms: !!value }, onReadyStateChange)
            }
          />
        ),
        },
      ]}
      results={
        <TabbedLinks
          queryParam="searchTableTab"
          defaultIndex={0}
          links={[
          {
            id: 'cases',
            text: `Cases (${props.viewer.explore.cases.hits.total.toLocaleString()})`,
            component: (
              !!props.viewer.explore.cases.hits.total
              ? <CasesTab
                params={{
                  cases_offset: 0,
                  cases_size: 20,
                  cases_sort: null,
                }}
                explore={props.viewer.explore}
                hits={props.viewer.explore.cases.hits}
                aggregations={props.viewer.explore.cases.aggregations}
              />
              : <NoResultsMessage>No Cases Found.</NoResultsMessage>
            ),
          },
          {
            id: 'genes',
            text: `Genes (${props.viewer.explore.genes.hits.total.toLocaleString()})`,
            component: <GeneTable />,
          },
          {
            id: 'mutations',
            text: `Mutations (${props.viewer.explore.ssms.hits.total.toLocaleString()})`,
            component: (
              props.viewer.explore.ssms.hits.total
              ? <MutationsTab
                totalNumCases={props.viewer.explore.cases.hits.total}
                viewer={props.viewer}
              />
              : <NoResultsMessage>No Mutations Found.</NoResultsMessage>
            ),
          },
          {
            id: 'oncogrid',
            text: 'OncoGrid',
            component: (
              <OncogridTab />
            ),
          },
        ]}
        />
    }
    />
)
         ;
};

const ExplorePage = createFragmentContainer(
  ExplorePageComponent,
  graphql`
      fragment ExplorePage_viewer on Root {
        autocomplete_cases: query (query: $idAutocompleteCases types: ["case"]) @include(if: $runAutocompleteCases) {
          hits {
            id
            ...on Case {
              case_id
              project {
                project_id
              }
              submitter_id
            }
          }
        }
        autocomplete_genes: query (query: $idAutocompleteGenes types: ["gene_centric"]) @include(if: $runAutocompleteGenes) {
          hits {
            id
            ...on Gene {
              symbol
              name
              gene_id
            }
          }
        }
        autocomplete_ssms: query (query: $idAutocompleteSsms types: ["ssm_centric"]) @include(if: $runAutocompleteSsms) {
          hits {
            id
            ...on Ssm {
              ssm_id
            }
          }
        }
        frequentMutationsTableFragment: explore {
          ...FrequentMutationsTable_explore
        }
        frequentMutationsChartFragment: explore {
          ...FrequentMutationsChart_explore
        }
        frequentlyMutatedGenesChartFragment: explore {
          ...FrequentlyMutatedGenesChart_explore
        }
        frequentlyMutatedGenesTableFragment: explore {
          ...FrequentlyMutatedGenesTable_explore
        }
        projectBreakdownFragment: explore {
          ...ProjectBreakdown_explore
        }
        explore {
          mutationsCountFragment: ssms {
            ...MutationsCount_ssms
          }
          cases {
            aggregations(filters: $filters) {
              ...CaseAggregations_aggregations
              ...ExploreCasesPies_aggregations
            }
            hits(first: $cases_size, offset: $cases_offset, filters: $filters, score: "gene.gene_id") {
              ...CaseTable_hits
              total
            }
          }
          genes {
            aggregations(filters: $filters) {
              ...GeneAggregations_aggregations
            }
            hits(first: $genes_size offset: $genes_offset, filters: $filters) {
              total
            }
          }
          ssms {
            aggregations(filters: $filters) {
              ...SSMAggregations_aggregations
            }
            hits(first: $ssms_size offset: $ssms_offset, filters: $filters) {
              total
            }
          }
        }
      }
    `
);

export default ExplorePage;
