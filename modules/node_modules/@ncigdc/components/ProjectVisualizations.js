// @flow

import React from 'react';
import { compose, withState, lifecycle } from 'recompose';
import LocationSubscriber from '@ncigdc/components/LocationSubscriber';

import { parseFilterParam } from '@ncigdc/utils/uri';
import { fetchApi } from '@ncigdc/utils/ajax';

import { Column } from '@ncigdc/uikit/Flex';

import FrequentMutationsContainer from '@ncigdc/components/FrequentMutationsContainer';
import MostAffectedCasesContainer from '@ncigdc/components/MostAffectedCasesContainer';
import OncoGridWrapper from '@ncigdc/components/Oncogrid/OncogridWrapper';
import FrequentlyMutatedGenesContainer from '@ncigdc/components/FrequentlyMutatedGenesContainer';
import SpinnerParticle from '@ncigdc/uikit/Loaders/Particle';

const styles = {
  heading: {
    flexGrow: 1,
    fontSize: '2rem',
    marginBottom: 7,
    marginTop: 7,
  },
  card: {
    backgroundColor: 'white',
  },
};

const initialState = {
  loading: true,
  numCasesAggByProject: {},
  mutatedGenesProject: {},
  defaultSurvivalRawData: {},
};

const enhance = compose(
  withState('selectedSurvivalData', 'setSelectedSurvivalData', {}),
  withState('state', 'setState', initialState),
  lifecycle({
    async componentDidMount(): Promise<*> {
      const data1 = await fetchApi(
        'analysis/mutated_cases_count_by_project?size=0',
        { headers: { 'Content-Type': 'application/json' } }
      );

      const numCasesAggByProject = data1.aggregations.projects.buckets.reduce((acc, b) => ({
        ...acc,
        [b.key]: b.case_summary.case_with_ssm.doc_count,
      }), {});

      const data4 = await fetchApi(
        `analysis/survival?filters=[{"op":"=","content":{"field":"cases.project.project_id","value":"${this.props.projectId}"}}]`,
        { headers: { 'Content-Type': 'application/json' } }
      );

      const defaultSurvivalRawData = data4;

      this.props.setState(s => ({
        ...s,
        loading: false,
        numCasesAggByProject,
        defaultSurvivalRawData,
      }));
    },
  })
);

const ProjectVisualizations = enhance(({
  state: {
    defaultSurvivalRawData,
    numCasesAggByProject,
    loading,
  },
  setSelectedSurvivalData,
  selectedSurvivalData,
  projectId,
}) => {
  if (loading) return <Column style={{ alignItems: 'center', padding: 20 }}><SpinnerParticle /></Column>;

  const defaultSurvivalLegend = [
    {
      key: projectId,
      value: `${numCasesAggByProject[projectId] || 0} cases on ${projectId}`,
    },
  ];

  const survivalData = {
    legend: selectedSurvivalData.legend || defaultSurvivalLegend,
    rawData: selectedSurvivalData.rawData || defaultSurvivalRawData,
  };

  const totalNumCases = Object.keys(numCasesAggByProject).reduce((sum, b) => sum + numCasesAggByProject[b], 0);

  return (
    <div>
      <Column style={styles.card}>
        <h1 style={{ ...styles.heading, padding: '1rem' }} id="mutated-genes">
          <i className="fa fa-bar-chart-o" style={{ paddingRight: '10px' }} />
          Most Frequently Mutated Genes
        </h1>
        <LocationSubscriber>{(ctx: {| pathname: string, query: TRawQuery |}) => {
          const { filters } = ctx.query || {};
          const currentFilters = parseFilterParam(filters, { op: 'and', content: [] });
          return (
            <FrequentlyMutatedGenesContainer
              numCasesAggByProject={numCasesAggByProject}
              survivalData={survivalData}
              setSelectedSurvivalData={setSelectedSurvivalData}
              selectedSurvivalData={selectedSurvivalData}
              totalNumCases={totalNumCases}
              projectId={projectId}
              currentFilters={currentFilters}
            />
          );
        }}</LocationSubscriber>

      </Column>

      <Column style={{ ...styles.card, marginTop: '2rem', position: 'static' }}>
        <h1 style={{ ...styles.heading, padding: '1rem' }} id="oncogrid">
          <i className="fa fa-th" style={{ paddingRight: '10px' }} />
          OncoGrid
        </h1>
        <LocationSubscriber>{(ctx: {| pathname: string, query: TRawQuery |}) => {
          const { filters } = ctx.query || {};
          const currentFilters = parseFilterParam(filters, { op: 'and', content: [] });
          return (
            <OncoGridWrapper
              projectId={projectId}
              currentFilters={currentFilters}
            />
          );
        }}</LocationSubscriber>


      </Column>

      <Column style={{ ...styles.card, marginTop: '2rem' }}>
        <h1 style={{ ...styles.heading, padding: '1rem' }} id="frequent-mutations">
          <i className="fa fa-bar-chart-o" style={{ paddingRight: '10px' }} />
          Most Frequent Mutations
        </h1>
        <LocationSubscriber>{(ctx: {| pathname: string, query: TRawQuery |}) => {
          const { filters } = ctx.query || {};
          const currentFilters = parseFilterParam(filters, { op: 'and', content: [] });
          return (
            <FrequentMutationsContainer
              numCasesAggByProject={numCasesAggByProject}
              totalNumCases={totalNumCases}
              projectId={projectId}
              defaultSurvivalRawData={defaultSurvivalRawData}
              defaultSurvivalLegend={defaultSurvivalLegend}
              showSurvivalPlot
              currentFilters={currentFilters}
            />
          );
        }}</LocationSubscriber>
      </Column>
      <Column style={{ ...styles.card, marginTop: '2rem' }}>
        <h1 style={{ ...styles.heading, padding: '1rem' }} id="most-affected-cases">
          <i className="fa fa-bar-chart-o" style={{ paddingRight: '10px' }} />
          Most Affected Cases
        </h1>
        <MostAffectedCasesContainer projectId={projectId} />
      </Column>
    </div>
  );
});

export default ProjectVisualizations;
