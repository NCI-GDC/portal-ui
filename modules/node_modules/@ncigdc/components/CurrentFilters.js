// @flow

// Vendor
import React from 'react';
import LocationSubscriber from '@ncigdc/components/LocationSubscriber';
import UndoIcon from 'react-icons/lib/md/undo';
import LeftArrow from 'react-icons/lib/fa/long-arrow-left';
import Color from 'color';

import type { TRawQuery } from '@ncigdc/utils/uri/types';
import { humanify } from '@ncigdc/utils/string';
import { parseFilterParam } from '@ncigdc/utils/uri';

import Button from '@ncigdc/uikit/Button';
import { Row } from '@ncigdc/uikit/Flex';
import Info from '@ncigdc/uikit/Info';

import styled from '@ncigdc/theme/styled';
import { buttonLike } from '@ncigdc/theme/mixins';

import Link from './Links/Link';

/*----------------------------------------------------------------------------*/

const Field = styled(Button, ({
  backgroundColor: ({ theme }) => theme.greyScale2,
  ':hover': {
    backgroundColor: ({ theme }) => Color(theme.greyScale2).lighten(0.7).rgbString(),
  },
}));

const Value = styled(Button, ({
  backgroundColor: ({ theme }) => theme.success,
  ':hover': {
    backgroundColor: ({ theme }) => Color(theme.success).lighten(0.7).rgbString(),
  },
}));

const Op = styled.span({
  ...buttonLike,
  backgroundColor: ({ theme }) => theme.primary,
  color: 'white',
});

const CurrentFilters = () => {
  const styles = {
    leftParen: {
      fontSize: '2rem',
      marginRight: '0.3rem',
    },
    rightParen: {
      fontSize: '2rem',
      marginRight: '0.3rem',
    },
    groupPadding: {
      padding: '0.5rem 0',
    },
  };

  return (
    <LocationSubscriber>{(ctx: {| pathname: string, query: TRawQuery |}) => {
      const { filters, ...query } = ctx.query || {};
      const currentFilters = parseFilterParam(filters, { content: [] }).content;
      return (
        <Info>
          {!currentFilters.length &&
            <span style={{ display: 'flex', alignItems: 'center', lineHeight: '44px' }}>
              <LeftArrow />
              <span style={{ marginLeft: '0.6rem' }}>
                Start searching by selecting a facet
              </span>
            </span>
          }
          {!!currentFilters.length &&
            <Row wrap spacing="0.3rem">
              <Link
                style={styles.groupPadding}
                query={query}
              >
                <Button leftIcon={<UndoIcon />}>Clear</Button>
              </Link>

              {currentFilters.map((filter, i) => (
                <Row
                  key={`${filter.content.field}.${filter.op}.${filter.content.value.map(v => v)}`}
                  spacing="0.3rem"
                  style={styles.groupPadding}
                >
                  <Link
                    merge="toggle"
                    query={{
                      offset: 0,
                      filters: {
                        op: 'and',
                        content: [{
                          op: 'in',
                          content: {
                            field: filter.content.field,
                            value: filter.content.value,
                          },
                        }],
                      },
                    }}
                  >
                    <Field>{humanify({ term: filter.content.field })}</Field>
                  </Link>
                  {filter.op === 'in' && filter.content.value.length === 1 &&
                    <Op>IS</Op>
                  }
                  {filter.op === 'in' && filter.content.value.length > 1 &&
                    <Op>IN</Op>
                  }
                  {filter.op !== 'in' && <Button style={styles.op}>{filter.op}</Button>}
                  {filter.content.value.length > 1 && <span style={styles.leftParen}>(</span>}
                  {filter.content.value.map(value => (
                    <Link
                      key={value}
                      merge="toggle"
                      query={{
                        offset: 0,
                        filters: {
                          op: 'and',
                          content: [{
                            op: 'in',
                            content: {
                              field: filter.content.field,
                              value: [value],
                            },
                          }],
                        },
                      }}
                    >
                      <Value>{value}</Value>
                    </Link>
                      ))}
                  {filter.content.value.length > 1 && <span style={styles.rightParen}>)</span>}
                  {i < currentFilters.length - 1 && <Op>AND</Op>}
                </Row>
              ))}
            </Row>
          }
        </Info>
      );
    }}</LocationSubscriber>
  );
};

/*----------------------------------------------------------------------------*/

export default CurrentFilters;
