// @flow
/* global $ */

import React from 'react';
import { compose, lifecycle, withState } from 'recompose';
import { isEqual } from 'lodash';

import { Row, Column } from '@ncigdc/uikit/Flex';
import { makeFilter } from '@ncigdc/utils/filters';
import ChartIcon from '@ncigdc/theme/icons/BarChart';

import CancerDistributionChart from '@ncigdc/containers/CancerDistributionChart';
import CancerDistributionTable from '@ncigdc/containers/CancerDistributionTable';
import FrequentMutationsChart from '@ncigdc/containers/FrequentMutationsChart';
import FrequentMutationsTable from '@ncigdc/containers/FrequentMutationsTable';
import GeneSummary from '@ncigdc/containers/GeneSummary';
import GeneExternalReferences from '@ncigdc/containers/GeneExternalReferences';

import ProteinLolliplotComponent from './ProteinLolliplot';

const styles = {
  heading: {
    flexGrow: 1,
    fontSize: '2.2rem',
    marginBottom: 7,
    marginTop: 7,
    display: 'flex',
    alignItems: 'center',
  },
  card: {
    backgroundColor: 'white',
  },
};

const initialState = {
  allCasesAgg: [],
  ssmsLoading: true,
};

const Gene = compose(
  withState('state', 'setState', initialState),
  withState('activeTranscript', 'setActiveTranscript'),
  lifecycle({
    componentWillReceiveProps(nextProps: {}): void {
      if (!nextProps.ssms.length) return;

      const canonicalTranscript = nextProps.node.transcripts.hits.edges.find(x => x.node.is_canonical).node;
      const activeTranscript = nextProps.activeTranscript;

      if (!this.props.ssms.length || !isEqual(this.props.activeTranscript || canonicalTranscript, activeTranscript)) {
        const transcript = activeTranscript || canonicalTranscript;
        const ssms = nextProps.ssms.map(x => x.node);

        nextProps.setActiveTranscript(transcript);
        nextProps.setState(s => ({ ...s, ssmsLoading: false, lolliplotData: { ssms, transcript } }));
      }
    },
  })
)(({
  state: { ssmsLoading, lolliplotData },
  setActiveTranscript,
  node: gene,
  viewer,
}) => {
  const fmFilters = makeFilter([
    {
      field: 'consequence.transcript.gene.gene_id',
      value: [gene.gene_id],
    },
    {
      field: 'consequence.transcript.transcript_id',
      value: [(gene.transcripts.hits.edges.find(x => x.node.is_canonical) || {}).node.transcript_id],
    },
  ], false);

  return (
    <Column spacing="2rem">
      <Row spacing="2rem">
        <Row flex="1"><GeneSummary node={gene} /></Row>
        <Row flex="1"><GeneExternalReferences node={gene} /></Row>
      </Row>
      <Column style={styles.card} id="cancer-distribution">
        <Row>
          <h1 style={{ ...styles.heading, padding: '1rem' }}>
            <ChartIcon style={{ marginRight: '1rem' }} />
            Cancer Distribution
          </h1>
        </Row>
        <Column>
          <CancerDistributionChart node={gene} aggregations={viewer.cohort.cases.aggregations} />
          <CancerDistributionTable node={gene} aggregations={viewer.cohort.cases.aggregations} />
        </Column>
      </Column>

      <Column style={{ ...styles.card, marginTop: '2rem' }}>
        <ProteinLolliplotComponent
          gene={gene}
          transcripts={gene.transcripts.hits.edges.map(x => x.node)}
          loading={ssmsLoading}
          selectTranscript={setActiveTranscript}
          data={lolliplotData}
        />
      </Column>

      <Column style={{ ...styles.card, marginTop: '2rem' }}>
        <h1 style={{ ...styles.heading, padding: '1rem' }} id="frequent-mutations">
          <ChartIcon style={{ marginRight: '1rem' }} />
          Most Frequent Mutations
        </h1>

        <Column>
          <FrequentMutationsChart
            defaultFilters={fmFilters}
            cohort={viewer.frequentMutationsChartFragment}
          />
          <FrequentMutationsTable
            defaultFilters={fmFilters}
            cohort={viewer.frequentMutationsTableFragment}
          />
        </Column>
      </Column>
    </Column>
  );
});

export default Gene;
