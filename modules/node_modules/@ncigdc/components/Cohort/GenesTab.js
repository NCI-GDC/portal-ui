/* global API */
// @flow
import React from 'react';
import LocationSubscriber from '@ncigdc/components/LocationSubscriber';
import { compose, withState, lifecycle } from 'recompose';
import { fetchApi } from '@ncigdc/utils/ajax';
import { Column } from '@ncigdc/uikit/Flex';
import FrequentlyMutatedGenesContainer from '@ncigdc/components/FrequentlyMutatedGenesContainer';
import { parseFilterParam } from '@ncigdc/utils/uri';
import type { TRawQuery } from '@ncigdc/utils/uri/types';

const styles = {
  heading: {
    flexGrow: 1,
    fontSize: '2rem',
    marginBottom: 7,
    marginTop: 7,
  },
  card: {
    backgroundColor: 'white',
  },
};

const initialState = {
  loading: true,
};

export default
compose(
  withState('selectedSurvivalData', 'setSelectedSurvivalData', {}),
  withState('state', 'setState', initialState),
  lifecycle({
    async componentDidMount(): Promise<*> {
      const data1 = await fetchApi(
        'analysis/mutated_cases_count_by_project?size=0',
        { headers: { 'Content-Type': 'application/json' } }
      );

      const numCasesAggByProject = data1.aggregations.projects.buckets.reduce((acc, b) => {
        acc[b.key] = b.case_summary.case_with_ssm.doc_count;
        return acc;
      }, {});

      const data4 = await fetchApi(
        'analysis/survival',
        { headers: { 'Content-Type': 'application/json' } }
      );

      const survivalData = data4;

      this.props.setState(s => ({
        ...s,
        loading: false,
        numCasesAggByProject,
        survivalData,
      }));
    }
  })
)(({
  state,
  setSelectedSurvivalData,
  selectedSurvivalData,
  totalNumCases,
  projectId = '',
  ...props
}) => {
  const survivalData = {
    legend: selectedSurvivalData.legend,
    rawData: selectedSurvivalData.rawData || state.survivalData,
  };

  return (
    <Column style={styles.card}>
      <h1 style={{ ...styles.heading, padding: '1rem' }} id="mutated-genes">
        <i className="fa fa-bar-chart-o" style={{ paddingRight: '10px' }} />
        Genes
      </h1>
      <LocationSubscriber>{(ctx: {| pathname: string, query: TRawQuery |}) => {
        const { filters } = ctx.query || {};
        const currentFilters = parseFilterParam(filters, { op: 'and', content: [] });
        return (
          <FrequentlyMutatedGenesContainer
            currentFilters={currentFilters}
            numCasesAggByProject={state.numCasesAggByProject}
            survivalData={survivalData}
            setSelectedSurvivalData={setSelectedSurvivalData}
            selectedSurvivalData={selectedSurvivalData}
            totalNumCases={totalNumCases}
            projectId={projectId}
            width={window.innerWidth}
            api={API}
            survivalPlotloading={state.loading}
          />
        );
      }}</LocationSubscriber>
    </Column>
  )
})
