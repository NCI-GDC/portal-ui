// @flow
import React from 'react';
import { scaleOrdinal, schemeCategory10 } from 'd3';

import EntityPageHorizontalTable from '@ncigdc/components/EntityPageHorizontalTable';
import CohortLink from '@ncigdc/components/Links/CohortLink';
import GeneLink from '@ncigdc/components/Links/GeneLink';
import SurvivalIcon from '@ncigdc/theme/icons/SurvivalIcon';
import styled from '@ncigdc/theme/styled';
import TogglableUl from '@ncigdc/uikit/TogglableUl';
import { Tooltip } from '@ncigdc/uikit/Tooltip';
import getSurvivalCurves from '@ncigdc/utils/getSurvivalCurves';
import { makeFilter } from '@ncigdc/utils/filters';

const colors = scaleOrdinal(schemeCategory10);

const Hidden = styled.div({
  width: 0,
  height: 0,
  overflow: 'hidden',
});

const GeneTable = ({
  numCasesAggByProject = {},
  projectId = '',
  totalNumCases = 0,
  showSurvivalPlot = false,
  selectedSurvivalData = {},
  setSelectedSurvivalData = () => {},
  mutatedGenesChartData = [],
  // $FlowIgnore
  api = API,
}) => (
  <EntityPageHorizontalTable
    headings={[
      { key: 'symbol', title: 'Symbol' },
      { key: 'name', title: 'Name' },
      { key: 'cytoband', title: 'Cytoband' },
      ...(projectId ?
      [{
        key: 'num_affected_cases_project',
        title: <span># Affected Cases<br />in {projectId}</span>,
      }] : []),
      {
        key: 'num_affected_cases_all',
        title: <span># Affected Cases<br /> Across all Projects</span>,
      },
      {
        key: 'num_mutations',
        title: '# Mutations',
      },
      {
        title: 'Survival Analysis',
        key: 'survival_plot',
        style: { textAlign: 'center', width: '100px' },
      },
    ]}
    data={mutatedGenesChartData.map(g => ({
      ...g,
      symbol: <GeneLink to={`/genes/${g.gene_id}`}>{g.symbol}</GeneLink>,
      cytoband: (g.cytoband || []).join(', '),
      num_affected_cases_project:
        `${g.num_affected_cases_project} / ${numCasesAggByProject[projectId]}
        (${((g.num_affected_cases_project / numCasesAggByProject[projectId]) * 100).toFixed(2)}%)`,
      num_affected_cases_all: (
        <TogglableUl
          items={[
            <CohortLink
              query={{
                searchTableTab: 'cases',
                filters: makeFilter([{ field: 'genes.gene_id', value: [g.gene_id] }], false),
              }}
            >
              {g.num_affected_cases_all.toLocaleString()} / {totalNumCases.toLocaleString()}
              &nbsp;({((g.num_affected_cases_all / totalNumCases) * 100).toFixed(2)}%)
            </CohortLink>,
            ...Object.keys(g.num_affected_cases_by_project)
              .map(k => `
                ${k}: ${g.num_affected_cases_by_project[k]} / ${numCasesAggByProject[k]}
                (${((g.num_affected_cases_by_project[k] / numCasesAggByProject[k]) * 100).toFixed(2)}%)`),
          ]}
        />
      ),
      num_mutations: (
        <CohortLink
          query={{
            searchTableTab: 'mutations',
            filters: makeFilter([{ field: 'genes.gene_id', value: [g.gene_id] }], false),
          }}
        >
          {g.case.reduce((acc, c) => acc + (c.ssm || []).length, 0).toLocaleString()}
        </CohortLink>
      ),
      survival_plot: (
        <Tooltip Component={`Click icon to plot ${g.symbol}`}>
          <button
            onClick={() => {
              if (g.symbol !== selectedSurvivalData.id) {
                getSurvivalCurves({
                  api,
                  projectId,
                  field: 'gene.symbol',
                  value: g.symbol,
                })
                  .then(setSelectedSurvivalData);
              } else {
                setSelectedSurvivalData({});
              }
            }}
          >
            <span
              style={{
                color: colors(selectedSurvivalData.id === g.symbol ? 1 : 0),
                cursor: 'pointer',
              }}
            >
              <SurvivalIcon />
              <Hidden>add to survival plot</Hidden>
            </span>
          </button>
        </Tooltip>
      ),
    }))}
  />
);

export default GeneTable;
