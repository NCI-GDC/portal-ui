// @flow
/* global $ */

import React from 'react';
import { compose, withState } from 'recompose';

import { buildCancerDistributionData } from '@ncigdc/utils/data';

import { Row, Column } from '@ncigdc/uikit/Flex';
import { Tooltip } from '@ncigdc/uikit/Tooltip';
import { makeFilter } from '@ncigdc/utils/filters';

import Lolliplot from '@ncigdc/containers/Lolliplot';
import GeneSummary from '@ncigdc/containers/GeneSummary';
import GeneExternalReferences from '@ncigdc/containers/GeneExternalReferences';

import ChartIcon from '@ncigdc/theme/icons/BarChart';
import FrequentMutations from './FrequentMutations';
import CancerDistribution from './CancerDistribution';

const styles = {
  heading: {
    flexGrow: 1,
    fontSize: '2.2rem',
    marginBottom: 7,
    marginTop: 7,
    display: 'flex',
    alignItems: 'center',
  },
  card: {
    backgroundColor: 'white',
  },
};

const initialState = {
  activeTranscript: {},
  ssmsLoading: true,
};

const Gene = compose(
  withState('state', 'setState', initialState)
)(({
  state: { activeTranscript, ssmsLoading },
  node: gene,
  casesByProject,
  viewer,
}) => {
  const casesByProjectMap = (casesByProject || []).reduce((acc, bucket) =>
    ({ ...acc, [bucket.key]: bucket.doc_count }), {}
  );

  const cancerDistData = gene.case.hits.edges.map(x => x.node)
    .reduce(buildCancerDistributionData(casesByProjectMap), {});

  const sortedCancerDistData = Object.keys(cancerDistData)
    .map(k => ({ project_id: k, ...cancerDistData[k] }))
    .sort((a, b) => b.freq - a.freq);

  const totalNumCases = Object.keys(casesByProjectMap).reduce((sum, b) => sum + casesByProjectMap[b], 0);

  return (
    <span>
      <Row spacing="2rem">
        <Row flex="1"><GeneSummary node={gene} /></Row>
        <Row flex="1"><GeneExternalReferences node={gene} /></Row>
      </Row>
      <Column style={styles.card} id="cancer-distribution">
        <Row>
          <h1 style={{ ...styles.heading, padding: '1rem' }}>
            <ChartIcon style={{ marginRight: '1rem' }} />
            Cancer Distribution
          </h1>
        </Row>
        <CancerDistribution
          tableHeadings={[
            { key: 'project_id', title: 'Project ID' },
            { key: 'disease_type', title: 'Disease Type' },
            { key: 'site', title: 'Site' },
            { key: 'num_affected_cases',
              title: (
                <Tooltip
                  Component={`Number of Cases where ${gene.symbol} contains SSM`}
                >
                  # Affected Cases
                </Tooltip>
              ),
            },
            { key: 'num_mutations',
              title: <Tooltip Component={`Number of SSM observed in ${gene.symbol}`}># Mutations</Tooltip>,
              style: { textAlign: 'right' },
            },
          ]}
          tableData={sortedCancerDistData.map(d => ({
            ...d,
            project_id: <a href={`/projects/${d.project_id}`}>{d.project_id}</a>,
            num_affected_cases:
              `${d.cases.length}/${casesByProjectMap[d.project_id]} (${(d.freq * 100).toFixed(2)}%)`,
            num_mutations: d.ssms.length,
          }))}
          chartData={sortedCancerDistData.map(d => ({
            label: d.project_id,
            value: (d.freq * 100),
            href: `projects/${d.project_id}`,
            tooltip: `
              DNA Change<br />
              ${d.cases.length} Case${d.cases.length > 1 ? 's' : ''} Affected in <b>${d.project_id}</b><br />
              ${d.cases.length} / ${casesByProjectMap[d.project_id]}&nbsp;(${(d.freq * 100).toFixed(2)})%
            `,
          }))}
          tagline={`${sortedCancerDistData.reduce((acc, d) => [...acc, ...d.cases], []).length} cases affected by
            ${sortedCancerDistData.reduce((acc, d) => [...acc, ...d.ssms], []).length} mutations across
            ${sortedCancerDistData.length} projects`
          }
        />
      </Column>

      <Column style={{ ...styles.card, marginTop: '2rem' }}>
        <Lolliplot
          ssms={viewer.cohort.lolliplotFragment}
          gene={gene}
          transcripts={gene.transcripts.hits.edges.map(x => x.node)}
          activeTranscript={activeTranscript}
          loading={ssmsLoading}
        />
      </Column>

      <Column style={{ ...styles.card, marginTop: '2rem' }}>
        <h1 style={{ ...styles.heading, padding: '1rem' }} id="frequent-mutations">
          <ChartIcon style={{ marginRight: '1rem' }} />
          Most Frequent Mutations
        </h1>

        <FrequentMutations
          currentFilters={
            makeFilter([
              {
                field: 'consequence.transcript.gene.gene_id',
                value: [gene.gene_id],
              },
              {
                field: 'consequence.transcript.transcript_id',
                value: [(gene.transcripts.hits.edges.find(x => x.node.is_canonical) || {}).node.transcript_id],
              },
            ], false)
          }
          totalNumCases={totalNumCases}
          showSurvivalPlot={false}
          cohort={viewer.cohort}
        />
      </Column>
    </span>
  );
});

export default Gene;
