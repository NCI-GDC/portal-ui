/* @flow */

import React from 'react';
import { compose, withState, mapProps, pure } from 'recompose';
import AngleIcon from 'react-icons/lib/fa/angle-down';
import { SingleDatePicker } from 'react-dates';
import 'react-dates/lib/css/_datepicker.css';
import moment from 'moment';

import { withTheme } from '@ncigdc/theme';
import styled from '@ncigdc/theme/styled';
import { Row, Column } from '@ncigdc/uikit/Flex';
import Link from '../Links/Link';

import './style.css';

const Container = styled(Column, ({
  padding: '1rem 1.2rem',
  backgroundColor: 'white',
}));

const Header = styled(Row, ({
  color: ({ theme }) => theme.primaryLight1,
  fontSize: '1.7rem',
  marginBottom: '0.5rem',
  cursor: 'pointer',
  alignItems: 'center',
}));

const Label = styled.label({
  backgroundColor: ({ theme }) => theme.greyScale5,
  color: ({ theme }) => theme.greyScale2,
  padding: '0.8rem',
  height: '3.4rem',
  border: ({ theme }) => `1px solid ${theme.greyScale4}`,
});

const GoLink = styled(Link, ({
  color: ({ theme }) => theme.greyScale2,
  textDecoration: 'none',
  border: ({ theme }) => `1px solid ${theme.greyScale4}`,
  borderLeft: 0,
  padding: '6px 4px 2px 4px',
  height: '3.4rem',
  borderRadius: '0 4px 4px 0',
}));

const enhance = compose(
  withState('state', 'setState', {
    collapsed: false,
    date: moment(),
    focused: false,
  }),
  mapProps(({ setState, ...rest }) => ({
    toggleCollapsed: () => setState(state => ({ collapsed: !state.collapsed })),
    handleDatePicked: (date) => setState(s => ({ ...s, date })),
    setState,
    ...rest,
  })),
  withTheme,
  pure
);

type TProps = {
  theme: Object,
  field: string,
  query: Object,
  title: string,
  state: {
    collapsed: boolean,
    date: any,
    focused: boolean,
  },
  setState: Function,
  style: Object,
  toggleCollapsed: Function,
  handleToChanged: Function,
  handleFromChanged: Function,
};

const DateFacet = (props: TProps) => {
  const dotField = props.field.replace(/__/g, '.');
  const query = {
    offset: 0,
    filters: {
      op: 'and',
      content: [{
        op: '>=',
        content: {
          field: dotField,
          value: [(props.state.date || moment()).format('YYYY-MM-DD')],
        },
      }],
    },
  };
  return (
    <Container style={{ ...props.style }}>
      <Header onClick={() => props.toggleCollapsed()}>
        <AngleIcon style={{ transform: `rotate(${props.state.collapsed ? 270 : 0}deg)` }} />
        {props.title}
      </Header>
      {!props.state.collapsed &&
      (<Row>
        <Label
          style={{
            borderRight: 0,
            borderRadius: '4px 0 0 4px',
          }}
          htmlFor={`since-${dotField}`}
        >
          since
        </Label>
        <SingleDatePicker
          id="date_input"
          date={props.state.date}
          displayFormat="YYYY-MM-DD"
          isOutsideRange={() => false}
          focused={props.state.focused}
          onDateChange={(date) => props.setState(s => ({ ...s, date }))}
          onFocusChange={({ focused }) => { props.setState(s => ({ ...s, focused })); }}
          enableOutsideDays
        />
        <GoLink
          merge="merge"
          query={query}
        >
          Go!
        </GoLink>
      </Row>
      )}
    </Container>
  );
};

export default enhance(DateFacet);
