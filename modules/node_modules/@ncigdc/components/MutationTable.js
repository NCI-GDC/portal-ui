// @flow
/* global API */

import React from 'react';
import { scaleOrdinal, schemeCategory10 } from 'd3';
import MutationLink from '@ncigdc/components/Links/MutationLink';

import EntityPageHorizontalTable from '@ncigdc/components/EntityPageHorizontalTable';
import CohortLink from '@ncigdc/components/Links/CohortLink';
import SurvivalIcon from '@ncigdc/theme/icons/SurvivalIcon';
import { tableToolTipHint } from '@ncigdc/theme/mixins';
import TogglableUl from '@ncigdc/uikit/TogglableUl';
import { Tooltip } from '@ncigdc/uikit/Tooltip';
import { getSurvivalCurves } from '@ncigdc/utils/survivalplot';
import { makeFilter } from '@ncigdc/utils/filters';
import Hidden from '@ncigdc/components/Hidden';

const impactBubble = {
  color: 'white',
  padding: '2px 5px',
  borderRadius: '8px',
  fontSize: '10px',
  fontWeight: 'bold',
  display: 'inline-block',
  width: '20px',
};

const impactColors = {
  HIGH: 'rgb(185, 36, 36)',
  MODERATE: 'rgb(193, 158, 54)',
  LOW: 'rgb(49, 161, 60)',
};

const colors = scaleOrdinal(schemeCategory10);

const styles = {
  impact: {
    HIGH: {
      ...impactBubble,
      backgroundColor: impactColors.HIGH,
    },
    MODERATE: {
      ...impactBubble,
      backgroundColor: impactColors.MODERATE,
    },
    LOW: {
      ...impactBubble,
      backgroundColor: impactColors.LOW,
    },
  },
};

type TProps = {
  numCasesAggByProject?: Object,
  projectId?: string,
  totalNumCases: number,
  showSurvivalPlot?: boolean,
  frequentMutations: Array<Object>,
  selectedSurvivalData: {
    id: string,
  },
  setSelectedSurvivalData: Function,
};
type TMutationTable = (props: TProps) => React.Element<*>;
const MutationTable: TMutationTable = ({
  numCasesAggByProject = {},
  projectId = '',
  totalNumCases = 0,
  showSurvivalPlot = false,
  frequentMutations = [],
  selectedSurvivalData = {},
  setSelectedSurvivalData = () => {},
} = {}) => (
  <EntityPageHorizontalTable
    headings={[
      {
        key: 'mutation_uuid',
        title: 'ID',
      },
      {
        key: 'genomic_dna_change',
        title: (
          <Tooltip
            Component={
              <span>
                Genomic DNA change, shown as <br />
                {'{chromosome}:g{start}{ref}>{tumor}'}
              </span>
            }
            style={tableToolTipHint()}
          >
            DNA Change
          </Tooltip>
        ),
        className: 'id-cell',
        style: { whiteSpace: 'pre-line' },
      },
      { key: 'mutation_subtype', title: 'Type' },
      { key: 'consequence_type', title: 'Consequences' },
      ...(projectId ? [{
        key: 'num_affected_cases_project',
        title: (
          <Tooltip
            Component={
              <span>
                Breakdown of Affected Cases in {projectId} <br />
                # of cases affected / # SSM tested cases
              </span>
            }
            style={tableToolTipHint()}
          >
            # Affected Cases<br />in {projectId} Case
          </Tooltip>
        ),
      }] : []),
      {
        key: 'num_affected_cases_all',
        title: (
          <Tooltip
            Component={
              <span>
                # of Cases where  mutation is observed filtered by current criteria <br />
                / # SSM tested cases portal wide.<br />
                Expand to see breakdown by project.
              </span>
            }
            style={tableToolTipHint()}
          >
            # Affected Cases<br /> Across all Projects
          </Tooltip>
        ),
      },
      {
        key: 'impact',
        title: 'Impact',
        style: { textAlign: 'center' },
      },
      ...(showSurvivalPlot ? [{
        title: 'Survival Analysis',
        key: 'survival_plot',
        style: { textAlign: 'center', width: '100px' },
      }] : []),
    ]}
    data={frequentMutations.map(x => ({
      ...x,
      mutation_uuid: <MutationLink id={x.ssm_id}>
        <Tooltip
          Component={
            <span>
              {x.ssm_id}
            </span>
          }
        >
          {x.ssm_id.substr(0, 8)}...
        </Tooltip>
      </MutationLink>,
      genomic_dna_change: <span>{x.genomic_dna_change}</span>,
      ...(projectId ? { num_affected_cases_project:
        `${x.num_affected_cases_project} / ${numCasesAggByProject[projectId]}
        (${((x.num_affected_cases_project / numCasesAggByProject[projectId]) * 100).toFixed(2)}%)`,
      } : {}),
      num_affected_cases_all: (
        <TogglableUl
          items={[
            /*  TODO: Commented out as part of PRTL-683
                Should be revert back once Exploration page is ready
            <CohortLink
              query={{
                searchTableTab: 'cases',
                filters: makeFilter([{ field: 'ssms.ssm_id', value: [x.ssm_id] }], false),
              }}
            >
              {x.num_affected_cases_all.toLocaleString()} / {totalNumCases.toLocaleString()} ({((x.num_affected_cases_all / totalNumCases) * 100).toFixed(2)}%)
            </CohortLink>,*/
            <span>
              {x.num_affected_cases_all.toLocaleString()} / {totalNumCases.toLocaleString()} ({((x.num_affected_cases_all / totalNumCases) * 100).toFixed(2)}%)
            </span>,
            ...Object.entries(x.num_affected_cases_by_project)
              .map(([k, v]) => `${k}: ${v} (${((v / totalNumCases) * 100).toFixed(2)}%)`),
          ]}
        />
      ),
      impact: !['LOW', 'MODERATE', 'HIGH'].includes(x.impact) ? null : (
        <Tooltip Component={x.impact}>
          <span
            style={styles.impact[x.impact]}
          >
            {x.impact.slice(0, 1)}
          </span>
        </Tooltip>
      ),
      ...(showSurvivalPlot ? {
        survival_plot: (
          <Tooltip Component={`Click icon to plot ${x.genomic_dna_change}`}>
            <button
              onClick={() => {
                if (x.ssm_id !== selectedSurvivalData.id) {
                  getSurvivalCurves({
                    field: 'gene.ssm.ssm_id',
                    value: x.ssm_id,
                    slug: x.ssm_id.substr(0, 8),
                    currentFilters: projectId ? { op: 'and', content: [{ op: '=', content: { field: 'cases.project.project_id', value: projectId } }] } : null,
                  })
                    .then(setSelectedSurvivalData);
                } else {
                  setSelectedSurvivalData({});
                }
              }}
            >
              <span
                style={{
                  color: colors(selectedSurvivalData.id === x.ssm_id ? 1 : 0),
                  cursor: 'pointer',
                }}
              >
                <SurvivalIcon />
                <Hidden>add to survival plot</Hidden>
              </span>
            </button>
          </Tooltip>
        ),
      } : {}),
    }))}
  />
);

export default MutationTable;
