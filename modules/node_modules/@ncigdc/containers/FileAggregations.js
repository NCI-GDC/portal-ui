/* @flow */
/* eslint jsx-a11y/no-static-element-interactions: 0, max-len: 1 */

import React from 'react';
import Relay from 'react-relay';

import _ from 'lodash';
import { compose, defaultProps } from 'recompose';

import Modal from '@ncigdc/uikit/Modal';
import TermAggregation from '@ncigdc/components/Aggregations/TermAggregation';
import SuggestionFacet from '@ncigdc/components/Aggregations/SuggestionFacet';
import FacetSelection from '@ncigdc/components/FacetSelection';
import FacetWrapper from '@ncigdc/components/FacetWrapper';

import { initialFileAggregationsVariables, repositoryFileAggregationsFragment } from '@ncigdc/utils/generated-relay-query-parts';
import withFacetSelection from '@ncigdc/utils/withFacetSelection';
import escapeForRelay from '@ncigdc/utils/escapeForRelay';

import type { TBucket } from '@ncigdc/components/Aggregations/types';

import { withTheme } from '@ncigdc/theme';
import FileIcon from '@ncigdc/theme/icons/File';
import { Row, Column } from '@ncigdc/uikit/Flex';

const storageKey = 'RepositoryFileAggregations.userSelectedFacets';
const presetFacetFields = [
  'data_category',
  'data_type',
  'experimental_strategy',
  'analysis.workflow_type',
  'data_format',
  'platform',
  'access',
];

const enhance = compose(
  withFacetSelection({
    storageKey,
    presetFacetFields,
    validFacetDocTypes: ['files'],
  })
);

const styles = {
  link: {
    textDecoration: 'underline',
    color: '#2a72a5',
  },
};

export type TProps = {
  aggregations: {
    access: { buckets: [TBucket] },
    data_category: { buckets: [TBucket] },
    data_format: { buckets: [TBucket] },
    data_type: { buckets: [TBucket] },
    experimental_strategy: { buckets: [TBucket] },
    platform: { buckets: [TBucket] },
    analysis__workflow_type: { buckets: [TBucket] },
  },
  theme: Object,

  suggestions: Array<Object>,
  setAutocomplete: Function,

  userSelectedFacets: Array<{|
    description: String,
    doc_type: String,
    field: String,
    full: String,
    type: "id" | "string" | "long",
  |}>,
  handleSelectFacet: Function,
  handleResetFacets: Function,
  presetFacetFields: Array<String>,
  shouldShowFacetSelection: Boolean,
  facetExclusionTest: Function,
};

export const FileAggregationsComponent = (props: TProps) => (
    <div>
      <div className="text-right" style={{ padding: '10px 15px', borderBottom: `1px solid ${props.theme.greyScale5}` }}>
        <a onClick={props.handleResetFacets} style={styles.link}>
        Reset
      </a>
      &nbsp;|&nbsp;
      <a onClick={() => props.setShouldShowFacetSelection(true)} style={styles.link}>
        Add a File Filter
      </a>

      </div>
      <Modal
        isOpen={props.shouldShowFacetSelection}
        style={{ content: { border: 0 } }}
      >
        <FacetSelection
          title="Add a File Filter"
          onSelect={props.handleSelectFacet}
          onRequestClose={() => props.setShouldShowFacetSelection(false)}
          excludeFacetsBy={props.facetExclusionTest}
        />
      </Modal>

      {
        props.userSelectedFacets.map((facet) => (
          <FacetWrapper
            key={facet.full}
            facet={facet}
            aggregation={props.aggregations[escapeForRelay(facet.field)]}
            relay={props.relay}
            onRequestRemove={() => props.handleRequestRemoveFacet(facet)}
            style={{ borderBottom: `1px solid ${props.theme.greyScale5}` }}
          />
        ))
      }
      <SuggestionFacet
        title="File"
        doctype="files"
        fieldNoDoctype="file_id"
        placeholder="Search for File Id"
        hits={props.suggestions}
        setAutocomplete={() => { /* autcomplete turned off for now */ }}
        dropdownItem={(x) => (
          <span style={{ display: 'flex' }}>
            <Column>
              <FileIcon style={{ paddingRight: '1rem', paddingTop: '1rem' }} />
            </Column>
            <Column>
              <span style={{ fontWeight: 'bold' }}>
                {x.node.file_id}
              </span>
              {x.node.file_name}
            </Column>
          </span>
        )}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'data_category'}
        title="Data Category"
        buckets={props.aggregations.data_category.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'data_type'}
        title="Data Type"
        buckets={props.aggregations.data_type.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'experimental_strategy'}
        title="Experimental Strategy"
        buckets={props.aggregations.experimental_strategy.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'analysis__workflow_type'}
        title="Workflow Type"
        buckets={props.aggregations.analysis__workflow_type.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'data_format'}
        title="Data Format"
        buckets={props.aggregations.data_format.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'platform'}
        title="Platform"
        buckets={props.aggregations.platform.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'access'}
        title="Access"
        buckets={props.aggregations.access.buckets}
      />
    </div>
  );

export const FileAggregationsQuery = {
  initialVariables: _.mapValues(initialFileAggregationsVariables, (value, key) => {
    const userSelectedFacetsFromStorage = JSON.parse(window.localStorage.getItem(storageKey)) || [];
    const escapedFieldsToShow = presetFacetFields.concat(userSelectedFacetsFromStorage.map(x => x.field)).filter(Boolean).map(escapeForRelay);
    return value || _.includes(escapedFieldsToShow, key.replace(/^shouldShow_/, ''));
  }),
  fragments: {
    aggregations: repositoryFileAggregationsFragment,
  },
};

const FileAggregations = Relay.createContainer(
  enhance(withTheme(FileAggregationsComponent)),
  FileAggregationsQuery
);

export default FileAggregations;
