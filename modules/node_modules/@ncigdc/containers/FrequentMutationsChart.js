// @flow

import React from 'react';
import Relay from 'react-relay';
import withSize from '@ncigdc/utils/withSize';
import { isEqual } from 'lodash';
import { compose, withPropsOnChange } from 'recompose';
import withRouter from '@ncigdc/utils/withRouter';
import { parseFilterParam } from '@ncigdc/utils/uri';
import { makeFilter } from '@ncigdc/utils/filters';
import { withTheme } from '@ncigdc/theme';
import { Row, Column } from '@ncigdc/uikit/Flex';
import Loader from '@ncigdc/uikit/Loaders/Loader';
import DownloadVisualizationButton from '@ncigdc/components/DownloadVisualizationButton';
import BarChart from '@ncigdc/components/Charts/BarChart';
import wrapSvg from '@ncigdc/utils/wrapSvg';
import VisualizationHeader from '@ncigdc/components/VisualizationHeader';

const TITLE = 'Distribution of Most Frequent Mutations';

const FrequentMutationsChartComponent = compose(
  withRouter,
  withPropsOnChange(
    (props, nextProps) => ['query', 'projectId', 'defaultFilters']
      .some((propName) => !isEqual(props[propName], nextProps[propName])),
    ({ relay, query, defaultFilters }) => {
      relay.setVariables({
        fetchData: true,
        fmChart_filters: parseFilterParam(
          query.fmChart_filters,
          defaultFilters || null
        ),
      });
    }
  ),
  withTheme,
  withSize()
)(({
  projectId = '',
  theme,
  showSurvivalPlot,
  size: {
    width,
  },
  cohort: { ssms, cases },
  push,
}) => {
  const chartMargin = { top: 30, right: 50, bottom: 105, left: 40 };

  const maxBars = 20;
  const bandWidth = (
    (width - chartMargin.right - chartMargin.left) /
    (maxBars + 1) / (showSurvivalPlot ? 1 : 2)
  ) * 0.7;

  const numCasesAggByProject = cases.aggregations.project__project_id.buckets.reduce((acc, b) => ({
    ...acc,
    [b.key]: b.doc_count,
  }), {});

  return (
    <Loader
      loading={!ssms}
      height="400px"
    >
      {ssms && !!ssms.hits.edges.length && (
        <Column>
          <VisualizationHeader
            title={TITLE}
            style={{ width: showSurvivalPlot ? '100%' : '50%' }}
            buttons={[
              <DownloadVisualizationButton
                key="download"
                svg={() => wrapSvg({ selector: '#mutation-chart svg', title: TITLE })}
                data={ssms.hits.edges.map(x => x.node)}
                slug="bar-chart"
                noText
                tooltipHTML="Download image or data"
              />,
            ]}
          />
          <Row id="mutation-chart" style={{ padding: '2rem 2rem 0' }}>
            <BarChart
              bandwidth={bandWidth}
              data={
                ssms.hits.edges // eslint-disable-line fp/no-mutating-methods
                  .map(({ node: { ssm_id: ssmId, score = 0, filteredOccurrences, allOccurrences } }) => ({
                    label: `${ssmId.substr(0, 8)}...`,
                    value: projectId ? filteredOccurrences.hits.total : score,
                    tooltip: projectId
                      ? (
                        <span>
                          <b>{ssmId}</b><br />
                          <div>
                            {filteredOccurrences.hits.total.toLocaleString()}
                            &nbsp;Case{filteredOccurrences.hits.total > 1 ? 's' : ''}
                            &nbsp;affected in {projectId}
                          </div>
                          <div>
                            {filteredOccurrences.hits.total.toLocaleString()}
                            / {(numCasesAggByProject[projectId] || 0).toLocaleString()}
                            &nbsp;({
                              ((filteredOccurrences.hits.total / numCasesAggByProject[projectId]) * 100).toFixed(2)
                            }%)
                          </div>
                        </span>
                      )
                      : (
                        <span><b>{ssmId}</b><br />
                          <div>{score.toLocaleString()} Case{score > 1 ? 's ' : ' '}
                          &nbsp;affected in all projects</div>
                          <div>{score.toLocaleString()} / {cases.hits.total.toLocaleString()}
                          &nbsp;({((allOccurrences.hits.total / cases.hits.total) * 100).toFixed(2)}%)</div>
                        </span>
                      ),
                    onClick: () => push(`/ssms/${ssmId}`),
                  }))
                  .sort((a, b) => b.value - a.value)
              }
              margin={chartMargin}
              height={300}
              yAxis={{ title: '# Affected Cases' }}
              styles={{
                xAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                yAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                bars: { fill: theme.secondary },
                tooltips: {
                  fill: '#fff',
                  stroke: theme.greyScale4,
                  textFill: theme.greyScale3,
                },
              }}
            />
          </Row>
        </Column>
      )}
    </Loader>
  );
});

export const FrequentMutationsChartQuery = {
  initialVariables: {
    fetchData: false,
    fmChart_filters: null,
    score: 'occurrence.case.project.project_id',
    ssmTested: makeFilter([{
      field: 'available_variation_data',
      value: 'ssm',
    }], false),
  },
  fragments: {
    cohort: () => Relay.QL`
      fragment on Cohort {
        cases {
          aggregations(filters: $ssmTested) {
            project__project_id {
              buckets {
                doc_count
                key
              }
            }
          }
          hits(first: 0) { total }
        }
        ssms @include(if: $fetchData) {
          hits (first: 20 filters: $fmChart_filters, score: $score) @include(if: $fetchData) {
            total
            edges {
              node {
                score
                genomic_dna_change
                ssm_id
                filteredOccurrences: occurrence {
                  hits(first: 1 filters: $fmChart_filters) {
                    total
                  }
                }
                allOccurrences: occurrence {
                  hits(first: 1) {
                    total
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const FrequentMutationsChart = Relay.createContainer(
  FrequentMutationsChartComponent,
  FrequentMutationsChartQuery
);

export default FrequentMutationsChart;
