// @flow
/* global API */

import React from 'react';
import _ from 'lodash';
import { compose, withState, lifecycle } from 'recompose';
import { css, insertRule } from 'glamor';
import { connect } from 'react-redux';
import Color from 'color';

import sapien from '@oncojs/sapien';

import { Row, Column } from '@ncigdc/uikit/Flex';

import { zDepth1 } from '@ncigdc/theme/mixins';
import dataPortalImg from '@ncigdc/theme/images/GDC-App-data-portal-blue.svg';
import websiteImg from '@ncigdc/theme/images/GDC-App-website-blue.svg';
import cbioImg from '@ncigdc/theme/images/icon-cBioPortal.svg';

import ProjectsLink from './Links/ProjectsLink';
import CohortLink from './Links/CohortLink';
import RepositoryLink from './Links/RepositoryLink';
import PortalSummary from './PortalSummary';
import HomeSearch from './HomeSearch';

type TTransformChartData = ({ hits: Array<Object> }) => Array<Object>;
const transformChartData: TTransformChartData = ({ hits }) => {
  if (!hits) return [];

  // reduce the array keyed on projectID
  const primarySites = hits.reduce((primarySiteData, project) => {
    const primarySite = project.primary_site;

    if (primarySite) {
      if (!_.isArray(primarySiteData[primarySite])) {
        primarySiteData[primarySite] = [];
      }

      primarySiteData[primarySite].push(project);
    }

    return primarySiteData;
  }, {});

  const primarySiteIDs = _.keys(primarySites);

  if (!primarySiteIDs.length) return [];

  const firstPassProjectData = primarySiteIDs.map(pID => {
    const primarySiteData = primarySites[pID];
    let caseCount = 0;
    let fileCount = 0;

    for (let i = 0; i < primarySiteData.length; i++) {
      caseCount += +(_.get(primarySiteData[i], 'summary.case_count', 0));
      fileCount += +(_.get(primarySiteData[i], 'summary.file_count', 0));
    }

    /* _key and _count are required data properties for the marked bar chart */
    return { _key: pID, values: primarySiteData, _count: caseCount, fileCount };
  })
    .filter(d => d._count > 0)
    .sort((a, b) => b._count - a._count);

  return firstPassProjectData.map(primarySite => {
    const dataStack : any = {};

    let primarySiteTotal = 0;

    _.assign(dataStack, primarySite);

    const sortedProjects = primarySite.values.sort((a, b) => a.summary.case_count - b.summary.case_count);

    dataStack.stacks = sortedProjects.map(project => {
      // Make sure previous site y1 > y0
      if (primarySiteTotal > 0) {
        primarySiteTotal++;
      }

      const newPrimarySiteTotal = primarySiteTotal + project.summary.case_count;

      const stack = {
        _key: primarySite._key,
        primarySite: primarySite._key,
        y0: primarySiteTotal,
        y1: newPrimarySiteTotal,
        projectID: project.project_id,
        caseCount: project.summary.case_count,
        fileCount: project.summary.file_count,
      };

      primarySiteTotal = newPrimarySiteTotal;

      return stack;
    });

    dataStack._maxY = primarySiteTotal;

    return dataStack;
  });
};

const center = {
  alignItems: 'center',
  justifyContent: 'center',
};

const styles = {
  container: {
    background:
      'radial-gradient(ellipse at center, rgba(147,206,222,1) 0%, rgba(117,189,209,1) 48%, rgba(73,129,189,1) 100%)',
  },
  insideContainer: {
    flex: 1,
    padding: '3rem',
    height: '50rem',
    position: 'relative',
  },
  subTitle: {
    color: 'white',
  },
  title: {
    color: 'white',
    fontSize: '3rem',
  },
  bigButton: spec => css({
    textDecoration: 'none !important',
    color: 'white !important',
    display: 'inline-block',
    width: '17.75rem',
    padding: '0.5rem 0.5rem',
    textAlign: 'left',
    fontSize: '1.5rem',
    margin: '0rem 0rem',
    marginTop: '1rem',
    height: '4rem',
    borderRadius: '6px',
    transition: '0.25s ease all',
    ...spec,
    ':hover': {
      backgroundColor: Color(spec.backgroundColor).lighten(0.2).rgbString(),
    },
  }),
  bigButtonIcon: {
    display: 'inline-block',
    backgroundColor: 'rgba(255, 255, 255, 0.35)',
    borderRadius: '0.5rem',
    padding: '1rem 1.5rem',
    fontSize: '1rem',
  },
  smallButton: {
    textDecoration: 'none',
    padding: '0.2rem 0.5rem',
    textAlign: 'center',
    backgroundColor: '#30b3cb',
    cursor: 'pointer',
    backgroundImage: 'none',
    border: '1px solid transparent',
    whiteSpace: 'nowrap',
    fontSize: '14px',
    lineHeight: 1.4,
    borderRadius: '4px',
    color: 'white',
    width: '10rem',
    display: 'inline-block',
    marginLeft: '1.3rem',
  },
  summaryBoxContainer: {
    ...zDepth1,
    marginTop: '2rem',
    backgroundColor: 'white',
    borderTop: '3px solid rgb(37, 208, 182)',
  },
  dataCountBox: {
    padding: '1.5rem',
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  dataCountBoxTitle: {
    justifyContent: 'center',
    textTransform: 'uppercase',
    marginBottom: '0.5rem',
  },
  gdcAppsRow: {
    margin: '2rem 0',
    justifyContent: 'space-around',
    width: '100vw',
    padding: '0 14rem',
  },
  gdcAppsLink: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    textDecoration: 'none',
  },
};

const initialState = {
  humanBodyLoading: true,
};

const Home = compose(
  withState('state', 'setState', initialState),
  lifecycle({
    async componentDidMount(): Promise<*> {
      const { setState } = this.props; // eslint-disable-line

      setState(state => ({ ...state, humanBodyLoading: false }));

      setTimeout(() => {
        const root = document.getElementById('human-body-root');
        sapien.default({
          // clickHandler: this.setFilters.bind(this),
          data: transformChartData({
            hits: this.props.humanBodyData,
          })
            .sort((a, b) => a._key > b._key ? 1 : -1),
          selector: '#human-body-root',
          width: 380,
          height: 435,
          offsetLeft: root.offsetLeft,
          offsetTop: root.offsetTop,
          primarySiteKey: '_key',
          caseCountKey: '_count',
          fileCountKey: 'fileCount',
        });
      });
    },
  }),
  connect(state => ({ config: state.versionInfo }))
)(
({ state: { humanBodyLoading }, config, ...props }) => (
  <Column>
    <Row style={styles.container}>
      <div style={styles.insideContainer}>
        <div style={{ ...styles.subTitle, fontSize: '2rem' }}>Harmonized Cancer Datasets</div>
        <div style={styles.title}>Genomic Data Commons Data Portal</div>
        <div style={{ ...styles.subTitle, margin: '1rem 0' }}><em>Get Started by Exploring:</em></div>
        <Row>
          <ProjectsLink
            className={styles.bigButton({
              backgroundColor: '#1c7960',
            })}
            tabIndex="0"
          >
            <i style={styles.bigButtonIcon} className="icon-gdc-projects" />
            &nbsp; <span data-translate>Projects</span>
          </ProjectsLink>
          <CohortLink
            className={styles.bigButton({
              backgroundColor: '#753685',
            })}
            style={{
              marginLeft: '2rem',
            }}
            tabIndex="0"
          >
            <i style={styles.bigButtonIcon} className="icon-gdc-data" />
            &nbsp; <span data-translate>Cohort</span>
          </CohortLink>
          <RepositoryLink
            className={styles.bigButton({
              backgroundColor: '#6668c3',
            })}
            style={{
              marginLeft: '2rem',
            }}
            tabIndex="0"
          >
            <i style={styles.bigButtonIcon} className="fa fa-database" />
            &nbsp; <span data-translate>Repository</span>
          </RepositoryLink>
        </Row>

        <HomeSearch />

        <PortalSummary
          dataRelease={config.data_release}
          projectsCountData={props.projectsCountData}
          primarySitesCountData={props.primarySitesCountData}
          casesCountData={props.casesCountData}
          filesCountData={props.filesCountData}
          genesCountData={props.genesCountData}
          ssmsCountData={props.ssmsCountData}
        />
      </div>
      {humanBodyLoading &&
        <Column style={{ ...styles.insideContainer, ...center }}>
          <Row style={{ color: 'white', fontSize: '1.2em', marginBottom: '1rem' }}>
            Loading, please wait...
          </Row>
          <span style={{ color: 'white' }} className="fa fa-spinner fa-spin fa-2x" />
        </Column>
      }
      {!humanBodyLoading &&
        <div id="human-body-root" style={styles.insideContainer} />
      }
    </Row>
    <Column style={{ paddingTop: '7rem', alignItems: 'center' }}>
      <Row style={{ fontSize: '1.3em' }}>GDC Applications</Row>
      <Row style={{ textAlign: 'center' }}>
        The GDC Data Portal is a robust data-driven platform that allows cancer<br />
        researchers and bioinformaticians to search and download cancer data for
        analysis. The GDC applications include:
      </Row>
      <Row style={styles.gdcAppsRow}>
        <span
          title="Data Portal"
          style={styles.gdcAppsLink}
        >
          <img
            width="35px"
            src={dataPortalImg}
            className="icon icon-gdc-cbio-portal home"
            alt="GDC Data Portal"
          />
          <p>Data Portal</p>
        </span>
        <a
          href="https://gdc.nci.nih.gov/"
          target="_blank"
          rel="noopener noreferrer"
          title="GDC Website"
          style={styles.gdcAppsLink}
        >
          <img
            width="35px"
            src={websiteImg}
            className="icon icon-gdc-cbio-portal home"
            alt="GDC Website"
          />
          <p>Website</p>
        </a>
        <a
          href="https://gdc.nci.nih.gov/access-data/gdc-data-transfer-tool"
          target="_blank"
          rel="noopener noreferrer"
          title="GDC Data Transfer Tool"
          style={styles.gdcAppsLink}
        >
          <span
            className="icon icon-gdc-data-transer-tool"
            style={{ fontSize: '29px', marginBottom: '5px' }}
          >
            {_.range(0, 9).map(x => <span key={x} className={`path${x}`} />)}
          </span>
          <p>Data Transfer Tool</p>
        </a>
        <a
          href="https://gdc.nci.nih.gov/developers/gdc-application-programming-interface-api"
          target="_blank"
          rel="noopener noreferrer"
          title="GDC API"
          style={styles.gdcAppsLink}
        >
          <span
            className="icon icon-gdc-portal-api"
            style={{ fontSize: '29px', marginBottom: '5px' }}
          >
            {_.range(0, 11).map(x =>
              <span key={x} className={`path${x}`} />
            )}
          </span>
          <p>API</p>
        </a>
        <a
          href="https://gdc-portal.nci.nih.gov/submission/"
          target="_blank"
          rel="noopener noreferrer"
          title="GDC Submission Portal"
          style={styles.gdcAppsLink}
        >
          <span
            className="icon icon-gdc-submission-portal"
            style={{ fontSize: '29px', marginBottom: '5px' }}
          >
            {_.range(0, 11).map(x => <span key={x} className={`path${x}`} />)}
          </span>
          <p>Data Submission Portal</p>
        </a>
        <a
          href="https://gdc-docs.nci.nih.gov/"
          target="_blank"
          rel="noopener noreferrer"
          title="GDC Docs"
          style={styles.gdcAppsLink}
        >
          <span
            className="icon icon-gdc-docs"
            style={{ fontSize: '29px', marginBottom: '5px' }}
          >
            {_.range(0, 15).map(x => <span key={x} className={`path${x}`} />)}
          </span>
          <p>Documentation</p>
        </a>
        <a
          href="https://gdc-portal.nci.nih.gov/legacy-archive"
          target="_blank"
          rel="noopener noreferrer"
          title="GDC Legacy Archive"
          style={styles.gdcAppsLink}
        >
          <span
            className="icon icon-gdc-legacy-archive"
            style={{ fontSize: '29px', marginBottom: '5px' }}
          >
            {_.range(0, 11).map(x => <span key={x} className={`path${x}`} />)}
          </span>
          <p>Legacy Archive</p>
        </a>
        <a
          href="https://gdc-cbioportal.nci.nih.gov/"
          title="GDC cBio Portal"
          target="_blank"
          rel="noopener noreferrer"
          className="menu-item"
          style={styles.gdcAppsLink}
        >
          <img
            width="35px"
            src={cbioImg}
            className="icon icon-gdc-cbio-portal home"
            alt="GDC cBio Portal"
          />
          <p>GDC cBio Portal</p>
        </a>
      </Row>
    </Column>
  </Column>
));

export default Home;

/*----------------------------------------------------------------------------*/

insertRule(`
  #human-body-highlights {
    position: relative;
    top: -20px;
  }
  #human-body-highlights > svg {
    position: absolute;
    cursor: pointer;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  #human-body-root {
    position: relative;
    left: -40px;
  }
  #human-body-root .chart {
    position: absolute;
    left: 312px;
    margin-top: 20px;
  }
  #human-body-svg-container {
    position: absolute;
  }
  #title {
    color: white;
    font-size: 1.1em;
    position: absolute;
    width: 153px;
    left: 431px;
    top: -5px;
  }
  #male {
    position: absolute;
  }
  #female {
    left: 107px;
    position: absolute;
  }
  #female-organs {
    position: absolute;
    top: -15px;
    left: 151px;
    width: 123px;
  }
  #male-organs {
    position: absolute;
    height: 34px;
    width: 25px;
    top: 255px;
    left: 111px;
  }
  #Head-and-Neck {
    height: 138px;
    width: 102px;
    top: -1px;
    left: 156px;
  }
  #Brain {
    height: 35px;
    width: 50px;
    top: 20px;
    left: 183px;
  }
  #Lung {
    height: 55px;
    width: 37px;
    top: 133px;
    left: 173px;
  }
  #Pleura {
    height: 26px;
    width: 37px;
    top: 161px;
    left: 173px;
  }
  #Lymph-Nodes {
    height: 70px;
    width: 45px;
    top: 83px;
    left: 159px;
  }
  #Soft-Tissue {
    height: 369px;
    width: 128px;
    top: 89px;
    left: 138px;
  }
  #Eye {
    height: 20px;
    width: 20px;
    top: 39px;
    left: 205px;
  }
  #Breast {
    height: 40px;
    width: 40px;
    top: 137px;
    left: 207px;
  }
  #Kidney {
    height: 21px;
    width: 15px;
    top: 198px;
    left: 218px;
  }
  #Adrenal-Gland {
    height: 12px;
    width: 14px;
    top: 197px;
    left: 219px;
  }
  #Bile-Duct {
    height: 28px;
    width: 11px;
    top: 190px;
    left: 195px;
  }
  #Pancreas {
    height: 21px;
    width: 45px;
    top: 191px;
    left: 183px;
  }
  #Bladder {
    height: 16px;
    width: 25px;
    top: 258px;
    left: 194px;
  }
  #Prostate {
    height: 25px;
    width: 30px;
    top: 269px;
    left: 103px;
  }
  #Testis {
    height: 23px;
    width: 15px;
    top: 288px;
    left: 124px;
  }
  #Uterus {
    height: 23px;
    width: 21px;
    top: 250px;
    left: 196px;
  }
  #Cervix {
    height: 14px;
    width: 15px;
    top: 258px;
    left: 199px;
  }
  #Ovary {
    height: 13px;
    width: 13px;
    top: 249px;
    left: 214px;
  }
  #Colorectal {
    height: 95px;
    width: 87px;
    top: 210px;
    left: 165px;
  }
  #Liver {
    height: 42px;
    width: 47px;
    top: 173px;
    left: 188px;
  }
  #Stomach {
    height: 43px;
    width: 45px;
    top: 166px;
    left: 189px;
  }
  #Blood {
    height: 153px;
    width: 35px;
    top: 243px;
    left: 211px;
  }
  #Bone {
    height: 89px;
    width: 14px;
    top: 383px;
    left: 212px;
  }
  #Bone-Marrow {
    height: 114px;
    width: 30px;
    top: 371px;
    left: 204px;
  }
  #Skin {
    height: 227px;
    width: 57px;
    top: 95px;
    left: 221px;
  }
  #Nervous-System {
    height: 279px;
    width: 56px;
    top: 222px;
    left: 159px;
  }
  #Thyroid {
    height: 16px;
    width: 18px;
    top: 90px;
    left: 198px;
  }
  #Thymus {
    height: 23px;
    width: 17px;
    top: 147px;
    left: 200px;
  }
  #Esophagus {
    height: 57px;
    width: 20px;
    top: 86px;
    left: 197px;
  }
`);
