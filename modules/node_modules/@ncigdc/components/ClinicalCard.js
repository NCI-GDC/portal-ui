// @flow

import React from 'react';
import { compose, withState } from 'recompose';
import urlJoin from 'url-join';

import Card from '@ncigdc/uikit/Card';
import Tabs from '@ncigdc/uikit/Tabs';
import SideTabs from '@ncigdc/uikit/SideTabs';
import Table, { Tr, Td, Th } from '@ncigdc/uikit/Table';
import { withTheme } from '@ncigdc/theme';
import Row from '@ncigdc/uikit/Flex/Row';
import DownloadButton from '@ncigdc/components/DownloadButton';
import { visualizingButton } from '@ncigdc/theme/mixins';
import EntityPageVerticalTable from '@ncigdc/components/EntityPageVerticalTable';

declare var API: string;
const ClinicalCard = ({
  p: {
    case_id: caseId,
    diagnoses: {
      hits: {
        edges: diagnoses = [],
      },
    },
    family_histories: familyHistory = [],
    demographic = {},
    exposures: {
      hits: {
        edges: exposures = [],
        total: totalExposures,
      },
    },
  },
  activeTab,
  setTab,
  theme,
}: {
  p: Object,
  activeTab: number,
  setTab: Function,
  theme: Object,
}) => (
  <Card
    style={{ flex: 1 }}
    title={
      <Row style={{ justifyContent: 'space-between' }}>
        <span>Clinical</span>
        <DownloadButton
          style={visualizingButton}
          filename={`clinical.case-${caseId}`}
          url={urlJoin(API, 'cases')}
          activeText="Processing"
          inactiveText="Export"
          filters={{
            op: 'and',
            content: [
              {
                op: 'in',
                content: {
                  field: 'cases.case_id',
                  value: [caseId],
                },
              },
            ],
          }}
          fields={['case_id']}
          dataExportExpands={['demographic', 'diagnoses', 'diagnoses.treatments', 'family_histories', 'exposures']}
        />
      </Row>
    }
  >
    <Tabs
      contentStyle={{ border: 'none' }}
      onTabClick={i => setTab(() => i)}
      tabs={[
        <p key="Demographic">Demographic</p>,
        <p key="Diagnoses / Treatment">Diagnoses / Treatments ({diagnoses.length})</p>,
        <p key="Family Histories">Family Histories ({familyHistory.length})</p>,
        <p key="Exposures">Exposures ({totalExposures})</p>,
      ]}
      activeIndex={activeTab}
    >
      {activeTab === 0 &&
        <EntityPageVerticalTable
          thToTd={[
            { th: 'ID', td: demographic.demographic_id },
            { th: 'Ethnicity', td: demographic.ethnicity },
            { th: 'Gender', td: demographic.gender },
            { th: 'Race', td: demographic.race },
            { th: 'Year of Birth', td: demographic.year_of_birth },
            { th: 'Year of Death', td: demographic.year_of_death },
          ]}
          style={{ flex: 1 }}
        />
      }
      {activeTab === 1 &&
        <div>
          {!!diagnoses.length &&
            <SideTabs
              contentStyle={{ border: 'none' }}
              tabs={diagnoses.map(x => <p key={x.node.diagnosis_id}>{x.node.diagnosis_id}</p>)}
              tabContent={diagnoses.map(d => d.node).map(x =>
                <span key={x.diagnosis_id}>
                  <EntityPageVerticalTable
                    thToTd={[
                      { th: 'ID', td: x.diagnosis_id },
                      { th: 'Classification of Tumor', td: x.classification_of_tumor },
                      { th: 'Alcohol Intensity', td: x.alcohol_intensity },
                      { th: 'Age at Diagnosis', td: x.age_at_diagnosis },
                      { th: 'Days to Birth', td: x.days_to_birth },
                      { th: 'Days to Death', td: x.days_to_death },
                      { th: 'Days to Last Follwup', td: x.days_to_last_followup },
                      {
                        th: 'Days to Last Known Disease Status',
                        td: x.days_to_last_known_disease_status,
                      },
                      { th: 'Days to Recurrence', td: x.days_to_recurrence },
                      { th: 'Last Known Disease Status', td: x.last_known_disease_status },
                      { th: 'Morphology', td: x.morphology },
                      { th: 'Primary Diagnosis', td: x.primary_diagnosis },
                      { th: 'Prior Malignancy', td: x.prior_malignancy },
                      { th: 'Progression or Recurrence', td: x.progression_or_recurrence },
                      { th: 'Site of Resection of Biopsy', td: x.site_of_resection_or_biopsy },
                      { th: 'Tissue or Organ of Origin', td: x.tissue_or_organ_of_origin },
                      { th: 'Tumor Grade', td: x.tumor_grade },
                      { th: 'Tumor Stage', td: x.tumor_stage },
                      { th: 'Vital Status', td: x.vital_status },
                    ]}
                    style={{ flex: 1 }}
                  />
                  <div
                    style={{
                      padding: '1rem',
                      color: theme.greyScale7,
                      fontSize: '2rem',
                      lineHeight: '1.4em',
                    }}
                  >
                    Treatments
                  </div>
                  {x.treatments && !!x.treatments.length &&
                    <Table
                      headings={[
                        <Th key="id">ID</Th>,
                        <Th key="agents">Therapeutic Agents</Th>,
                        <Th key="intent_type">Treatment Intent Type</Th>,
                        <Th key="therapy">Treatment or Therapy</Th>,
                        <Th key="days">Days to Treatment</Th>,
                      ]}
                      body={
                        <tbody>
                          {x.treatments.map(t =>
                            <Tr key={t.treatment_id}>
                              <Td>{t.treatment_id || '--'}</Td>
                              <Td>{t.therapeutic_agents || '--'}</Td>
                              <Td>{t.treatment_intent_type || '--'}</Td>
                              <Td>{t.treatment_or_therapy || '--'}</Td>
                              <Td>{t.days_to_treatment || '--'}</Td>
                            </Tr>
                          )}
                        </tbody>
                      }
                    />
                  }
                  {(!x.treatments || !x.treatments.length) &&
                    <div
                      style={{ paddingLeft: '2rem' }}
                    >
                      No Treatments Found.
                    </div>
                  }
                </span>
              )}
            />
          }
          {!diagnoses.length &&
            <h3
              style={{ paddingLeft: '2rem' }}
            >
              No Diagnoses Found.
            </h3>
          }
        </div>
      }
      {activeTab === 2 &&
        <div>
          {!!familyHistory.length &&
            <SideTabs
              contentStyle={{ border: 'none' }}
              tabs={familyHistory.map(x =>
                <p key={x.family_history_id}>{x.family_history_id}</p>
              )}
              tabContent={familyHistory.map(x =>
                <EntityPageVerticalTable
                  key={x.family_history_id}
                  thToTd={[
                    { th: 'ID', td: x.family_history_id },
                    { th: 'Relationship Age at Diagnosis', td: x.relationship_age_at_diagnosis },
                    { th: 'Relationship Gender', td: x.relationship_gender },
                    { th: 'Relationship Primary Diagnosis', td: x.relationship_primary_diagnosis },
                    { th: 'Relationship Type', td: x.relationship_type },
                    { th: 'Relative with Cancer History', td: x.relative_with_cancer_history },
                  ]}
                />
              )}
            />
          }
          {!familyHistory.length &&
            <h3
              style={{ paddingLeft: '2rem' }}
            >
              No Family Histories Found.
            </h3>
          }
        </div>
      }
      {activeTab === 3 &&
        <div>
          {!!totalExposures &&
            <SideTabs
              contentStyle={{ border: 'none' }}
              tabs={exposures.map(x =>
                <p key={x.node.exposure_id}>{x.node.exposure_id}</p>
              )}
              tabContent={exposures.map(x =>
                <EntityPageVerticalTable
                  key={x.node.exposure_id}
                  thToTd={[
                    { th: 'ID', td: x.node.exposure_id },
                    { th: 'Alcohol History', td: x.node.alcohol_history },
                    { th: 'Alcohol Intensity', td: x.node.alcohol_intensity },
                    { th: 'BMI', td: x.node.bmi },
                    { th: 'Cigarettes per Day', td: x.node.cigarettes_per_day },
                    { th: 'Height', td: x.node.height },
                    { th: 'Weight', td: x.node.weight },
                    { th: 'Years Smoked', td: x.node.years_smoked },
                  ]}
                />
              )}
            />
          }
          {!totalExposures &&
            <h3
              style={{ paddingLeft: '2rem' }}
            >
              No Exposures Found.
            </h3>
          }
        </div>
      }
    </Tabs>
  </Card>
);

export default compose(
  withState('activeTab', 'setTab', 0),
  withTheme
)(ClinicalCard);
