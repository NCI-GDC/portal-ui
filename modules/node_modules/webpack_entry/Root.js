/* @flow */
/* eslint better/no-ifs:0, import/no-commonjs:0, fp/no-class:0 */
/* global LEGACY:false, API:false */

import React from 'react';
import Relay from 'react-relay';
// import { BrowserRouter as Router } from 'react-router-dom';
import { BrowserRouter } from 'react-router-dom'


console.log(123123123, BrowserRouter)

// import { stringify } from 'query-string';

// console.log(123, Router)

import { viewerQuery } from '@ncigdc/routes/queries';

const stringifyQuery = (query) => (
  stringify(query, { strict: false })
);

// $FlowIgnore
const Container = LEGACY ? require('./Legacy').default : require('./Portal').default;

// Don't inject everytime file is hot-reloaded
if (!Relay.Store._storeData._networkLayer._implementation) {
  Relay.injectNetworkLayer(
    // $FlowIgnore
    new Relay.DefaultNetworkLayer(`${API}graphql`)
  );
}

class Route extends Relay.Route {
  static routeName = 'RootRoute';
  static queries = viewerQuery;
}

const Root = (props: mixed) => ( <div />
  // <Router>
  //   <Relay.Renderer
  //     Container={Container}
  //     queryConfig={new Route(props)}
  //     environment={Relay.Store}
  //   />
  // </Router>
);

export default Root;
