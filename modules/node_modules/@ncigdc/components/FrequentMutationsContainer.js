// @flow

import React from 'react';
import { isEqual, startCase, truncate } from 'lodash';
import { withState, withProps, lifecycle, compose } from 'recompose';

import GeneLink from '@ncigdc/components/Links/GeneLink';
import FrequentMutations from './FrequentMutations';
import { PaginationContainer } from '../uikit/Pagination';

declare var API: string;

const impactColors = {
  HIGH: 'rgb(185, 36, 36)',
  MODERATE: 'rgb(193, 158, 54)',
  LOW: 'rgb(49, 161, 60)',
};

function mapData(data: Array<Object>, projectId: string): Array<Object> {
  return data.map((hit) => {
    const { transcript } = hit.consequence.find(c => c.transcript.is_canonical) || {};
    const { annotation = {}, consequence_type = '', aa_change, gene } = transcript || {};
    const { symbol } = gene || {};
    const impact = annotation.impact;

    return {
      ...hit,
      score: hit._score,
      num_affected_cases_all: hit.occurrence.length,
      num_affected_cases_project: hit.occurrence.filter(o =>
        o.case.project.project_id === projectId
      ).length,
      num_affected_cases_by_project: hit.occurrence.reduce((acc, o) => ({
        ...acc,
        [o.case.project.project_id]: acc[o.case.project.project_id] ? acc[o.case.project.project_id] + 1 : 1,
      }), {}),
      impact,
      consequence_type: (
        <span>
          <b>{startCase(consequence_type.replace('variant', ''))}</b>
          <span style={{ marginLeft: '5px' }}>
            {symbol && <GeneLink id={symbol}>{symbol}</GeneLink>}
          </span>
          <span
            style={{
              marginLeft: '5px',
              color: impactColors[impact] || 'inherit',
            }}
          >
            {truncate(aa_change)}
          </span>
        </span>
      ),
    };
  });
}

export default
compose(
  withState('state', 'setState', { frequentMutationsTable: [], frequentMutationsChart: [] }),
  withProps({
    fetchBarChart: async ({ currentFilters, projectId, setState }) => {
      const url = `${API}analysis/frequent_mutations_by_project`;
      const filters = !!currentFilters.content.length ? currentFilters : null;

      const res = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...(filters && { filters: JSON.stringify(filters) }),
          size: 20,
          fields: [
            'genomic_dna_change',
            'ssm_id',
            'consequence.transcript.is_canonical',
            'occurrence.case.project.project_id',
          ].join(),
        }),
      });
      const { data } = await res.json();
      setState((s) => ({
        ...s,
        frequentMutationsChart: mapData(data.hits, projectId),
      }));
    },
    fetchData: async ({ offset = 0, setState, currentFilters, first, projectId }) => {
      const url = `${API}analysis/frequent_mutations_by_project`;
      const filters = !!currentFilters.content.length ? currentFilters : null;

      const res = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...(filters && { filters: JSON.stringify(filters) }),
          offset,
          from: offset,
          size: first,
          fields: [
            'genomic_dna_change',
            'mutation_subtype',
            'ssm_id',
            'consequence.transcript.is_canonical',
            'consequence.transcript.annotation.impact',
            'consequence.transcript.consequence_type',
            'consequence.transcript.gene.gene_id',
            'consequence.transcript.gene.symbol',
            'consequence.transcript.aa_change',
            'occurrence.case.project.project_id',
          ].join(),
        }),
      });
      const { data } = await res.json();
      setState((s) => ({
        ...s,
        frequentMutationsTable: mapData(data.hits, projectId),
        total: data.pagination.total,
      }));
    },
  }),
  lifecycle({
    componentDidMount() {
      this.props.fetchData(this.props);
      this.props.fetchBarChart(this.props);
    },
    componentWillReceiveProps(next) {
      if (!isEqual(this.props.currentFilters, next.currentFilters)) {
        this.props.fetchData(next);
        this.props.fetchBarChart(next);
      }
    },
  })
)(({ state, ...props }) => {
  return !!state.frequentMutationsTable.length && (
    <PaginationContainer
      total={state.total}
      onChange={pageInfo => props.fetchData({ ...props, ...pageInfo })}
      entityType="Mutations"
    >
      <FrequentMutations
        frequentMutationsTable={state.frequentMutationsTable}
        frequentMutationsChart={state.frequentMutationsChart}
        numCasesAggByProject={props.numCasesAggByProject}
        totalNumCases={props.totalNumCases}
        projectId={props.projectId}
        defaultSurvivalRawData={props.defaultSurvivalRawData}
        defaultSurvivalLegend={props.defaultSurvivalLegend}
        survivalPlotloading={props.survivalPlotloading}
        showSurvivalPlot={props.showSurvivalPlot}
      />
    </PaginationContainer>
  );
});
