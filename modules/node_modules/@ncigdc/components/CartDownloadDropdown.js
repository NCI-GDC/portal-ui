// @flow

import React from 'react';
import { compose, withState } from 'recompose';
import { connect } from 'react-redux';

import DownloadButton from '@ncigdc/components/DownloadButton';
import LoginButton from '@ncigdc/components/LoginButton';

import DownloadIcon from 'react-icons/lib/fa/download';
import DownCaretIcon from 'react-icons/lib/fa/caret-down';

import { setModal } from '@ncigdc/dux/modal';

import Dropdown from '@ncigdc/uikit/Dropdown';
import Button from '@ncigdc/uikit/Button';
import { Column, Row } from '@ncigdc/uikit/Flex';

import { withTheme } from '@ncigdc/theme';

import download from '@ncigdc/utils/download';
/*----------------------------------------------------------------------------*/

const styles = {
  button: theme => ({
    backgroundColor: 'transparent',
    color: theme.greyScale2,
    justifyContent: 'flex-start',
    borderRadius: '0px',
    marginLeft: '0px',
    ':hover': {
      backgroundColor: theme.greyScale6,
    },
  }),
  iconSpacing: {
    marginRight: '0.6rem',
  },
};

const downloadCart = (files, dispatch, setActive) => {
  const controlledFiles = files.filter((file) => file.access === 'controlled');

  if (controlledFiles.length) {
    dispatch(setModal(
      <Column
        style={{ margin: '-15px' }}
      >
        <div className="modal-header">
          <h4> Access Error </h4>
        </div>
        <div className="modal-body">
          <p>You are attempting to download files that you are not authorized to access.</p>
          <p>
            <span className='label label-success'>
              {files.length - controlledFiles.length}
            </span> files that you are authorized to download.
          </p>
          <p>
            <span className='label label-danger'>
              {controlledFiles.length}
            </span> files that you are not authorized to download.
          </p>
          <p>
            Please <LoginButton />
          </p>
        </div>
        <div
          className="modal-footer"
          style={{
            display: 'flex',
            flexDirection: 'row',
            justifyContent: 'flex-end',
          }}
        >
          <Button
            onClick={() => dispatch(setModal(null))}
            style={{ margin: '0 10px' }}
          >
            <span>Cancel</span>
          </Button>
          <Button
            onClick={() => downloadCart(files.filter((file) => file.access === 'open'), dispatch)}
            style={{ margin: '0 10px' }}
          >
            <span>Download {files.length - controlledFiles.length} authorized files</span>
          </Button>
        </div>
      </Column>
    ));
  } else {
    dispatch(setModal(null));

    setActive(true);

    download({
      url: `${GDC_AUTH}api/data`,
      params: {
        ids: files.map((file) => file.file_id),
      },
      method: 'POST',
      altMessage: true,
    })(
      () => {},
      () => setActive(false)
    );
  }
};

const CartDownloadDropdown = ({
  files,
  theme,
  disabled = false,
  active,
  setActive,
  dispatch,
}) => (
  <Row>
    <Dropdown
      dropdownStyle={{
        marginTop: '2px',
        borderRadius: '4px',
      }}
      dropdownItemClass={false}
      button={
        <Button
          style={{ marginLeft: '10px' }}
          leftIcon={<i className={`fa ${active ? 'fa-spinner fa-pulse' : 'fa-download'}`} />}
          rightIcon={<DownCaretIcon />}
        >
          Download
        </Button>
      }
    >
      <Column>
        <DownloadButton
          style={styles.button(theme)}
          url={`${GDC_AUTH}api/manifest`}
          activeText="Downloading"
          inactiveText="Manifest"
          altMessage={false}
          extraParams={{
            ids: files.files.map((file) => file.file_id),
          }}
          SetParentActive={setActive}
        />
        <Button
          style={styles.button(theme)}
          onClick={() => downloadCart(files.files, dispatch, setActive)}
          leftIcon={<i className={`fa ${active ? 'fa-spinner fa-pulse' : 'fa-download'}`} />}
        >
          Cart
        </Button>
      </Column>
    </Dropdown>
  </Row>
);

export default compose(
  connect(),
  withTheme,
  withState('active', 'setActive', false)
)(CartDownloadDropdown);
