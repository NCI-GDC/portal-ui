/* @flow */

import React from 'react';
import Relay from 'react-relay';
import LocationSubscriber from '@ncigdc/components/LocationSubscriber';

import SideNavLayout from '@ncigdc/components/Layouts/SideNavLayout';
import Case from '@ncigdc/components/Case';

import type { TRawQuery } from '@ncigdc/utils/uri/types';

export type TProps = {
  node: {
    case_id: string,
    files: {
      hits: {
        total: number,
        edges: {
          map: Function,
          node: {
            cases: {
              hits: {
                edges: {
                  node: Object,
                },
              },
            },
          },
        },
      },
    },
    project: {
      disease_type: string,
      name: string,
      primary_site: string,
      program: {
        name: string,
      },
      project_id: string,
    },
    submitter_id: string,
  },
  viewer: {
    cohort: {
      cases: {
        aggregations: {
          project__project_id: {
            buckets: Array<{
              doc_count: number,
              key: string,
            }>,
          },
        },
      },
    },
  },
};

export const CasePageComponent = ({ node, viewer: { cohort } }: TProps) => (
  <SideNavLayout
    links={[
      { icon: 'table', id: 'summary', title: 'Summary' },
      { icon: 'calendar-plus-o', id: 'clinical', title: 'Clinical' },
      { icon: 'flask', id: 'biospecimen', title: 'Biospecimen' },
      { icon: 'bar-chart-o', id: 'frequent-mutations', title: 'Frequent Mutations' },
    ]}
    title={node.case_id}
    entityType={<i className="fa fa-user" />}
  >
    <LocationSubscriber>
      {
        (ctx: {| pathname: string, query: TRawQuery |}) => (
          <Case
            query={ctx.query}
            node={node}
            totalFiles={node.files.hits.total}
            files={
              node.files.hits.edges.map(f => ({
                ...f.node,
                cases: f.node.cases.hits.edges.map(c => c.node),
              }))
            }
            numCasesAggByProject={
              cohort.cases.aggregations.project__project_id.buckets.reduce((acc, b) => ({
                ...acc,
                [b.key]: b.doc_count,
              }), {})
            }
          />
        )
      }
    </LocationSubscriber>
  </SideNavLayout>
);

export const CasePageQuery = {
  initialVariables: {
    files_offset: null,
    files_size: null,
    files_sort: null,
    filters: null,
  },
  fragments: {
    node: () => Relay.QL`
      fragment on Case {
        case_id
        submitter_id
        annotations {
          hits(first: 99) {
            edges {
              node {
                annotation_id
              }
            }
          }
        }
        demographic {
          demographic_id
          ethnicity
          gender
          race
          year_of_birth
          year_of_death
        }
        diagnoses {
          hits(first: 99) {
            edges {
              node {
                diagnosis_id
                classification_of_tumor
                age_at_diagnosis
                days_to_birth
                days_to_death
                days_to_last_follow_up
                days_to_last_known_disease_status
                days_to_recurrence
                last_known_disease_status
                morphology
                primary_diagnosis
                prior_malignancy
                progression_or_recurrence
                site_of_resection_or_biopsy
                tissue_or_organ_of_origin
                tumor_stage
                tumor_grade
                vital_status
              }
            }
          }
        }
        files {
          hits(first: 99) {
            total
            edges {
              node {
                file_id
                access
                file_size
                cases {
                  hits(first: 99) {
                    edges {
                      node {
                        project {
                          project_id
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        project {
          project_id
          name
          disease_type
          program {
            name
          }
          primary_site
        }
        samples {
          hits(first: 99) {
            edges {
              node {
                sample_id
                sample_type_id
                portions {
                  hits(first: 99) {
                    edges {
                      node {
                        portion_id
                        submitter_id
                        state
                        analytes {
                          hits(first: 99) {
                            edges {
                              node {
                                analyte_id
                                analyte_type
                                submitter_id
                                concentration
                                state
                                amount
                                aliquots {
                                  hits(first: 99) {
                                    edges {
                                      node {
                                        aliquot_id
                                        concentration
                                        amount
                                        source_center
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        slides {
                          hits(first: 99) {
                            edges {
                              node {
                                slide_id
                                state
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        summary {
          experimental_strategies {
            experimental_strategy
            file_count
          }
          data_categories {
            data_category
            file_count
          }
        }
      }
    `,
    viewer: () => Relay.QL`
      fragment on Root {
        cohort{
          cases {
            aggregations{
              project__project_id {
                buckets {
                  doc_count
                  key
                }
              }
            }
          }
        }
      }
    `,
  },
};

const CasePage = Relay.createContainer(
  CasePageComponent,
  CasePageQuery
);

export default CasePage;
