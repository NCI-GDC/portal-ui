// @flow

// Vender
import React from 'react';
import * as d3 from 'd3';
import ReactFauxDOM from 'react-faux-dom';
import { withTooltip } from '@ncigdc/uikit/Tooltip';

// Custom
import Row from '@ncigdc/uikit/Flex/Row';
import './style.css';

const drawChart = ({ data, yAxis, styles, width, height, colors, projectsIdtoName, setTooltip }) => {
  const el = ReactFauxDOM.createElement('div');

  const margin = { top: 10, right: 0, bottom: 55, left: 60 };
  const x = d3.scaleBand()
    .rangeRound([0, width])
    .padding(0.1)
    .align(0.1)
    .domain(data.map(d => d.symbol));

  const y = d3.scaleLinear()
    .rangeRound([height, 0])
    .domain([0, d3.max(data, d => d.total)]);

  const set = new Set(data.reduce((acc, d) => ([...acc, ...Object.keys(d)]), []));
  const allKeys = Array.from(set)
    .filter(v => v !== 'symbol' && v !== 'total' && v !== 'gene_id');

  const stack = d3.stack()
  .keys(allKeys);

  const g = d3.select(el)
  .append('svg')
    .attr('width', width + margin.right + margin.left)
    .attr('height', height + margin.top + margin.bottom)
  .append('g')
    .attr('transform', `translate(${margin.left},${margin.top})`);

  const stackedData = stack(data)
  .map(
    d => d.filter(d2 => !isNaN(d2[0]) && !isNaN(d2[1]))
    .map(d2 => d2.concat({ key: d.key, index: d.index, data: d2.data }))
  );

  const bars = g.selectAll('.series')
    .data(stackedData)
    .enter().append('g')
      .attr('class', 'series')
    .selectAll('g')
    .data(d => d)
    .enter();

  bars
    .append('rect')
    .attr('x', d => x(d[2].data.symbol))
    .attr('y', d => y(d[1]))
    .attr('fill', d => colors[d[2].key])
    .attr('height', d => y(d[0]) - y(d[1]))
    .attr('width', x.bandwidth())
    .on('mouseenter', d => {
      setTooltip(
        <span>
          <b>{projectsIdtoName[d[2].key]}</b><br />
          {d[2].data[d[2].key]} case{d[2].data[d[2].key] > 1 ? 's' : ''} affected
        </span>
      );
    })
    .on('mouseleave', () => {
      setTooltip();
    })
    .classed('pointer', d => d[2].data.onClick)
    .on('click', d => {
      setTooltip();
      if (d[2].data.onClick) {
        d[2].data.onClick();
      }
    });

  const xG = g.append('g')
    .attr('class', 'axis axis--x')
    .attr('transform', `translate(0, ${height})`)
    .call(d3.axisBottom(x));
  xG.selectAll('text')
      .style('text-anchor', 'end')
      .attr('fill', (styles.xAxis || { textFill: 'black' }).textFill)
      .attr('dx', '-1em')
      .attr('dy', '.15em')
      .attr('transform', 'rotate(-45)');
  xG.selectAll('path')
    .style('stroke', (styles.xAxis || { stroke: 'black' }).stroke);
  xG.selectAll('line')
    .style('stroke', (styles.xAxis || { stroke: 'black' }).stroke);

  g.append('text')
    .attr('transform', 'rotate(-90)')
    .attr('y', 0 - margin.left)
    .attr('x', 0 - (height / 2))
    .attr('dy', '1em')
    .style('text-anchor', 'middle')
    .style('fontSize', '1rem')
    .style('fontWeight', '300')
    .attr('fill', (styles.yAxis || { textFill: 'black' }).textFill)
    .text(yAxis.title || '');

  const yG = g.append('g')
    .call(d3.axisLeft(y).ticks(5));
  yG.selectAll('path')
  .style('stroke', (styles.yAxis || { stroke: 'black' }).stroke);
  yG.selectAll('line')
  .style('stroke', (styles.yAxis || { stroke: 'black' }).stroke);
  yG.selectAll('text')
  .style('fill', (styles.yAxis || { textFill: 'black' }).textFill);

  return el.toReact();
};

type TProps = {
  data: Object,
  yAxis: Object,
  styles: Object,
  colors: Object,
  projectsIdtoName: Object,
  width?: number,
  height?: number,
  setTooltip: Function,
};
type TStackedBarChart = (props: TProps) => React.Element<*>;
const StackedBarChart: TStackedBarChart = ({
  data,
  yAxis,
  styles,
  colors,
  projectsIdtoName,
  width = 450,
  height = 200,
  setTooltip,
} = {}) => (
  Object.keys(data).length
    ? drawChart({ data, yAxis, styles, colors, projectsIdtoName, width, height, setTooltip })
    : (
      <Row style={{ color: styles.xAxis.textFill, justifyContent: 'center' }}>
        No data
      </Row>
    )
  );

export default withTooltip(StackedBarChart);
