// @flow

// Vendor
import React from 'react';
import { compose, withState, mapProps, pure } from 'recompose';
import AngleIcon from 'react-icons/lib/fa/angle-down';
import SearchIcon from 'react-icons/lib/fa/search';
import LocationSubscriber from '@ncigdc/components/LocationSubscriber';

// Custom
import { parseFilterParam } from '@ncigdc/utils/uri';
import { getFilterValue } from '@ncigdc/utils/filters';
import { Row, Column } from '@ncigdc/uikit/Flex';
import Input from '@ncigdc/uikit/Form/Input';
import withDropdown from '@ncigdc/uikit/withDropdown';
import styled from '@ncigdc/theme/styled';
import { dropdown } from '@ncigdc/theme/mixins';
import Link from '@ncigdc/components/Links/Link';
import CheckCircleOIcon from '@ncigdc/theme/icons/CheckCircleOIcon';
import type { TRawQuery } from '@ncigdc/utils/uri/types';
import FacetResetButton from './FacetResetButton';
import Hidden from '../Hidden';

/*----------------------------------------------------------------------------*/

const Container = styled(Column, {
  padding: '1rem 1.2rem',
  backgroundColor: 'white',
});

const Header = styled(Row, {
  color: ({ theme }) => theme.primary,
  fontSize: '1.7rem',
  marginBottom: '0.5rem',
  cursor: 'pointer',
  alignItems: 'center',
  justifyContent: 'space-between',
});

const MagnifyingGlass = styled(SearchIcon, {
  backgroundColor: ({ theme }) => theme.greyScale5,
  color: ({ theme }) => theme.greyScale2,
  padding: '0.8rem',
  width: '3.4rem',
  height: '3.4rem',
  borderRadius: '4px 0 0 4px',
  border: ({ theme }) => `1px solid ${theme.greyScale4}`,
  borderRight: 'none',
});

const StyledDropdownLink = styled(Link, ({
  color: ({ theme }) => theme.greyScale2,
  padding: '1rem',
  ':link': {
    textDecoration: 'none',
  },
  ':hover': {
    backgroundColor: 'rgb(31, 72, 108)',
    color: 'white',
    textDecoration: 'none',
  },
  width: '100%',
  textDecoration: 'none',
}));

const CheckedRow = styled(Row, ({
  padding: '0.25rem',
  fontSize: '1.5rem',
}));

const CheckedLink = styled(Link, ({
  color: ({ theme }) => theme.success,
  textDecoration: 'none',
  ':link': {
    textDecoration: 'none',
    color: ({ theme }) => theme.success,
  },
}));

const GoLink = styled(Link, ({
  color: ({ theme, dark }) => (dark ? theme.greyScale2 : theme.greyScale4),
  textDecoration: 'none',
  border: ({ theme }) => `1px solid ${theme.greyScale4}`,
  borderLeft: 0,
  padding: '6px 4px 2px 4px',
  height: '3.4rem',
  borderRadius: '0 4px 4px 0',
  ':link': {
    textDecoration: 'none',
  },
}));

let input;
const SuggestionFacet = compose(
  withDropdown,
  withState('state', 'setState', { collapsed: false, inputValue: '' }),
  mapProps(({ setState, ...rest }) => ({
    toggleCollapsed: () => setState(state => ({ ...state, collapsed: !state.collapsed })),
    setInputValue: v => setState(state => ({ ...state, inputValue: v })),
    ...rest,
  })),
  pure
)(({
  dropdownItem,
  title,
  doctype,
  fieldNoDoctype,
  state,
  toggleCollapsed,
  setInputValue,
  placeholder,
  hits,
  setAutocomplete,
  setActive,
  active,
  mouseDownHandler,
  mouseUpHandler,
}) => {
  const query = v => ({
    offset: 0,
    filters: {
      op: 'and',
      content: [{
        op: 'in',
        content: {
          field: `${doctype}.${fieldNoDoctype}`,
          value: [v],
        },
      }],
    },
  });

  return (
    <LocationSubscriber>{(ctx: {| pathname: string, query: TRawQuery |}) => {
      const { filters } = ctx.query || {};
      const currentFilters = parseFilterParam(filters, { content: [] }).content;
      const currentValues = getFilterValue({
        currentFilters,
        dotField: `${doctype}.${fieldNoDoctype}`,
      }) || { content: { value: [] } };
      return (
        <Container>
          <Header>
            <span style={{ cursor: 'pointer' }} onClick={() => toggleCollapsed()}>
              <AngleIcon style={{ transform: `rotate(${state.collapsed ? 270 : 0}deg)` }} />
              {title}
            </span>
            <FacetResetButton field={`${doctype}.${fieldNoDoctype}`} currentFilters={currentFilters} />
          </Header>
          {!state.collapsed &&
            <Column>
              {currentValues.content.value.map(v => (
                <CheckedRow key={v}>
                  <CheckedLink
                    merge="toggle"
                    query={{
                      offset: 0,
                      filters: {
                        op: 'and',
                        content: [{
                          op: 'in',
                          content: {
                          field: `${doctype}.${fieldNoDoctype}`,
                            value: [v],
                          },
                        }],
                      },
                    }}
                  >
                    <CheckCircleOIcon style={{ paddingRight: '0.5rem' }} />
                    {v}
                  </CheckedLink>
                </CheckedRow>
              ))}
              <Row>
                <MagnifyingGlass /><Hidden>{title}</Hidden>
                <Input
                  getNode={node => { input = node; }}
                  onChange={() => {
                    setInputValue(input.value);
                    setActive(!!input.value);
                    if (!!input.value) {
                      setAutocomplete(input.value);
                    }
                  }}
                  placeholder={placeholder}
                />
                {(active && !!(hits.edges || []).length) &&
                <Column
                  style={{ ...dropdown, marginTop: 0, top: '35px' }}
                  onMouseUp={mouseUpHandler}
                  onMouseDown={mouseDownHandler}
                >
                  {(hits.edges || []).map(x => (
                    <Row
                    key={x.node[fieldNoDoctype]}
                      style={{ alignItems: 'center' }}
                    >
                      <StyledDropdownLink
                        merge="add"
                      query={query(x.node[fieldNoDoctype])}
                      id={x.node[fieldNoDoctype]}
                        onClick={() => {
                          setActive(false);
                          input.value = '';
                        }}
                      >
                        {dropdownItem(x)}
                      </StyledDropdownLink>
                    </Row>
                  ))}
                </Column>
                }
                <GoLink
                  dark={!!state.inputValue}
                  merge="toggle"
                  query={state.inputValue !== '' && query(state.inputValue)}
                >
                  Go!
                </GoLink>
              </Row>
            </Column>
          }
        </Container>
      );
    }}</LocationSubscriber>
  );
});

/*----------------------------------------------------------------------------*/

export default SuggestionFacet;
