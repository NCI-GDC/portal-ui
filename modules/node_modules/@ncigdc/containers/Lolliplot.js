// @flow

import React from 'react';
import Relay from 'react-relay';
import { compose, lifecycle, withProps, withState } from 'recompose';
import moment from 'moment';
import { insertRule } from 'glamor';
import * as d3 from 'd3';

import lolliplot from '@oncojs/lolliplot';

import { buildProteinLolliplotData } from '@ncigdc/utils/data';
import { makeFilter } from '@ncigdc/utils/filters';
import { setTooltip } from '@ncigdc/uikit/Tooltip';
import { Row, Column } from '@ncigdc/uikit/Flex';
import Dropdown from '@ncigdc/uikit/Dropdown';
import Button from '@ncigdc/uikit/Button';
import DoubleHelix from '@ncigdc/theme/icons/DoubleHelix';
import SpinnerParticle from '@ncigdc/uikit/Loaders/Particle';
import DownloadVisualizationButton from '@ncigdc/components/DownloadVisualizationButton';

const rootId = 'protein-viewer-root';

insertRule(`
  #${rootId} text { user-select: none; }
`);

const styles = {
  heading: {
    flexGrow: 1,
    fontSize: '2.2rem',
    marginBottom: 7,
    marginTop: 7,
    display: 'flex',
    alignItems: 'center',
  },
};

const initialState = {
  activeTranscript: {},
  loading: true,
  actions: {},
};

const LolliplotComponent = compose(
  withState('state', 'setState', initialState),
  withProps({
    renderProteinLolliplot(data, transcript, { setState, dispatch, push }): void {
      setState({
        actions: lolliplot({
          d3,
          data,
          selector: '#protein-viewer-root',
          height: 450,
          domainWidth: transcript.length_amino_acid,
          onMutationClick: d => { push(`/ssms/${d.id}`); },
          onMutationMouseover: d => {
            dispatch(setTooltip(
              <span>
                <div>AA Change: {d.aa_change}</div>
                <div>DNA Change: {d.genomic_dna_change}</div>
                <div># of Cases: {d.donors}</div>
                <div>Functional Impact: {d.impact}</div>
              </span>
            ));
          },
          onMutationMouseout: () => dispatch(setTooltip(null)),
          onProteinMouseover: d => {
            dispatch(setTooltip(
              <span>
                <div>{d.id}</div>
                <div>{d.description}</div>
                <div><b>Click to zoom</b></div>
              </span>
            ));
          },
          onProteinMouseout: () => dispatch(setTooltip(null)),
        })
      });
    },
  }),
  lifecycle({
    componentDidMount() {
      const transcript = this.props.gene.transcripts.hits.edges.find(x => x.node.is_canonical).node;

      this.props.relay.setVariables({
        fetchData: true,
        filters: makeFilter([
          {
            field: 'consequence.transcript.gene.gene_id',
            value: [this.props.gene.gene_id],
          },
          {
            field: 'consequence.transcript.transcript_id',
            value: [transcript.transcript_id],
          },
        ], false),
      })
    },
    async componentWillReceiveProps(nextProps) {
      //
      if (!this.props.ssms.hits && nextProps.ssms.hits) {
        const transcript = this.props.gene.transcripts.hits.edges.find(x => x.node.is_canonical).node;

        const proteinLolliplotData = buildProteinLolliplotData({
          transcript,
          data: nextProps.ssms.hits.edges.map(x => x.node),
        });

        this.props.renderProteinLolliplot(proteinLolliplotData, transcript, nextProps);

        this.props.setState(s => ({
          ...s,
          activeTranscript: transcript,
          loading: false,
        }));
      }
    },
  })
)(({
  state: { loading },
  gene = {},
  activeTranscript = {},
  transcripts = [],
  proteinLolliplotData = {},
  reset = () => {},
  selectTranscript = () => {},
}) => (
  <Column>
    <Row>
      <h1 style={{ ...styles.heading, padding: '1rem' }} id="protein">
        <DoubleHelix width="12px" />
        <span style={{ marginLeft: '1rem' }}>Protein</span>
      </h1>
    </Row>
    <Row style={{ marginBottom: '2rem', padding: '0 2rem' }} spacing="1rem">
      <span style={{ alignSelf: 'center' }}>
        Transcript:
      </span>
      <Dropdown
        selected={
          <span
            style={{
              fontWeight: activeTranscript.transcript_id === gene.canonical_transcript_id
                ? 'bold' : 'initial',
            }}
          >
            {activeTranscript.transcript_id} ({activeTranscript.length_amino_acid} aa)
          </span>
        }
      >
        {transcripts
        .filter(t => t.transcript_id === gene.canonical_transcript_id)
        .map(t =>
          <Row
            key={t.transcript_id}
            style={{
              fontWeight: 'bold',
              ...(activeTranscript.transcript_id === t.transcript_id && {
                backgroundColor: 'rgb(44, 136, 170)',
                color: 'white',
              }),
            }}
            onClick={() => selectTranscript(t.transcript_id)}
          >
            {t.transcript_id} ({t.length_amino_acid} aa)
          </Row>
        )}
        {transcripts
        .filter(t => t.length_amino_acid && t.transcript_id !== gene.canonical_transcript_id)
        .map(t =>
          <Row
            key={t.transcript_id}
            style={{
              ...(activeTranscript.transcript_id === t.transcript_id && {
                backgroundColor: 'rgb(44, 136, 170)',
                color: 'white',
              }),
            }}
            onClick={() => selectTranscript(t.transcript_id)}
          >
            {t.transcript_id} ({t.length_amino_acid} aa)
          </Row>
        )}
      </Dropdown>
      <Button
        // style={visualizingButton}
        onClick={reset}
        leftIcon={<i className="fa fa-refresh" />}
      >
        Reset
      </Button>
      <DownloadVisualizationButton
        svg="#protein-viewer-root svg.chart"
        data={proteinLolliplotData}
        stylePrefix="#protein-viewer-root"
        slug={`protein_viewer-${gene.symbol}-${moment().format('YYYY-MM-DD')}`}
      />
    </Row>
    {loading &&
      <Column style={{ alignItems: 'center', padding: '20px' }}><SpinnerParticle /></Column>
    }
    <div style={{ padding: '0 3rem' }} id={rootId} />
  </Column>
));

export const LolliplotQuery = {
  initialVariables: {
    fetchData: false,
    filters: null,
    score: 'occurrence.case.project.project_id',
  },
  fragments: {
    ssms: () => Relay.QL`
      fragment on Ssms {
        dummy_field: hits (first: 1) { total }
        hits(first: 10 filters: $filters, score: $score) @include(if: $fetchData) {
          total
          edges {
            node {
              score
              ssm_id
              genomic_dna_change
              occurrence {
                # this is timing out
                hits(first: 1) {
                  edges {
                    node {
                      case {
                        case_id
                        disease_type
                        primary_site
                        project {
                          project_id
                        }
                      }
                    }
                  }
                }
              }
              consequence {
                hits(first: 99) {
                  edges {
                    node {
                      transcript {
                        is_canonical
                        consequence_type
                        gene {
                          gene_id
                          symbol
                        }
                        aa_change
                        transcript_id
                        aa_start
                        annotation {
                          impact
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const Lolliplot = Relay.createContainer(
  LolliplotComponent,
  LolliplotQuery
);

export default Lolliplot;
