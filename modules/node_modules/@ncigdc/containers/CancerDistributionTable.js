// @flow
import React from 'react';
import Relay from 'react-relay/classic';
import { lifecycle, compose } from 'recompose';
import { groupBy, isEqual, head, sortBy } from 'lodash';
import { tableToolTipHint } from '@ncigdc/theme/mixins';
import ExploreLink from '@ncigdc/components/Links/ExploreLink';
import EntityPageHorizontalTable from '@ncigdc/components/EntityPageHorizontalTable';
import { Tooltip } from '@ncigdc/uikit/Tooltip';
import { Column, Row } from '@ncigdc/uikit/Flex';
import { makeFilter } from '@ncigdc/utils/filters';
import ProjectLink from '@ncigdc/components/Links/ProjectLink';
import MutationsCount from '@ncigdc/containers/MutationsCount';
import GreyBox from '@ncigdc/uikit/GreyBox';
import Loader from '@ncigdc/uikit/Loaders/Loader';
import DownloadTableToTsvButton from '@ncigdc/components/DownloadTableToTsvButton';

type TProps = {|
  aggregations: Object,
|};

const CancerDistributionTableComponent = compose(
  lifecycle({
    componentDidMount(): void {
      this.props.relay.setVariables({
        fetchFilteredCaseAggs: true,
        caseAggsFilter: this.props.filters,
      });
    },
    componentWillReceiveProps(nextProps: Object): void {
      if (!isEqual(nextProps.cases, this.props.cases) && nextProps.cases.filtered) {
        this.props.relay.setVariables({
          fetchProjects: true,
          numProjects: nextProps.cases.filtered.project__project_id.buckets.length,
          projectFilter:
            makeFilter([
              { field: 'project_id', value: nextProps.cases.filtered.project__project_id.buckets.map(b => b.key) },
            ], false),
        });
      }
    },
  })
)(({
  entityName,
  geneId,
  cases,
  projects,
  explore,
  filters,
}: TProps = {}) => {
  const casesByProjectMap = (cases.total || { project__project_id: [] })
    .project__project_id.buckets.reduce((acc, bucket) => ({ ...acc, [bucket.key]: bucket.doc_count }), {});

  const projectsById = groupBy((projects.hits || { edges: [] }).edges, e => e.node.project_id);

  const cancerDistData = (cases.filtered || { project__project_id: { buckets: [] } })
  .project__project_id.buckets.map(b => {
    const totalCasesByProject = casesByProjectMap[b.key];
    const project = head(projectsById[b.key]);
    const freq = b.doc_count / totalCasesByProject;
    return {
      freq,
      project_id: (
        <ProjectLink uuid={b.key}>
          {b.key}
        </ProjectLink>
      ),
      disease_type: project ? (project.node.disease_type || []).join(', ') : <GreyBox />,
      site: project ? (project.node.primary_site || []).join(', ') : <GreyBox />,
      num_affected_cases: (
        <span>
          <ExploreLink
            query={{
              searchTableTab: 'cases',
              filters: makeFilter([
                ...geneId
                  ? [{ field: 'genes.gene_id', value: [geneId] }]
                  : [{ field: 'ssms.ssm_id', value: [entityName] }],
                { field: 'cases.project.project_id', value: [b.key] },
              ], false),
            }}
          >
            {b.doc_count}
          </ExploreLink>
          <span> / </span>
          <ExploreLink
            query={{
              searchTableTab: 'cases',
              filters: makeFilter([
                { field: 'cases.project.project_id', value: [b.key] },
                { field: 'cases.available_variation_data', value: 'ssm' },
              ], false),
            }}
          >
            {totalCasesByProject.toLocaleString()}
          </ExploreLink>
          <span>&nbsp;({(freq * 100).toFixed(2)}%)</span>
        </span>
      ),
      ...geneId && { num_mutations: (
        <MutationsCount
          key={b.key}
          ssms={explore.ssms}
          filters={makeFilter([
            { field: 'genes.gene_id', value: [geneId] },
            { field: 'cases.project.project_id', value: [b.key] },
          ], false)}
        />
      ) },
    };
  });
  const sortedCancerDistData = sortBy(cancerDistData, d => -d.freq);
  const mutationsHeading = geneId ? [{
    key: 'num_mutations',
    title: (
      <Tooltip
        Component={`Number of SSM observed in ${entityName} in Project`}
        style={tableToolTipHint()}
      >
        # Mutations
      </Tooltip>
    ),
    style: { textAlign: 'right' },
  }] : [];

  return (
    <Loader
      loading={!cases.filtered}
      height="387px"
    >
      <Row style={{ backgroundColor: 'white', padding: '1rem', justifyContent: 'flex-end' }}>
        <ExploreLink query={{ searchTableTab: 'cases', filters }}>
          Open in Exploration
        </ExploreLink>
        <DownloadTableToTsvButton
          selector="#cancer-distribution-table"
          filename="cancer-distribution-table.tsv"
          style={{ marginLeft: '0.5rem' }}
        />
      </Row>
      <Column style={{ width: '100%', minWidth: 450 }}>
        <EntityPageHorizontalTable
          tableId="cancer-distribution-table"
          headings={[
            { key: 'project_id', title: 'Project ID' },
            { key: 'disease_type', title: 'Disease Type' },
            { key: 'site', title: 'Site' },
            { key: 'num_affected_cases',
              title: (
                <Tooltip
                  Component={(
                    <span>
                      # SSM tested Cases in Project affected by {entityName}
                      / # SSM tested Cases in Project
                    </span>
                  )}
                  style={tableToolTipHint()}
                >
                  # Affected Cases
                </Tooltip>
              ),
            },
            ...mutationsHeading,
          ]}
          data={sortedCancerDistData}
        />
      </Column>
    </Loader>
  );
});

const CancerDistributionTableQuery = {
  initialVariables: {
    caseAggsFilter: null,
    projectFilter: null,
    numProjects: null,
    fetchProjects: false,
    fetchFilteredCaseAggs: false,
    ssmTested: makeFilter([{
      field: 'cases.available_variation_data',
      value: 'ssm',
    }], false),
  },
  fragments: {
    projects: () => Relay.QL`
      fragment on Projects {
        blah: hits(first: 0) { total }
        hits(first: $numProjects filters: $projectFilter) @include(if: $fetchProjects) {
          edges {
            node {
              primary_site
              disease_type
              project_id
            }
          }
        }
      }
    `,
    explore: () => Relay.QL`
      fragment on Explore {
        ssms {
          ${MutationsCount.getFragment('ssms')}
        }
      }
    `,
    cases: () => Relay.QL`
      fragment on ExploreCases {
        filtered: aggregations(filters: $caseAggsFilter) @include(if: $fetchFilteredCaseAggs) {
          project__project_id {
            buckets {
              doc_count
              key
            }
          }
        }
        total: aggregations(filters: $ssmTested) {
          project__project_id {
            buckets {
              doc_count
              key
            }
          }
        }
      }
    `,
  },
};

const CancerDistributionTable = Relay.createContainer(
  CancerDistributionTableComponent,
  CancerDistributionTableQuery
);

export default CancerDistributionTable;
