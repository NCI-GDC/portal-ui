// @flow
/* global $ */

import React from 'react';
import { connect } from 'react-redux';
import { compose, lifecycle, withState, withProps } from 'recompose';
import Lolliplot from '@oncojs/lolliplot';
import * as d3 from 'd3';

import withRouter from '@ncigdc/utils/withRouter';
import { buildProteinLolliplotData, buildCancerDistributionData } from '@ncigdc/utils/data';

import { Row, Column } from '@ncigdc/uikit/Flex';
import { Tooltip, setTooltip } from '@ncigdc/uikit/Tooltip';
import { makeFilter } from '@ncigdc/utils/filters';

import { tableToolTipHint } from '@ncigdc/theme/mixins';
import MinusIcon from '@ncigdc/theme/icons/Minus';
import PlusIcon from '@ncigdc/theme/icons/Plus';
import ChartIcon from '@ncigdc/theme/icons/BarChart';

import FrequentMutationsChart from '@ncigdc/containers/FrequentMutationsChart';
import FrequentMutationsTable from '@ncigdc/containers/FrequentMutationsTable';
import GeneSummary from '@ncigdc/containers/GeneSummary';
import GeneExternalReferences from '@ncigdc/containers/GeneExternalReferences';

import ProteinLolliplotComponent from './ProteinLolliplot';
import CancerDistribution from './CancerDistribution';

const styles = {
  heading: {
    flexGrow: 1,
    fontSize: '2.2rem',
    marginBottom: 7,
    marginTop: 7,
    display: 'flex',
    alignItems: 'center',
  },
  summary: {
    marginBottom: '2rem',
  },
  column: {
    width: '100%',
    minWidth: 450,
  },
  card: {
    backgroundColor: 'white',
  },
};

const strandIconMap = {
  '-1': <MinusIcon />,
  1: <PlusIcon />,
};

const initialState = {
  ProteinLolliplot: {},
  allCasesAgg: [],
  activeTranscript: {},
  ssmsLoading: true,
};

const Gene = compose(
  withState('state', 'setState', initialState),
  connect(),
  withRouter,
  withProps({
    renderProteinLolliplot(data, transcript, { setState, dispatch, push }): void {
      setState(s => ({
        ...s,
        ProteinLolliplot: Lolliplot({
          d3,
          data,
          selector: '#protein-viewer-root',
          height: 450,
          domainWidth: transcript.length_amino_acid,
          onMutationClick: d => { push(`/ssms/${d.id}`); },
          onMutationMouseover: d => {
            dispatch(setTooltip(
              <span>
                <div>AA Change: {d.aa_change}</div>
                <div>Mutation ID: {d.id}</div>
                <div># of Cases: {d.donors}</div>
                <div>Functional Impact: {d.impact}</div>
              </span>
            ));
          },
          onMutationMouseout: () => dispatch(setTooltip(null)),
          onProteinMouseover: d => {
            dispatch(setTooltip(
              <span>
                <div>{d.id}</div>
                <div>{d.description}</div>
                <div><b>Click to zoom</b></div>
              </span>
            ));
          },
          onProteinMouseout: () => dispatch(setTooltip(null)),
        }),
      }));
    },
  }),
  lifecycle({
    async componentWillReceiveProps(nextProps) {
      if (!this.props.ssms.length && nextProps.ssms.length) {
        const transcript = this.props.node.transcripts.hits.edges.find(x => x.node.is_canonical).node;

        const proteinLolliplotData = buildProteinLolliplotData({
          transcript,
          data: nextProps.ssms.map(x => x.node)
        });

        this.props.renderProteinLolliplot(proteinLolliplotData, transcript, this.props);

        this.props.setState(s => ({
          ...s,
          activeTranscript: transcript,
          ssmsLoading: false,
        }));
      }
    },
  })
)(({
  state: { ProteinLolliplot, activeTranscript, ssmsLoading },
  node: gene,
  casesByProject,
  viewer,
  ...props
}) => {
  const casesByProjectMap = (casesByProject || []).reduce((acc, bucket) =>
    ({ ...acc, [bucket.key]: bucket.doc_count }), {}
  );

  const cancerDistData = gene.case.hits.edges.map(x => x.node)
    .reduce(buildCancerDistributionData(casesByProjectMap), {});

  const sortedCancerDistData = Object.keys(cancerDistData)
    .map(k => ({ project_id: k, ...cancerDistData[k] }))
    .sort((a, b) => b.freq - a.freq);

  const fmFilters = makeFilter([
    {
      field: 'consequence.transcript.gene.gene_id',
      value: [gene.gene_id],
    },
    {
      field: 'consequence.transcript.transcript_id',
      value: [(gene.transcripts.hits.edges.find(x => x.node.is_canonical) || {}).node.transcript_id],
    },
  ], false);

  return (
    <Column spacing="2rem">
      <Row spacing="2rem">
        <Row flex="1"><GeneSummary node={gene} /></Row>
        <Row flex="1"><GeneExternalReferences node={gene} /></Row>
      </Row>
      <Column style={styles.card} id="cancer-distribution">
        <Row>
          <h1 style={{ ...styles.heading, padding: '1rem' }}>
            <ChartIcon style={{ marginRight: '1rem' }} />
            Cancer Distribution
          </h1>
        </Row>
        <CancerDistribution
          tableHeadings={[
            { key: 'project_id', title: 'Project ID' },
            { key: 'disease_type', title: 'Disease Type' },
            { key: 'site', title: 'Site' },
            { key: 'num_affected_cases',
              title: (
                <Tooltip
                  Component={`Number of Cases where ${gene.symbol} contains SSM`}
                  style={tableToolTipHint()}
                >
                  # Affected Cases
                </Tooltip>
              ),
            },
            { key: 'num_mutations',
              title: <Tooltip Component={`Number of SSM observed in ${gene.symbol}`} style={tableToolTipHint()}># Mutations</Tooltip>,
              style: { textAlign: 'right' },
            },
          ]}
          tableData={sortedCancerDistData.map(d => ({
            ...d,
            project_id: <a href={`/projects/${d.project_id}`}>{d.project_id}</a>,
            num_affected_cases:
              `${d.cases.length}/${casesByProjectMap[d.project_id]} (${(d.freq * 100).toFixed(2)}%)`,
            num_mutations: d.ssms.length,
          }))}
          chartData={sortedCancerDistData.map(d => ({
            label: d.project_id,
            value: (d.freq * 100),
            href: `projects/${d.project_id}`,
            tooltip: <span>
              {d.cases.length} Case{d.cases.length > 1 ? 's' : ''} Affected in <b>{d.project_id}</b><br />
              {d.cases.length} / {casesByProjectMap[d.project_id]}&nbsp;({(d.freq * 100).toFixed(2)}%)
            </span>,
          }))}
          tagline={`${sortedCancerDistData.reduce((acc, d) => [...acc, ...d.cases], []).length} cases affected by
            ${sortedCancerDistData.reduce((acc, d) => [...acc, ...d.ssms], []).length} mutations across
            ${sortedCancerDistData.length} projects`
          }
        />
      </Column>

      <Column style={{ ...styles.card, marginTop: '2rem' }}>
        <ProteinLolliplotComponent
          gene={gene}
          reset={ProteinLolliplot.reset}
          transcripts={gene.transcripts.hits.edges.map(x => x.node)}
          activeTranscript={activeTranscript}
          loading={ssmsLoading}
        />
      </Column>

      <Column style={{ ...styles.card, marginTop: '2rem' }}>
        <h1 style={{ ...styles.heading, padding: '1rem' }} id="frequent-mutations">
          <ChartIcon style={{ marginRight: '1rem' }} />
          Most Frequent Mutations
        </h1>

        <Column>
          <FrequentMutationsChart
            defaultFilters={fmFilters}
            cohort={viewer.frequentMutationsChartFragment}
          />
          <FrequentMutationsTable
            defaultFilters={fmFilters}
            cohort={viewer.frequentMutationsTableFragment}
          />
        </Column>
      </Column>
    </Column>
  );
});

export default Gene;
