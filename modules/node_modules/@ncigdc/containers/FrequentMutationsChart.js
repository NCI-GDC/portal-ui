// @flow

import React from 'react';
import Relay from 'react-relay';
import withSize from '@ncigdc/utils/withSize';
import { isEqual } from 'lodash';
import { compose, withPropsOnChange } from 'recompose';
import withRouter from '@ncigdc/utils/withRouter';
import { parseFilterParam } from '@ncigdc/utils/uri';
import { makeFilter } from '@ncigdc/utils/filters';
import { withTheme } from '@ncigdc/theme';
import { graphTitle } from '@ncigdc/theme/mixins';
import { Row } from '@ncigdc/uikit/Flex';
import Loader from '@ncigdc/uikit/Loaders/Loader';
import DownloadVisualizationButton from '@ncigdc/components/DownloadVisualizationButton';
import BarChart from '@ncigdc/components/Charts/BarChart';

const FrequentMutationsChartComponent = compose(
  withRouter,
  withPropsOnChange(
    (props, nextProps) => ['query', 'projectId', 'defaultFilters']
      .reduce((shouldMap, propName) => !isEqual(props[propName], nextProps[propName]), false),
    ({ relay, query, defaultFilters }) => {
      relay.setVariables({
        fetchData: true,
        fmChart_filters: parseFilterParam(
          query.fmChart_filters,
          defaultFilters || null
        ),
      });
    }
  ),
  withTheme,
  withSize()
)(({
  projectId = '',
  theme,
  showSurvivalPlot,
  size: {
    width,
  },
  cohort: { ssms, cases },
  push,
}) => {
  const chartMargin = { top: 30, right: 50, bottom: 105, left: 40 };

  const maxBars = 20;
  const bandWidth = (
    (width - chartMargin.right - chartMargin.left) /
    (maxBars + 1) / (showSurvivalPlot ? 1 : 2)
  ) * 0.7;

  const numCasesAggByProject = cases.aggregations.project__project_id.buckets.reduce((acc, b) => ({
    ...acc,
    [b.key]: b.doc_count,
  }), {});

  return (
    <Loader
      loading={!ssms}
      height="400px"
    >
      {ssms && !!ssms.hits.edges.length && (
        <Row>
          <span>
            <div style={{ textAlign: 'right', marginRight: 50, marginLeft: 30 }}>
              <DownloadVisualizationButton
                svg="#mutation-chart svg"
                data={ssms.hits.edges.map(x => x.node)}
                slug="bar-chart"
                noText
                tooltipHTML="Download image or data"
              />
            </div>
            <div style={graphTitle()}>Distribution of Most Frequent Mutations</div>
            <Row id="mutation-chart" style={{ padding: '10px' }}>
              <BarChart
                bandwidth={bandWidth}
                data={ssms.hits.edges.map(x => ({
                  label: `${x.node.ssm_id.substr(0, 8)}...`,
                  value: projectId ? x.node.filteredOccurrences.hits.total : x.node.score,
                  tooltip: projectId
                    ? (
                      <span>
                        <b>{x.node.ssm_id}</b><br />
                        <div>{x.node.filteredOccurrences.hits.total} Case{x.node.filteredOccurrences.hits.total > 1 ?
                          's' : ''}
                        &nbsp;affected in {projectId}</div>
                        <div>
                          {x.node.filteredOccurrences.hits.total.toLocaleString()} / {numCasesAggByProject[projectId].toLocaleString()}
                          &nbsp;({((x.node.filteredOccurrences.hits.total / numCasesAggByProject[projectId]) * 100).toFixed(2)}%)
                        </div>
                      </span>
                    )
                      : (
                        <span><b>{x.node.ssm_id}</b><br />
                          <div>{x.node.score} Case{x.node.score > 1 ? 's ' : ' '}
                          &nbsp;affected in all projects</div>
                          <div>{x.node.score.toLocaleString()} / {cases.hits.total.toLocaleString()}
                          &nbsp;({((x.node.allOccurrences.hits.total / cases.hits.total) * 100).toFixed(2)}%)</div>
                        </span>
                      ),
                  onClick: () => push(`/ssms/${x.node.ssm_id}`),
                }))}
                margin={chartMargin}
                height={300}
                yAxis={{ title: '# Affected Cases' }}
                styles={{
                  xAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                  yAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                  bars: { fill: theme.secondary },
                  tooltips: {
                    fill: '#fff',
                    stroke: theme.greyScale4,
                    textFill: theme.greyScale3,
                  },
                }}
              />
            </Row>
          </span>
        </Row>
      )}
    </Loader>
  );
});

export const FrequentMutationsChartQuery = {
  initialVariables: {
    fetchData: false,
    fmChart_filters: null,
    score: 'occurrence.case.project.project_id',
    ssmTested: makeFilter([{
      field: 'available_variation_data',
      value: 'ssm',
    }], false),
  },
  fragments: {
    cohort: () => Relay.QL`
      fragment on Cohort {
        cases {
          aggregations(filters: $ssmTested) {
            project__project_id {
              buckets {
                doc_count
                key
              }
            }
          }
          hits(first: 0) { total }
        }
        ssms @include(if: $fetchData) {
          hits (first: 20 filters: $fmChart_filters, score: $score) @include(if: $fetchData) {
            total
            edges {
              node {
                score
                genomic_dna_change
                ssm_id
                filteredOccurrences: occurrence {
                  hits(first: 1 filters: $fmChart_filters) {
                    total
                  }
                }
                allOccurrences: occurrence {
                  hits(first: 1) {
                    total
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const FrequentMutationsChart = Relay.createContainer(
  FrequentMutationsChartComponent,
  FrequentMutationsChartQuery
);

export default FrequentMutationsChart;
