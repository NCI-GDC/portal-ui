/* @flow */

import React from 'react';
import Relay from 'react-relay';

import Pagination from '@ncigdc/components/Pagination';
import Showing from '@ncigdc/components/Pagination/Showing';
import AddToCartButtonAll from '@ncigdc/components/AddToCartButtonAll';
import { Row } from '@ncigdc/uikit/Flex';
import TableActions from '@ncigdc/components/TableActions';

import { Tr, Th } from '@ncigdc/uikit/Table';

import FileTr from './FileTr';

import type { TTableProps } from './types';

const styles = {
  table: {
    width: '100%',
    borderCollapse: 'collapse',
    borderSpacing: 0,
  },
};

export const FileTableComponent = (props: TTableProps) => {
  const prefix = 'files';

  return (
    <div>
      <Row style={{ backgroundColor: 'white', padding: '1rem', justifyContent: 'space-between' }}>
        <Showing
          docType="files"
          prefix={prefix}
          params={props.relay.route.params}
          total={props.hits.total}
        />
        <TableActions
          prefix={prefix}
          total={props.hits.total}
          sortKey="files_sort"
          endpoint={`${API}/files`}
          downloadable={props.downloadable}
          downloadFields={[
            'file_id',
            'file_name',
            'cases.project.project_id',
            'data_category',
            'data_format',
            'file_size',
          ]}
          sortOptions={[
            {
              id: 'file_id',
              name: 'File UUID',
            },
            {
              id: 'submitter_id',
              name: 'File Submitter ID',
            },
            {
              id: 'access',
              name: 'Access',
            },
            {
              id: 'file_name',
              name: 'File Name',
            },
            {
              id: 'cases.project.project_id',
              name: 'Project',
            },
            {
              id: 'data_category',
              name: 'Data Category',
            },
            {
              id: 'data_format',
              name: 'Data Format',
            },
            {
              id: 'file_size',
              name: 'Size',
            },
          ]}
        />
      </Row>
      <div style={{ overflowX: 'auto' }}>
        <table style={styles.table}>
          <thead>
            <Tr>
              <Th
                style={{
                  padding: '3px',
                }}
              >
                <AddToCartButtonAll
                  edges={props.hits.edges.map(e => e.node)}
                  total={props.hits.total}
                />
              </Th>
              <Th>Access</Th>
              <Th>Name</Th>
              <Th>Cases</Th>
              <Th>Projects</Th>
              <Th>Category</Th>
              <Th>Format</Th>
              <Th>Size</Th>
            </Tr>
          </thead>
          <tbody>
            {props.hits.edges.map((e, i) => (
              <FileTr node={e.node} key={e.node.id} index={i} />
          ))}
          </tbody>
        </table>
      </div>
      <Pagination prefix={prefix} params={props.relay.route.params} total={props.hits.total} />
    </div>
  );
};

export const FileTableQuery = {
  fragments: {
    hits: () => Relay.QL`
      fragment on FileConnection {
        total
        edges {
          node {
            id
            file_id
            file_name
            file_size
            access
            data_category
            data_format
            cases {
              hits(first: 1) {
                edges {
                  node {
                    project {
                      project_id
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const FileTable = Relay.createContainer(
  FileTableComponent,
  FileTableQuery
);

export default FileTable;
