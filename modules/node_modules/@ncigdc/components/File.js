// @flow

import React from 'react';
import { compose, withState } from 'recompose';
import { Link } from 'react-router';

import { withTheme } from '@ncigdc/theme';
import FileOIcon from 'react-icons/lib/fa/file-o';
import SearchIcon from 'react-icons/lib/fa/search';
import { Row, Column } from '@ncigdc/uikit/Flex';
import EntityPageVerticalTable from '@ncigdc/components/EntityPageVerticalTable';
import EntityPageHorizontalTable from '@ncigdc/components/EntityPageHorizontalTable';
import AddToCartButtonSingle from '@ncigdc/components/AddToCartButtonSingle';
import BAMSlicingButton from '@ncigdc/components/BAMSlicingButton';

const styles = {
  // content: {
  //   padding: '2rem 2.5rem 13rem',
  //   width: '80%',
  //   maxWidth: '1170px',
  //   alignSelf: 'center',
  // },
  table: {
    borderCollapse: 'collapse',
    borderSpacing: 0,
    overflow: 'auto',
  },
};

let searchInput;

const File = ({ node, theme, searchTerm, setState }) => {
  const filteredAE = node.associated_entities.hits.edges
    .filter(({ node: ae }) => Object.keys(ae).map(k => ae[k].includes(searchTerm)).includes(true))
    .map(ae => {
      const annotations = node.annotations.hits.edges.filter(a => a.entity_id === ae.entity_id);
      // figure out how to link to a annotations page filtered on id
      return {
        ...ae,
        annotation_count: (annotations.length ?
          <Link
            to={{
              pathname: '/annotations',
            }}
          >
            {annotations.length}
          </Link> :
          'todo') };
    });

  const archiveComponent = node.archive.archive_id ?
    (<Link>
      {node.archive.submitter_id || '--'} - {node.archive.revision}
        (todo: link out to file search pg with files.archive.archive_id filter)
    </Link>)
    : '--';

  return (
    <Column>
      <Row style={{ justifyContent: 'flex-end', padding: '1rem 0' }}>
        <AddToCartButtonSingle
          file={node}
        />
        { node.data_type === 'Aligned Reads' &&
          node.data_format === 'BAM' &&
          node.index_files.hits.total &&
          <BAMSlicingButton
            file={node}
          />
        }
      </Row>
      <Row style={{ alignItems: 'flex-start' }}>
        <EntityPageVerticalTable
          title="File Properties"
          style={{ width: '58%', marginRight: '2rem' }}
          thToTd={[
            { th: 'Name', td: node.file_name },
            { th: 'Access', td: node.access },
            { th: 'UUID', td: node.file_id },
            { th: 'Submitter ID', td: node.submitter_id || '--' },
            { th: 'Data Format', td: node.data_format },
            { th: 'Size', td: node.file_size },
            { th: 'MD5 Checksum', td: node.md5sum },
            { th: 'State', td: node.state },
            { th: 'Archive', td: archiveComponent },
            { th: 'Project ID',
              td: (node.cases.hits.edges || []).map(
                ({ node: c }) => (c.project || { project_id: '--' }).project_id).join(', ') },
          ]}
        />
        <EntityPageVerticalTable
          title="Data Information"
          style={{ width: '42%' }}
          thToTd={[
            { th: 'Data Category', td: node.data_category },
            { th: 'Data Type', td: node.data_type },
            { th: 'Experimental Strategy', td: node.experimental_strategy },
            { th: 'Platform', td: node.platform || '--' },
            { th: 'Data Submitter', td: node.center.short_name || '--' },
            { th: 'Tag', td: node.tags },
          ]}
        />
      </Row>
      <Row style={{ paddingTop: '2rem' }}>
        <Column style={{ flexGrow: 1 }}>
          <EntityPageHorizontalTable
            rightComponent={
              <Row>
                <div
                  style={{
                    borderTop: `1px solid ${theme.greyScale5}`,
                    borderLeft: `1px solid ${theme.greyScale5}`,
                    borderBottom: `1px solid ${theme.greyScale5}`,
                    borderRight: 0,
                    borderRadius: '4px 0 0 4px',
                    backgroundColor: `${theme.greyScale4}`,
                    width: '38px',
                    height: '34px',
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center',
                  }}
                >
                  <SearchIcon size={14} />
                </div>
                <input
                  placeholder="Type to filter cases."
                  type="text"
                  ref={n => { searchInput = n; }}
                  onChange={() => setState(() => searchInput.value)}
                  style={{
                    fontSize: '14px',
                    paddingLeft: '1rem',
                    border: `1px solid ${theme.greyScale5}`,
                    width: '28rem',
                    borderRadius: '0 4px 4px 0',
                  }}
                />
              </Row>
            }
            title="Associated Cases/Biospecimen"
            emptyMessage="No cases or biospecimen found."
            headings={[
              { key: 'entity_id', title: 'Entity Id' },
              { key: 'entity_type', title: 'Entity Type' },
              { key: 'case_id', title: 'Case UUID' },
              { key: 'annotation_count', title: 'Annotations' },
            ]}
            data={filteredAE}
          />
        </Column>
      </Row>
      <Row style={{ paddingTop: '2rem' }}>
        <Column style={{ flexGrow: 1 }}>
          <EntityPageHorizontalTable
            title="Metadata Files"
            emptyMessage="No metadata files found."
            headings={[
              { key: 'file_name',
                title: 'File Name',
                style: { maxWidth: '150px', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' },
                tooltip: true,
              },
              { key: 'data_category', title: 'Data Category' },
              { key: 'data_type', title: 'Data Type' },
              { key: 'data_format', title: 'Data Format' },
              { key: 'file_size', title: 'File Size' },
              { key: 'action', title: 'Action' },
            ]}
            data={node.metadata_files.hits.edges.map(md => ({
              ...md,
              action: 'todo',
            }))}
          />
        </Column>
      </Row>
    </Column>
  );
};

export default compose(
  withState('searchTerm', 'setState', ''),
  withTheme
)(File);
