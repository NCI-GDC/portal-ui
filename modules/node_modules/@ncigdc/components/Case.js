// @flow

import React from 'react';
import FileIcon from 'react-icons/lib/fa/file-o';
import { makeFilter } from '@ncigdc/utils/filters';
import { EXPERIMENTAL_STRATEGIES, DATA_CATEGORIES } from '@ncigdc/utils/constants';
import Column from '@ncigdc/uikit/Flex/Column';
import Row from '@ncigdc/uikit/Flex/Row';
import CountCard from '@ncigdc/components/CountCard';
import SummaryCard from '@ncigdc/components/SummaryCard';
import EntityPageVerticalTable from '@ncigdc/components/EntityPageVerticalTable';
import ClinicalCard from '@ncigdc/components/ClinicalCard';
import BiospecimenCard from '@ncigdc/components/BiospecimenCard';
import FrequentMutationsContainer from '@ncigdc/components/FrequentMutationsContainer';
import { withTheme } from '@ncigdc/theme';
import Link from './Links/Link';

const styles = {
  icon: {
    width: '4rem',
    height: '4rem',
    color: '#888',
  },
  card: {
    backgroundColor: 'white',
  },
  heading: {
    flexGrow: 1,
    fontSize: '2rem',
    marginBottom: 7,
    marginTop: 7,
  },
};

const Case = ({
  node,
  numCasesAggByProject,
  totalNumCases,
  theme,
}) => {
  // const {
  //   annotationIds,
  //   experimentalStrategies,
  //   expStratConfig,
  //   dataCategories,
  //   dataCategoriesConfig,
  // } =

  const p = node;

  const annotationIds = p.annotations.map(annotation =>
    annotation.annotation_id
  );

  const experimentalStrategies = EXPERIMENTAL_STRATEGIES.reduce((result, name) => {
    let strat = p.summary.experimental_strategies.find(item =>
      item.experimental_strategy.toLowerCase() === name.toLowerCase()
    );

    if (strat) {
      result.push({
        ...strat,
        file_count: (
          <Link
            merge="replace"
            pathname="/repository"
            query={{
              filters: makeFilter([
                { field: 'cases.case_id', value: p.case_id },
                { field: 'files.experimental_strategy', value: [strat.experimental_strategy] },
              ], false),
              facetTab: 'files',
              searchTableTab: 'files',
            }}
          >
            {strat.file_count}
          </Link>
        ),
        file_count_value: strat.file_count,
      });
    }

    return result;
  }, []);

  const dataCategories = Object.keys(DATA_CATEGORIES).reduce((acc, key) => {
    const type = p.summary.data_categories.find(item => item.data_category === DATA_CATEGORIES[key].full);
    const fileCount = type.file_count || 0;

    return acc.concat({
      data_category: type.data_category || DATA_CATEGORIES[key].full,
      file_count: (
        <Link
          merge="replace"
          pathname="/repository"
          query={{
            filters: makeFilter([
              { field: 'cases.case_id', value: p.case_id },
              { field: 'files.data_category', value: [type.data_category] },
            ], false),
            facetTab: 'files',
            searchTableTab: 'files',
          }}
        >
          {fileCount}
        </Link>
      ),
      file_count_value: fileCount,
    });
  }, []);

  return (
    <Column spacing={theme.spacing}>
      <Row spacing={theme.spacing}>
        <EntityPageVerticalTable
          id="summary"
          title={<span><i className="fa fa-table" /> Summary</span>}
          thToTd={[
            { th: 'Case UUID', td: p.case_id },
            { th: 'Case Submitter ID', td: p.submitter_id },
            { th: 'Project ID', td: p.project.project_id },
            { th: 'Project Name', td: p.project.name },
            { th: 'Disease Type', td: p.project.disease_type },
            { th: 'Program', td: p.project.program.name },
            { th: 'Primary Site', td: p.project.primary_site },
          ]}
          style={{ flex: 1 }}
        />

        <Column style={{ width: '200px' }} spacing={theme.spacing}>
          <CountCard
            title="FILES"
            count={p.files.length.toLocaleString()}
            icon={<FileIcon style={styles.icon} />}
            linkParams={p.files.length ? {
              pathname: '/repository',
              query: {
                filters: makeFilter([{ field: 'cases.case_id', value: p.case_id }], false),
                facetTab: 'files',
                searchTableTab: 'files',
              },
            } : null}
          />
          <CountCard
            title="ANNOTATIONS"
            count={(annotationIds || []).length.toLocaleString()}
            icon={<i className="fa fa-edit" style={styles.icon} />}
            linkParams={(annotationIds || []).length ? {
              pathname: '/annotations',
              query: {
                filters: makeFilter([{ field: 'annotations.case_id', value: p.case_id }], false),
              },
            } : null}
          />
        </Column>
      </Row>

      <Row style={{ flexWrap: 'wrap' }} spacing={theme.spacing}>
        <span style={{ flex: 1 }}>
          <SummaryCard
            tableTitle="File Counts by Experimental Strategy"
            pieChartTitle="File Counts by Experimental Strategy"
            data={experimentalStrategies}
            footer={`${(experimentalStrategies || []).length} Experimental Strategies`}
            path="file_count_value"
            headings={[
              { key: 'experimental_strategy', title: 'Experimental Strategy', color: true },
              {
                key: 'file_count',
                title: 'Files',
                style: { textAlign: 'right' },
              },
            ]}
          />
        </span>
        <span style={{ flex: 1 }}>
          <SummaryCard
            tableTitle="File Counts by Data Category"
            pieChartTitle="File Counts by Experimental Strategy"
            data={dataCategories}
            footer={`${(dataCategories || []).length} Experimental Strategies`}
            path="file_count_value"
            headings={[
              { key: 'data_category', title: 'Data Category', color: true },
              {
                key: 'file_count',
                title: 'Files',
                style: { textAlign: 'right' },
              },
            ]}
          />
        </span>
      </Row>

      <Row id="clinical" style={{ flexWrap: 'wrap' }} spacing={theme.spacing}>
        <ClinicalCard p={p} />
      </Row>

      <Row id="biospecimen" style={{ flexWrap: 'wrap' }} spacing={theme.spacing}>
        <BiospecimenCard p={p} />
      </Row>

      <Column style={{ ...styles.card, marginTop: '2rem' }}>
        <h1 style={{ ...styles.heading, padding: '1rem' }} id="frequent-mutations">
          <i className="fa fa-bar-chart-o" style={{ paddingRight: '10px' }} />
          Most Frequent Mutations
        </h1>

        <FrequentMutationsContainer
          numCasesAggByProject={numCasesAggByProject}
          totalNumCases={totalNumCases}
          projectId={p.project.project_id}
          api={API}
          showSurvivalPlot={false}
        />

      </Column>
    </Column>
  );
};

export default withTheme(Case);
