// @flow

import React from 'react';
import Relay from 'react-relay';
import withSize from 'react-sizeme';
import { isEqual } from 'lodash';
import { lifecycle, compose } from 'recompose';
import { parseIntParam, parseFilterParam } from '@ncigdc/utils/uri';
import Showing from '@ncigdc/components/Pagination/Showing';
import { withTheme } from '@ncigdc/theme';
import ageDisplay from '@ncigdc/utils/ageDisplay';
import { DATA_CATEGORIES } from '@ncigdc/utils/constants';
import { tableToolTipHint } from '@ncigdc/theme/mixins';
import withRouter from '@ncigdc/utils/withRouter';
import { RepositoryFilesLink } from '@ncigdc/components/Links/RepositoryLink';
import SpinnerParticle from '@ncigdc/uikit/Loaders/Particle';
import { makeFilter } from '@ncigdc/utils/filters';
import EntityPageHorizontalTable from '@ncigdc/components/EntityPageHorizontalTable';
import { Row } from '@ncigdc/uikit/Flex';
import { Tooltip } from '@ncigdc/uikit/Tooltip';
import Pagination from '@ncigdc/components/Pagination';

const MostAffectedCasesTableComponent = compose(
  withRouter,
  lifecycle({
    componentDidMount() {
      this.props.relay.setVariables({
        fetchData: true,
        macTable_offset: parseIntParam(this.props.query.macTable_offset, 0),
        macTable_size: parseIntParam(this.props.query.macTable_size, 10),
        macTable_filters: parseFilterParam(this.props.query.macTable_filters, this.props.defaultFilters || null),
      });
    },
    componentWillReceiveProps(nextProps) {
      if (!isEqual(this.props.query, nextProps.query)) {
        this.props.relay.setVariables({
          macTable_offset: parseIntParam(nextProps.query.macTable_offset, 0),
          macTable_size: parseIntParam(nextProps.query.macTable_size, 10),
          macTable_filters: parseFilterParam(nextProps.query.macTable_filters, nextProps.defaultFilters || null),
        })
      }
    }
  }),
  withTheme,
  withSize()
)(({
  cohort: { cases },
  relay,
} = {}) => {
  if (!cases) {
    return (
      <Row style={{ justifyContent: 'center', padding: '1rem' }}>
        <SpinnerParticle />
      </Row>
    );
  }

  if (!cases.hits.edges.length) {
    return <Row style={{ padding: '1rem' }}>No data found.</Row>;
  }

  return (
    <div>
      <Row style={{ backgroundColor: 'white', padding: '1rem', justifyContent: 'space-between' }}>
        <Showing
          docType="cases"
          prefix={'macTable'}
          params={relay.route.params}
          total={cases.hits.total}
        />
      </Row>
      <EntityPageHorizontalTable
        headings={[
          { key: 'id', title: 'UUID' },
          { key: 'primary_site', title: 'Site' },
          { key: 'gender', title: 'Gender' },
          { key: 'age_at_diagnosis', title: 'Age at Diagnosis' },
          { key: 'tumor_stage', title: 'Stage' },
          { key: 'days_to_death',
            title: <Tooltip Component='Survival (days)' style={tableToolTipHint()}>Survival</Tooltip>,
          },
          { key: 'days_to_last_follow_up',
            title: <Tooltip Component='Days to Last Follow Up' style={tableToolTipHint()}>Last Follow<br />Up</Tooltip>,
            style: { textAlign: 'right' },
          },
          { key: 'data_types',
            title: 'Available Files per Data Category',
            style: { textAlign: 'right' },
            subheadings: Object.keys(DATA_CATEGORIES).map(k =>
              <abbr key={DATA_CATEGORIES[k].abbr}>
                <Tooltip Component={DATA_CATEGORIES[k].full} style={tableToolTipHint()}>
                  {DATA_CATEGORIES[k].abbr}
                </Tooltip>
              </abbr>
            ),
          },
          // TODO: needs secondary call
          // {
          //   key: 'num_mutations',
          //   title: '# Mutations',
          //   style: { textAlign: 'right' },
          // },
          {
            key: 'num_genes',
            title: '# Genes',
            style: { textAlign: 'right' },
          },
        ]}
        data={cases.hits.edges.map(x => x.node).map(c => {
          const dataCategorySummary = c.summary.data_categories.reduce((acc, d) => ({
            ...acc, [d.data_category]: d.file_count,
          }), {});

          const diagnosis = (c.diagnoses.hits.edges[0] || { node: {} }).node;

          return {
            id: <a href={`/cases/${c.case_id}`}>{c.case_id}</a>,
            primary_site: c.primary_site,
            gender: c.demographic ? c.demographic.gender : '',
            age_at_diagnosis: ageDisplay(diagnosis.age_at_diagnosis),
            tumor_stage: diagnosis.tumor_stage,
            days_to_last_follow_up: diagnosis.days_to_last_follow_up,
            days_to_death: diagnosis.days_to_death,
            // TODO: needs secondary call
            // num_mutations: c.gene.reduce((sum, g) => sum + g.ssm.length, 0),
            num_genes: c.score,
            data_types: Object.keys(DATA_CATEGORIES).map(k => (
              dataCategorySummary[DATA_CATEGORIES[k].full] ? (
                <RepositoryFilesLink
                  query={{
                    filters: makeFilter([
                      { field: 'cases.case_id', value: c.case_id },
                      { field: 'files.data_category', value: DATA_CATEGORIES[k].full },
                    ], false),
                  }}
                >
                  {dataCategorySummary[DATA_CATEGORIES[k].full]}
                </RepositoryFilesLink>
              ) : '--'
            )
          ) };
        })}
      />
      <Pagination prefix={'macTable'} params={relay.route.params} total={cases.hits.total} />
    </div>
  );
});


export const MostAffectedCasesTableQuery = {
  initialVariables: {
    fetchData: false,
    score: 'gene.gene_id',
    macTable_filters: null,
    macTable_size: 10,
    macTable_offset: 0,
  },
  fragments: {
    cohort: () => Relay.QL`
      fragment on Cohort {
        allCases: cases {
          hits(first: 0) { total }
        }
        cases @include(if: $fetchData) {
          hits (
            score: $score
            first: $macTable_size
            filters: $macTable_filters
            offset: $macTable_offset
          ) @include(if: $fetchData) {
            total
            edges {
              node {
                primary_site
                score
                case_id
                demographic {
                  gender
                }
                summary {
                  data_categories {
                    data_category
                    file_count
                  }
                }
                diagnoses {
                  hits(first: 1) {
                    edges {
                      node {
                        age_at_diagnosis
                        tumor_stage
                        days_to_last_follow_up
                        days_to_death
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const MostAffectedCasesTable = Relay.createContainer(
  MostAffectedCasesTableComponent,
  MostAffectedCasesTableQuery
);

export default MostAffectedCasesTable;
