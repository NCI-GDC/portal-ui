/* @flow */

import React from 'react';
import Relay from 'react-relay';
import { LocationSubscriber } from 'react-router/Broadcasts';

import SideNavLayout from '@ncigdc/components/Layouts/SideNavLayout';
import Project from '@ncigdc/components/Project';

import { EXPERIMENTAL_STRATEGIES, DATA_CATEGORIES } from '@ncigdc/utils/constants';

import type { TRawQuery } from '@ncigdc/utils/uri/types';

export type TProps = {
  viewer: {
    cohort: {
      cases: {
        clinicalCount: {
          pagination: {
            total: number,
          },
        },
        biospecimenCount: {
          pagination: {
            total: number,
          },
        },
      },
    },
    annotations: {
      hits: {
        edges: [
          {
            node: {
              annotation_id: string,
            },
          },
        ],
        pagination: {
          total: number,
        },
      },
    },
  },
  node: {
    disease_type: string,
    name: string,
    primary_site: string,
    program: {
      name: string,
    },
    project_id: string,
    summary: {
      case_count: number,
      data_categories: {
        case_count: number,
        data_category: string,
        file_count: number,
      },
      experimental_strategies: {
        case_count: number,
        experimental_strategy: string,
        file_count: number,
      },
      file_count: number,
    },
  },
};

export const ProjectPageComponent = ({
  node,
  viewer: {
    annotations,
    cohort: {
      cases: {
        clinicalCount,
        biospecimenCount,
      },
    },
  },
}: TProps) => (
  <SideNavLayout
    links={[
      { icon: 'table', title: 'Summary', id: 'summary' },
      { icon: 'bar-chart-o', title: 'Mutated Genes', id: 'mutated-genes' },
      { icon: 'th', title: 'OncoGrid', id: 'oncogrid' },
      { icon: 'bar-chart-o', title: 'Frequent Mutations', id: 'frequent-mutations' },
      { icon: 'bar-chart-o', title: 'Most Affected Cases', id: 'most-affected-cases' },
    ]}
    title={node.project_id}
    entityType="PR"
  >
    <LocationSubscriber>
      {
        (ctx: {| pathname: string, query: TRawQuery |}) => (
          <Project
            query={ctx.query}
            clinicalCount={clinicalCount.pagination.total}
            biospecimenCount={biospecimenCount.pagination.total}
            totalAnnotations={annotations.hits.pagination.total || 0}
            annotations={annotations.hits.edges.map(e => e.node)}
            caseCount={node.summary.case_count}
            fileCount={node.summary.file_count}
            projectId={node.project_id}
            projectName={node.name}
            programName={node.program.name}
            diseaseType={[node.disease_type]}
            primarySite={[node.primary_site]}
            dataCategories={
              Object.keys(DATA_CATEGORIES).reduce((acc, key) => {
                const type = node.summary.data_categories.find(item => item.data_category === DATA_CATEGORIES[key].full);

                return acc.concat(type || {
                  data_category: DATA_CATEGORIES[key].full,
                  file_count: 0,
                  case_count: 0,
                });
              }, [])
            }
            experimentalStrategies={
              EXPERIMENTAL_STRATEGIES.reduce((acc, name) => (
                [
                  ...acc,
                  ...node.summary.experimental_strategies.filter(item => (
                    item.experimental_strategy.toLowerCase() === name)
                  ),
                ]
              ), [])
            }
          />
        )
      }
    </LocationSubscriber>
  </SideNavLayout>
);

export const ProjectPageQuery = {
  initialVariables: {
    clinicalFilters: null,
    biospecimenFilters: null,
  },
  fragments: {
    viewer: () => Relay.QL`
      fragment on Root {
        cohort {
          cases {
            clinicalCount: hits(first: 0, filters: $clinicalFilters){
              pagination {
                total
              }
            }
            biospecimenCount: hits(first: 0, filters: $biospecimenFilters){
              pagination {
                total
              }
            }
          }
        }
        annotations {
          hits(first: 1, filters: {op: "AND", content: [{op: "=", content:{field: "project.project_id", value:"TCGA-KIRC"}}]}) {
            pagination {
              total
            }
            edges {
              node {
                annotation_id
              }
            }
          }
        }
      }
    `,
    node: () => Relay.QL`
      fragment on Project {
        project_id
        name
        disease_type
        program {
          name
        }
        primary_site
        summary {
          case_count
          file_count
          experimental_strategies {
            experimental_strategy
            file_count
            case_count
          }
          data_categories {
            data_category
            file_count
            case_count
          }
        }
      }
    `,
  },
};

const ProjectPage = Relay.createContainer(
  ProjectPageComponent,
  ProjectPageQuery
);

export default ProjectPage;
