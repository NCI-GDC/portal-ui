// @flow

import React from 'react';
import Relay from 'react-relay';
import withSize from 'react-sizeme';
import { startCase, truncate, omit } from 'lodash';
import { lifecycle, compose } from 'recompose';
import withRouter from '@ncigdc/utils/withRouter';
import { parseFilterParam } from '@ncigdc/utils/uri';
import SpinnerParticle from '@ncigdc/uikit/Loaders/Particle';
import { withTheme } from '@ncigdc/theme';
import { graphTitle } from '@ncigdc/theme/mixins';
import { Row } from '@ncigdc/uikit/Flex';
import DownloadVisualizationButton from '@ncigdc/components/DownloadVisualizationButton';
import BarChart from '@ncigdc/components/Charts/BarChart';
import GeneLink from '@ncigdc/components/Links/GeneLink';

const impactColors = {
  HIGH: 'rgb(185, 36, 36)',
  MODERATE: 'rgb(193, 158, 54)',
  LOW: 'rgb(49, 161, 60)',
};

const mapData = (data: Array<Object>, projectId: string): Array<Object> => (
  data.map((hit) => {
    const { transcript } = hit.consequence.hits.edges.find(c => c.node.transcript.is_canonical).node;
    const { annotation = {}, consequence_type = '', gene_symbol, aa_change } = transcript;
    const impact = annotation.impact;

    return {
      ...hit,
      score: hit.score,
      num_affected_cases_all: hit.occurrence.hits.total,
      num_affected_cases_project: hit.occurrence.hits.edges.filter(o =>
        o.node.case.project.project_id === projectId
      ).length,
      num_affected_cases_by_project: hit.occurrence.hits.edges.reduce((acc, o) => ({
        ...acc,
        [o.node.case.project.project_id]: acc[o.node.case.project.project_id] ? acc[o.node.case.project.project_id] + 1 : 1,
      }), {}),
      impact,
      consequence_type: (
        <span>
          <b>{startCase(consequence_type.replace('variant', ''))}</b>
          <span style={{ marginLeft: '5px' }}>
            <GeneLink id={gene_symbol}>
              {gene_symbol}
            </GeneLink>
          </span>
          <span
            style={{
              marginLeft: '5px',
              color: impactColors[impact] || 'inherit',
            }}
          >
            {truncate(aa_change)}
          </span>
        </span>
      ),
    };
  })
);

const FrequentMutationsChartComponent = compose(
  withRouter,
  lifecycle({
    componentDidMount() {
      this.props.relay.setVariables({
        fetchData: true,
        fmChart_filters: parseFilterParam(this.props.query.fmChart_filters, this.props.defaultFilters || null),
      });
    },
  }),
  withTheme,
  withSize()
)(({
  numCasesAggByProject,
  projectId = '',
  theme,
  showSurvivalPlot,
  size: {
    width,
  },
  cohort: { ssms, cases },
}) => {
  if (!ssms) {
    return (
      <Row style={{ justifyContent: 'center', padding: '1rem' }}>
        <SpinnerParticle />
      </Row>
    );
  }

  const data = mapData(ssms.hits.edges.map(x => x.node), projectId);

  const chartMargin = { top: 30, right: 50, bottom: 105, left: 40 };

  const bandWidth = (
    (width - chartMargin.right - chartMargin.left) /
    (ssms.length + 1) / (showSurvivalPlot ? 2 : 1)
  ) * 0.7;

  return (
    <span style={{ flex: 1 }}>
      <div style={{ textAlign: 'right', marginRight: 50, marginLeft: 30 }}>
        <DownloadVisualizationButton
          svg="#mutation-chart svg"
          data={data.map(fm => omit(fm, 'consequence_type'))}
          slug="bar-chart"
          noText
          tooltipHTML="Download image or data"
        />
      </div>
      <div style={graphTitle()}>Distribution of Most Frequent Mutations</div>
      <Row id="mutation-chart" style={{ padding: '10px', justifyContent: 'center' }}>
        <BarChart
          bandwidth={bandWidth}
          data={data
            .sort((a, b) => b.num_affected_cases_all - a.num_affected_cases_all)
            .map(x => ({
              label: `${x.ssm_id.substr(0, 8)}...`,
              value: x.score,
              tooltip: projectId
              ? (
                <span>
                  <b>{x.ssm_id}</b><br />
                  <div>{x.num_affected_cases_project} Case{x.num_affected_cases_project > 1 ? 's' : ''}
                  &nbsp;affected in {projectId}</div>
                  <div>{x.num_affected_cases_project} / {numCasesAggByProject[projectId]}
                  &nbsp;({((x.num_affected_cases_project / numCasesAggByProject[projectId]) * 100).toFixed(2)}%)</div>
                </span>
              )
              : (
                <span><b>{x.ssm_id}</b><br />
                  <div>{x.num_affected_cases_all} Case{x.num_affected_cases_all > 1 ? 's ' : ' '}
                    &nbsp;affected in all projects</div>
                  <div>{x.num_affected_cases_all} / {cases.hits.total}
                  &nbsp;({((x.num_affected_cases_all / cases.hits.total) * 100).toFixed(2)}%)</div>
                </span>
              ),
              href: `ssms/${x.ssm_id}`,
            }))}
          margin={chartMargin}
          height={250}
          yAxis={{ title: '# Affected Cases' }}
          styles={{
            xAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
            yAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
            bars: { fill: theme.secondary },
            tooltips: {
              fill: '#fff',
              stroke: theme.greyScale4,
              textFill: theme.greyScale3,
            },
          }}
        />
      </Row>
    </span>
  );
});

export const FrequentMutationsChartQuery = {
  initialVariables: {
    fetchData: false,
    fmChart_filters: null,
    score: 'occurrence.case.project.project_id',
  },
  fragments: {
    cohort: () => Relay.QL`
      fragment on Cohort {
        cases {
          hits(first: 0) { total }
        }
        ssms @include(if: $fetchData) {
          hits (first: 20 filters: $fmChart_filters, score: $score) @include(if: $fetchData) {
            total
            edges {
              node {
                score
                genomic_dna_change
                ssm_id
                consequence {
                  hits(first: 99) {
                    edges {
                      node {
                        transcript {
                          is_canonical
                        }
                      }
                    }
                  }
                }
                occurrence {
                  hits(first: 1) {
                    total
                    edges {
                      node {
                        case {
                          project {
                            project_id
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const FrequentMutationsChart = Relay.createContainer(
  FrequentMutationsChartComponent,
  FrequentMutationsChartQuery
);

export default FrequentMutationsChart;
