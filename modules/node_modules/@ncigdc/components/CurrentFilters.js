// @flow
/* eslint fp/no-this: 0 */

// Vendor
import React from 'react';
import { take, xor } from 'lodash';
import UndoIcon from 'react-icons/lib/md/undo';
import LeftArrow from 'react-icons/lib/fa/long-arrow-left';
import Cogs from 'react-icons/lib/fa/cogs';
import Color from 'color';
import { compose, withState, pure, withHandlers, withPropsOnChange, withProps } from 'recompose';

import withRouter from '@ncigdc/utils/withRouter';
import { humanify } from '@ncigdc/utils/string';
import { parseFilterParam } from '@ncigdc/utils/uri';

import Button from '@ncigdc/uikit/Button';
import { Row, Column } from '@ncigdc/uikit/Flex';
import Info from '@ncigdc/uikit/Info';

import styled from '@ncigdc/theme/styled';
import { buttonLike } from '@ncigdc/theme/mixins';

import Link from './Links/Link';

/*----------------------------------------------------------------------------*/

const Field = styled(Button, ({
  backgroundColor: ({ theme }) => theme.greyScale2,
  ':hover': {
    backgroundColor: ({ theme }) => Color(theme.greyScale2).lighten(0.7).rgbString(),
  },
}));

const Value = styled(Button, ({
  backgroundColor: ({ theme }) => theme.success,
  ':hover': {
    backgroundColor: ({ theme }) => Color(theme.success).lighten(0.7).rgbString(),
  },
}));

const Op = styled.span({
  ...buttonLike,
  backgroundColor: ({ theme }) => theme.primary,
  color: 'white',
});

type TProps = {
  currentFilters: Array<Object>,
  onLessClicked: Function,
  isFilterExpanded: Function,
  style: Object,
};

const NotUnderlinedLink = styled(Link, {
  ':link': {
    textDecoration: 'none',
  },
});

const getRepositoryField = ({ content: { field } }) => {
  if (field.indexOf('summary') > -1) {
    return `files.${field.split('.').pop()}`;
  }
  if (field.indexOf('primary_site') > -1 || field.indexOf('disease_type') > -1) {
    return field.replace('projects', 'cases');
  }

  return field.replace('projects', 'cases.project');
};

const enhance = compose(
  withRouter,
  withPropsOnChange(
    ({ location }, { location: previousLocation }) => location.search !== previousLocation.search,
    ({ query }) => ({
      currentFilters: parseFilterParam(query.filters, { content: [] }).content,
    })
  ),
  withState('expandedFilters', 'setExpandedFilters', []),
  withProps(({ expandedFilters }) => ({
    isFilterExpanded: (filter) => expandedFilters.includes(filter),
  })),
  withHandlers({
    onLessClicked: ({ expandedFilters, setExpandedFilters }) => filter => {
      setExpandedFilters(xor(expandedFilters, [filter]));
    },
  }),
  pure
);

const CurrentFilters = ({
  currentFilters,
  onLessClicked,
  isFilterExpanded,
  style,
  showRepositoryQuery = false,
}: TProps) => {
  const styles = {
    leftParen: {
      fontSize: '2rem',
      marginRight: '0.3rem',
      display: 'flex',
      alignItems: 'center',
    },
    rightParen: {
      fontSize: '2rem',
      marginRight: '0.3rem',
      display: 'flex',
      alignItems: 'center',
    },
    groupPadding: {
      padding: '0.5rem 0',
    },
  };

  return (
    <Info style={style}>
      {!currentFilters.length &&
        <span style={{ display: 'flex', alignItems: 'center', lineHeight: '44px' }}>
          <LeftArrow />
          <span style={{ marginLeft: '0.6rem' }}>
            Start searching by selecting a facet
          </span>
        </span>
      }
      {!!currentFilters.length &&
        <Row
          style={{
            width: '100%',
            justifyContent: 'space-between',
          }}
        >
          <Row wrap spacing="0.3rem">
            <NotUnderlinedLink
              style={styles.groupPadding}
              query={{}}
            >
              <Button leftIcon={<UndoIcon />}>Clear</Button>
            </NotUnderlinedLink>

            {currentFilters.map((filter, i) => (
              <Row
                key={`${filter.content.field}.${filter.op}.${filter.content.value.map(v => v)}`}
                spacing="0.3rem"
                style={styles.groupPadding}
              >
                <NotUnderlinedLink
                  merge="toggle"
                  query={{
                    offset: 0,
                    filters: {
                      op: 'and',
                      content: [{
                        op: 'in',
                        content: {
                          field: filter.content.field,
                          value: filter.content.value,
                        },
                      }],
                    },
                  }}
                >
                  <Field>{humanify({ term: filter.content.field })}</Field>
                </NotUnderlinedLink>
                {filter.op === 'in' && filter.content.value.length === 1 &&
                  <Op>IS</Op>
                }
                {filter.op === 'in' && filter.content.value.length > 1 &&
                  <Op>IN</Op>
                }
                {filter.op !== 'in' && <Button style={styles.op}>{filter.op}</Button>}
                {filter.content.value.length > 1 && <span style={styles.leftParen}>(</span>}
                {(isFilterExpanded(filter) ? filter.content.value : take(filter.content.value, 2)).map(value => (
                  <NotUnderlinedLink
                    key={value}
                    merge="toggle"
                    query={{
                      offset: 0,
                      filters: {
                        op: 'and',
                        content: [{
                          op: 'in',
                          content: {
                            field: filter.content.field,
                            value: [value],
                          },
                        }],
                      },
                    }}
                  >
                    <Value>{value}</Value>
                  </NotUnderlinedLink>
                    ))}
                {filter.content.value.length > 2 &&
                  <span style={styles.rightParen} onClick={() => onLessClicked(filter)}>&#8230;</span>}
                {isFilterExpanded(filter) &&
                  <span
                    style={{ display: 'flex', alignItems: 'center' }}
                    onClick={() => onLessClicked(filter)}
                  >
                    Less
                  </span>}
                {filter.content.value.length > 1 && <span style={styles.rightParen}>)</span>}
                {i < currentFilters.length - 1 && <Op>AND</Op>}
              </Row>
            ))}
          </Row>
          {showRepositoryQuery &&
            <Row>
              <Column style={{ width: '205px' }}>
                <NotUnderlinedLink
                  style={styles.groupPadding}
                  pathname={'/repository'}
                  query={{
                    filters: {
                      op: 'and',
                      content: currentFilters.map(x => ({
                        op: 'in',
                        content: {
                          field: getRepositoryField(x),
                          value: x.content.value,
                        },
                      })),
                    },
                  }}
                >
                  <Button leftIcon={<Cogs />}>
                    Open Query in Data Page
                  </Button>
                </NotUnderlinedLink>
              </Column>
            </Row>
          }
        </Row>
      }
    </Info>
  );
};

/*----------------------------------------------------------------------------*/

export default enhance(CurrentFilters);
