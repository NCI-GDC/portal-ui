variables_hash_max_size 1024;

#add custom log format to capture request processing time
log_format custom '{'
    '"timestamp": "$time_iso8601", '
    '"http_x_forwarded_for": "$http_x_forwarded_for", '
    '"host": "$host", '
    '"remote_addr": "$remote_addr", '
    '"remote_user": "$remote_user", '
    '"response_size": "$body_bytes_sent", '
    '"request_time": "$request_time", '
    '"response_code": "$status", '
    '"request": "$request", '
    '"request_method": "$request_method", '
    '"http_referrer": "$http_referer", '
    '"http_user_agent": "$http_user_agent" '
    '}';

server {
    listen         80;
    server_name    portal.gdc.cancer.gov;
    # dnsmasq server,
    # this is used for resolving portal.gdc.cancer.gov to authpublic.service.consul
    resolver kube-dns.kube-system ipv6=off;
    set $namespace {{ .Release.Namespace }};
    #.default.svc.cluster.local
    set $dns_domain  "$namespace.svc.cluster.local";
    access_log /var/log/nginx/access.log custom;
    error_log /var/log/nginx/error.log info;


    # multipart upload max size is 5 GiB
    client_max_body_size 6G;
    server_tokens off;
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Xss-Protection "1; mode=block";

    # blocking admin endpoints via portalrevproxy
    location /auth/api/v0/admin { return 404; }
    location /auth/api/admin { return 404; }
    location /auth/api/legacy/v0/admin { return 404; }
    location /auth/api/legacy/admin { return 404; }
    location /auth/api/v0/legacy/v0/admin { return 404; }
    location /auth/api/v0/legacy/admin { return 404; }

    set $portal_proxy_endpoint http://portal.$dns_domain;
    location / {
    # Call auth service to get csrftoken cookie set header if
    # there is no csrftoken cookie for current user
    set $csrf_header '';
    rewrite_by_lua '
    if not ngx.var.cookie_csrftoken and ngx.var.cookie_sessionid then
    local res = ngx.location.capture("/auth/csrftoken");
    if res.status == 200 then
    ngx.header["Set-Cookie"] = res.header["Set-Cookie"];
    end;
    end';

    # Define proxy endpoint in a variable to make DNS load balancing work:
    # https://serverfault.com/q/240476
    proxy_pass $portal_proxy_endpoint;
    include /etc/nginx/proxy_params;


    add_header Cache-Control no-cache;

    add_header Set-Cookie $csrf_header;
}

set $legacy_proxy_endpoint http://legacyportal.$dns_domain;
    location /legacy-archive {
        # Call auth service to get csrftoken cookie set header if
        # there is no csrftoken cookie for current user
    set $csrf_header '';
    rewrite_by_lua '
    if not ngx.var.cookie_csrftoken and ngx.var.cookie_sessionid then
    local res = ngx.location.capture("/auth/csrftoken");
    if res.status == 200 then
    ngx.header["Set-Cookie"] = res.header["Set-Cookie"];
    end;
    end';

        # Define proxy endpoint in a variable to make DNS load balancing work:
        # https://serverfault.com/q/240476
        # Rewrite is needed to route to '/endpoint' instead of '/legacy-archive/endpoint'
    rewrite ^/legacy-archive/(.*) /$1 break;
    proxy_next_upstream off;
    proxy_pass $legacy_proxy_endpoint;
    include /etc/nginx/proxy_params;


    add_header Cache-Control no-cache;

    add_header Set-Cookie $csrf_header;
}


set $submission_proxy_endpoint http://submissionui.$dns_domain;
    location /submission/ {
    set $csrf_header '';
    rewrite_by_lua '
    if not ngx.var.cookie_csrftoken and ngx.var.cookie_sessionid then
    local res = ngx.location.capture("/auth/csrftoken");
    if res.status == 200 then
    ngx.header["Set-Cookie"] = res.header["Set-Cookie"];
    end;
    end';

        # Define proxy endpoint in a variable to make DNS load balancing work:
        # https://serverfault.com/q/240476
        # Rewrite is needed to route to '/endpoint' instead of '/submission/endpoint'
    rewrite ^/submission/(.*) /$1 break;
    proxy_next_upstream off;
    proxy_pass $submission_proxy_endpoint;
    include /etc/nginx/proxy_params;


    add_header Cache-Control no-cache;

    add_header Set-Cookie $csrf_header;
}


# auth endpoint
set $auth_proxy_endpoint http://authpublic.$dns_domain;
    location /auth/ {
        # Define proxy endpoint in a variable to make DNS load balancing work:
        # https://serverfault.com/q/240476
    proxy_pass $auth_proxy_endpoint;
    proxy_set_header Host $http_host;
    include /etc/nginx/proxy_params;
}

# csrf and session translation are handled by the separate authorization
# service since they don't need Shibboleth
set $authorization_proxy_endpoint http://authorization.$dns_domain;
location /auth/csrftoken {
    proxy_pass $authorization_proxy_endpoint;
    include /etc/nginx/proxy_params;
}
location /auth/translate-token {
    proxy_pass $authorization_proxy_endpoint;
    include /etc/nginx/proxy_params;
}

# general api requests are directly passed to api.service.consul
#set $api_proxy_endpoint https://api.service.consul;
set $api_proxy_endpoint http://api.$dns_domain;
location /auth/api {
    proxy_read_timeout 600s;
    set $auth_header '';
    rewrite_by_lua '
        -- if the browser has an active session, fetch the saved token
        if ngx.var.cookie_sessionid then
            local res = ngx.location.capture("/auth/translate-token");
            if res.status == 200 then
                ngx.var.auth_header = res.header["X-Auth-Token"];
                ngx.header.set_cookie = res.header["Set-Cookie"];
        else
            ngx.var.auth_header = res.body;
            end;
        end;
    ';
    include /etc/nginx/proxy_params;
    # Define proxy endpoint in a variable to make DNS load balancing work:
    # https://serverfault.com/q/240476
    # Rewrite is needed to route to '/endpoint' instead of '/auth/api/endpoint'
    rewrite ^/auth/api/(.*) /$1 break;
    #proxy_next_upstream off;
    proxy_pass $api_proxy_endpoint;
    proxy_set_header X-Auth-Token $auth_header;
    #proxy_set_header Host api.default.service.cluster.local;
}

set $legacy_api_proxy_endpoint http://apilegacy.$dns_domain;
location /auth/api/legacy {
    set $auth_header '';
    rewrite_by_lua '
        if string.match(ngx.var.uri, "/data") or
            string.match(ngx.var.uri, "/submission") or
            string.match(ngx.var.uri, "/slicing") then
            -- if the browser has an active session, fetch the saved token
            if ngx.var.cookie_sessionid then
            local res = ngx.location.capture("/auth/translate-token");
            if res.status == 200 then
                ngx.var.auth_header = res.header["X-Auth-Token"];
                ngx.header.set_cookie = res.header["Set-Cookie"];
            else
                ngx.var.auth_header = res.body;
                end;
            end;
        end;
    ';
    include /etc/nginx/proxy_params;
    # Define proxy endpoint in a variable to make DNS load balancing work:
    # https://serverfault.com/q/240476
    # Rewrite is needed to route to '/endpoint' instead of '/auth/api/legacy/endpoint'
    rewrite ^/auth/api/legacy/(.*) /$1 break;
    proxy_next_upstream off;
    proxy_pass $legacy_api_proxy_endpoint;
    proxy_set_header X-Auth-Token $auth_header;
}

set $legacy_v0_api_proxy_endpoint http://apilegacy.$dns_domain;
location /auth/api/v0/legacy {
    set $auth_header '';
    rewrite_by_lua '
        if string.match(ngx.var.uri, "/data") or
            string.match(ngx.var.uri, "/submission") or
            string.match(ngx.var.uri, "/slicing") then
            -- if the browser has an active session, fetch the saved token
            if ngx.var.cookie_sessionid then
                local res = ngx.location.capture("/auth/translate-token");
                if res.status == 200 then
                    ngx.var.auth_header = res.header["X-Auth-Token"];
                    ngx.header.set_cookie = res.header["Set-Cookie"];
                else
                    ngx.var.auth_header = res.body;
                end;
            end;
        end;
    ';
    include /etc/nginx/proxy_params;
        # Define proxy endpoint in a variable to make DNS load balancing work:
        # https://serverfault.com/q/240476
        # Rewrite is needed to route to '/endpoint' instead of '/auth/api/v0/legacy/endpoint'
    rewrite ^/auth/api/v0/legacy/(.*) /$1 break;
    proxy_next_upstream off;
    proxy_pass $legacy_v0_api_proxy_endpoint;
    proxy_set_header X-Auth-Token $auth_header;
    }
}
