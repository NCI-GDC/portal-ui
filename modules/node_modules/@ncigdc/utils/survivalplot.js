// @flow
import React from 'react';

import { replaceFilters } from '@ncigdc/utils/filters';
import styled from '@ncigdc/theme/styled';

type TPropsDefault = { slug?: string, totalCases?: number, currentFilters?: Object };
type TPropsMulti = { value: string, field: string, slug?: string, currentFilters: ?Object };

declare var API: string;

const MINIMUM_CASES = 10;

const Symbol = styled.span({
  fontSize: '1.2em',
});

export const enoughData = (data: Object) => data.results.length && data.results.every(r => r.donors.length >= MINIMUM_CASES);

async function fetchCurves(filters: ?Array<Object>): Promise<Object> {
  const url = `${API}analysis/survival?${filters ? `filters=${JSON.stringify(filters)}` : ''}`;
  const res = await fetch(url);
  const rawData = await res.json();
  return enoughData(rawData) ? rawData : { results: [] };
}

export const getDefaultCurve = async ({ slug, totalCases, currentFilters }: TPropsDefault): Promise<Object> => {
  const rawData = await fetchCurves(currentFilters && [currentFilters]);
  const hasEnoughData = enoughData(rawData);

  const legend = hasEnoughData ?
    totalCases && slug && [{ key: slug, value: `${totalCases} cases on ${slug}` }] :
    [{ key: `${slug || ''}-not-enough-data`, value: <span>Not enough data{slug && ` on ${slug}`}</span> }];

  return {
    rawData,
    id: slug,
    legend,
  };
};

export const getSurvivalCurves = async ({ value, field, slug, currentFilters }: TPropsMulti): Promise<Object> => {
  const filters = [
    replaceFilters(
      { op: 'and', content: [{ op: '=', content: { field, value } }] },
      currentFilters
    ),
    replaceFilters(
      { op: 'and', content: [{ op: 'excludeifany', content: { field, value } }] },
      currentFilters
    ),
  ];

  const rawData = await fetchCurves(filters);
  const hasEnoughData = enoughData(rawData);

  return {
    rawData,
    id: value,
    legend: hasEnoughData ? [
      {
        key: `${slug || value}-mutated`,
        value: (
          <span>
            S<sub>1</sub>(N={rawData.results[0].donors.length}) <Symbol>{slug || value}</Symbol> Mutated Cases
          </span>
        ),
      },
      {
        key: `${slug || value}-not-mutated`,
        value: (
          <span>
            S<sub>2</sub>(N={rawData.results[1].donors.length}) <Symbol>{slug || value}</Symbol> Not Mutated Cases
          </span>
        ),
      },
    ] : [
      {
        key: `${slug || value}-not-enough-data`,
        value: <span>Not enough data on {slug || value}</span>,
      },
    ],
  };
};
