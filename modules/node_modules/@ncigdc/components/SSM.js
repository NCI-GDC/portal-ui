// @flow

// Vendor
import React from 'react';
import { withState, lifecycle, compose } from 'recompose';
import { uniq, isEqual, get } from 'lodash';

import externalReferenceLinks from '@ncigdc/utils/externalReferenceLinks';

import { Row, Column } from '@ncigdc/uikit/Flex';
import { ExternalLink } from '@ncigdc/uikit/Links';
import { Tooltip } from '@ncigdc/uikit/Tooltip';

import GeneLink from '@ncigdc/components/Links/GeneLink';
import ImpactIcon from '@ncigdc/theme/icons/ImpactIcon';

import { tableToolTipHint } from '@ncigdc/theme/mixins';
import MinusIcon from '@ncigdc/theme/icons/Minus';
import PlusIcon from '@ncigdc/theme/icons/Plus';
import TableIcon from '@ncigdc/theme/icons/Table';
import BookIcon from '@ncigdc/theme/icons/Book';
import ChartIcon from '@ncigdc/theme/icons/BarChart';

import EntityPageVerticalTable from './EntityPageVerticalTable';
import EntityPageHorizontalTable from './EntityPageHorizontalTable';
import ProteinLolliplotComponent from './ProteinLolliplot';
import CancerDistribution from './CancerDistribution';

const styles = {
  heading: {
    flexGrow: 1,
    fontSize: '2rem',
    marginBottom: 7,
    marginTop: 7,
  },
  summary: {
    marginBottom: '2rem',
    minWidth: '450px',
  },
  column: {
    width: '100%',
    minWidth: 450,
  },
  card: {
    backgroundColor: 'white',
  },
};

const initialState = {
  vizLoading: true,
};

const Mutation = compose(
  withState('state', 'setState', initialState),
  withState('activeTranscript', 'setActiveTranscript'),
  lifecycle({
    componentWillReceiveProps(nextProps): void {
      if (!nextProps.ssms.length || !nextProps.gene) return;

      const canonicalTranscript = (nextProps.gene.transcripts.hits.edges.find(x => x.node.is_canonical) || {}).node;
      const activeTranscript = nextProps.activeTranscript;
      // eslint-disable-next-line fp/no-this
      if (!this.props.ssms.length || !isEqual(this.props.activeTranscript || canonicalTranscript, activeTranscript)) {
        const transcript = activeTranscript || canonicalTranscript;
        const ssms = nextProps.ssms.map(x => x.node);

        nextProps.setActiveTranscript(transcript);
        nextProps.setState(s => ({ ...s, vizLoading: false, lolliplotData: { ssms, transcript } }));
      }
    },

    componentWillUnmount(): void {
      window.selectedMutation = null; // eslint-disable-line fp/no-mutation
    },
  })
)(({
  node: mutation,
  allCasesAgg,
  gene,
  state: { vizLoading, lolliplotData },
  setActiveTranscript,
}) => {
  const allCasesAggByProject = allCasesAgg.reduce((acc, bucket) =>
    ({ ...acc, [bucket.key]: bucket.doc_count }), {}
  );
  const consequences = mutation.consequence.hits.edges;
  const dbSNP = consequences.reduce((acc, c) =>
    c.node.transcript.annotation.dbsnp_rs ? c.node.transcript.annotation.dbsnp_rs : acc, '');
  const cosmic = consequences.reduce((acc, c) =>
    c.node.transcript.annotation.cosmic_id ? c.node.transcript.annotation.cosmic_id : acc, []);
  const consequenceOfInterest = consequences.find(consequence => get(consequence, 'node.transcript.annotation.impact'), {});
  const functionalImpactTranscript = get(consequenceOfInterest, 'node.transcript', {});
  const functionalImpact = get(functionalImpactTranscript, 'annotation.impact');

  const cancerDistData = mutation.occurrence.hits.edges.reduce((acc, o) => {
    const cases = uniq([
      ...(acc[o.node.case.project.project_id] || { cases: [] }).cases,
      o.node.case.case_id,
    ]);
    return {
      ...acc,
      [o.node.case.project.project_id]: {
        disease_type: o.node.case.disease_type,
        cancer_type: o.node.case.project.cancer_type || 'tbd',
        site: o.node.case.primary_site,
        freq: cases.length / allCasesAggByProject[o.node.case.project.project_id],
        cases,
      },
    };
  }, {});

  const sortedCancerDistData = Object.keys(cancerDistData)
    .map(k => ({ project_id: k, ...cancerDistData[k] }))
    .sort((a, b) => b.freq - a.freq);

  const distinctCases = sortedCancerDistData.reduce((acc, d) => [...acc, ...d.cases], []);

  const strandIconMap = {
    '-1': <MinusIcon />,
    1: <PlusIcon />,
  };

  const consequenceData = consequences.reduce((acc, c) => {
    const { gene: { gene_id }, transcript_id } = c.node.transcript;

    const transcripts = uniq([
      ...((acc[gene_id] || {}).transcripts || []),
      transcript_id,
    ]);

    const canonicalOnly = c.node.transcript.is_canonical
      ? {
        aa_change: c.node.transcript.aa_change,
        coding_dna_change: c.node.transcript.annotation.hgvsc,
        consequence: c.node.transcript.consequence_type,
        strand: c.node.transcript.gene.gene_strand,
        canonical_transcript_id: transcript_id,
      }
      : {};

    return {
      ...acc,
      [gene_id]: {
        ...acc[gene_id],
        gene_id,
        symbol: c.node.transcript.gene.symbol,
        transcripts,
        ...canonicalOnly,
      },
    };
  }, {});

  const consquenceDataMapped = Object.values(consequenceData)
    .map(d => ({
      ...d,
      symbol: d.symbol && <GeneLink id={d.gene_id}>{d.symbol}</GeneLink>,
      transcripts: (
        <ul style={{ listStyle: 'none', paddingLeft: 0, marginBottom: 0 }}>
          {d.transcripts.map(t =>
            <li
              key={t}
              style={{ fontWeight: t === functionalImpactTranscript.transcript_id ? 'bold' : 'normal' }}
            >
              {
                t && (
                  <ExternalLink
                    key={t}
                    style={{ paddingRight: '0.5em' }}
                    href={externalReferenceLinks.ensembl(t)}
                  >
                    {t}
                  </ExternalLink>
                )
              }
            </li>
          )}
        </ul>
      ),
      strand: d.strand && strandIconMap[d.strand.toString(10)],
    }))
    .filter(d => d.gene_id);

  return (
    <span>
      <Row spacing="2rem" id="summary">
        <EntityPageVerticalTable
          id="Summary"
          title={<span><TableIcon style={{ marginRight: '1rem' }} />Summary</span>}
          thToTd={[
            { th: 'ID', td: mutation.ssm_id },
            {
              th: 'DNA change',
              td:
                `${mutation.chromosome}:g.${mutation.start_position}`
              + `${mutation.reference_allele}>${mutation.tumor_allele}`,
            },
            { th: 'Type', td: mutation.mutation_subtype },
            { th: 'Reference genome assembly', td: mutation.ncbi_build || '' },
            { th: 'Allele in the reference assembly', td: mutation.reference_allele || '' },
            { th: 'Functonal Impact (VEP)',
              td: (functionalImpact &&
                <div>
                  <ImpactIcon impact={functionalImpact} />
                  <span
                    style={{
                      display: 'inline-block',
                      textTransform: 'capitalize',
                      marginLeft: '0.4em',
                      marginRight: '0.4em',
                    }}
                  >
                    {functionalImpact.toLowerCase()}
                  </span>
                  <ExternalLink
                    key={functionalImpactTranscript.transcript_id}
                    style={{ paddingRight: '0.5em' }}
                    href={externalReferenceLinks.ensembl(functionalImpactTranscript.transcript_id)}
                  >
                    {functionalImpactTranscript.transcript_id}
                  </ExternalLink>
                </div>
              ),
              style: { textTransform: 'capitalize' } },
          ]}
          style={{
            ...styles.summary,
            ...styles.column,
            alignSelf: 'flex-start',
          }}
        />
        <EntityPageVerticalTable
          title={<span><BookIcon style={{ marginRight: '1rem' }} /> External References</span>}
          thToTd={[
            { th: (<span style={{ textTransform: 'none' }}>dbSNP</span>), td: (dbSNP && /rs(\d+)$/g.test(dbSNP)) ? dbSNP : '--' },
            { th: 'COSMIC', td: (cosmic.length ? <ul style={{ listStyle: 'none', paddingLeft: 0, marginBottom: 0 }}>
              {cosmic.map(
                (c, i) => (
                  <li key={i}>
                    <ExternalLink
                      href={externalReferenceLinks.cosmic(c.match(/(\d+)$/g))}
                    >
                      {c}
                    </ExternalLink>
                  </li>
                ))
              }
            </ul> : '--') },
          ]}
          style={{ ...styles.summary, ...styles.column, alignSelf: 'flex-start' }}
        />
      </Row>
      <Column style={styles.card}>
        <h1 id="consequences" style={{ ...styles.heading, padding: '1rem' }}>
          <TableIcon style={{ marginRight: '1rem' }} />
          Consequences
        </h1>
        <Row>
          <EntityPageHorizontalTable
            style={{ width: '100%', minWidth: '450px' }}
            headings={[
              { key: 'symbol', title: 'Gene' },
              { key: 'aa_change', title: 'AA Change' },
              { key: 'consequence',
                title: (
                  <Tooltip
                    Component={'SO Term: consequence type'}
                    style={tableToolTipHint()}
                  >
                    Consequence
                  </Tooltip>
                ),
              },
              { key: 'coding_dna_change', title: 'Coding DNA Change' },
              { key: 'strand', title: 'Strand' },
              { key: 'transcripts', title: 'Transcript(s)' },
            ]}
            data={consquenceDataMapped}
          />
        </Row>
      </Column>
      <Column style={{ ...styles.card, marginTop: '2rem' }} id="cancer-distribution">
        <Row>
          <h1 style={{ ...styles.heading, padding: '1rem' }}>
            <ChartIcon style={{ marginRight: '1rem' }} />
            Cancer Distribution
          </h1>
        </Row>
        <CancerDistribution
          tableHeadings={[
            { key: 'project_id', title: 'Project ID' },
            { key: 'disease_type', title: 'Disease Type' },
            { key: 'site', title: 'Site' },
            {
              key: 'num_affected_cases',
              title: '# Affected Cases',
            },
          ]}
          tableData={sortedCancerDistData.map(d => ({
            ...d,
            project_id: <a href={`/projects/${d.project_id}`}>{d.project_id}</a>,
            num_affected_cases:
              `${d.cases.length} / ${allCasesAggByProject[d.project_id]} (${(d.freq * 100).toFixed(2)}%)`,
          }))}
          chartData={sortedCancerDistData.map(d => ({
            label: d.project_id,
            value: (d.freq * 100),
            tooltip: <span><b>{d.project_id}</b><br />{(d.freq * 100).toFixed(2)}%</span>,
          }))}
          tagline={`This mutation affects
          ${distinctCases.length} distinct case${distinctCases.length > 1 ? 's' : ''} across
          ${sortedCancerDistData.length} cancer projects`}
        />
      </Column>
      {gene && (
        <Column style={{ ...styles.card, marginTop: '2rem' }}>
          <ProteinLolliplotComponent
            gene={gene}
            loading={vizLoading}
            transcripts={gene.transcripts.hits.edges.map(x => x.node)}
            selectTranscript={setActiveTranscript}
            data={lolliplotData}
          />
        </Column>
      )}
    </span>
  );
});

export default Mutation;
