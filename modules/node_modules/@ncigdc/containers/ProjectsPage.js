/* @flow */

import React from 'react';
import Relay from 'react-relay';
import { withState, compose } from 'recompose';

import SearchPage from '@ncigdc/components/SearchPage';
import ProjectsCharts from '@ncigdc/components/ProjectsCharts';
import TabbedLinks from '@ncigdc/components/TabbedLinks';
import GitHut from '@ncigdc/components/GitHut';
import UnstyledButton from '@ncigdc/uikit/UnstyledButton';
import { DoubleArrowLeftIcon } from '@ncigdc/theme/icons/index';

import ProjectTable from './ProjectTable';
import ProjectAggregations from './ProjectAggregations';



export type TProps = {
  relay: Object,
  viewer: {
    autocomplete: {
      hits: Array<Object>,
    },
    projects: {
      aggregations: string,
      hits: string,
    },
  },
  showFacets: boolean,
  setShowFacets: Function,
};

const enhance = compose(
  withState('showFacets', 'setShowFacets', true)
);

export const ProjectsPageComponent = (props: TProps) => (
  <SearchPage
    toggleShowFacets={() => props.setShowFacets(!props.showFacets)}
    showFacets={props.showFacets}
    facets={
      <TabbedLinks
        queryParam="facetTab"
        defaultIndex={0}
        tabToolbar={(
          <UnstyledButton
            onClick={() => {
              props.setShowFacets(!props.showFacets);
            }}
            style={{ padding: '1.2rem 0' }}
          >
            <DoubleArrowLeftIcon /> Hide Filters
          </UnstyledButton>
        )}
        links={[
          {
            id: 'projects',
            text: 'Projects',
            component: (
              <ProjectAggregations
                aggregations={props.viewer.projects.aggregations}
                suggestions={(props.viewer.autocomplete || { hits: [] }).hits}
                setAutocomplete={value => props.relay.setVariables({ idAutocomplete: value, runAutocomplete: !!value })}
              />
            ),
          },
        ]}
      />
    }
    results={
      <TabbedLinks
        queryParam="projectsTableTab"
        defaultIndex={0}
        links={[
          {
            id: 'table',
            text: 'Table',
            component: <ProjectTable hits={props.viewer.projects.hits} />,
          },
          {
            id: 'graph',
            text: 'Graph',
            component: <GitHut params={props.relay.route.params} />,
          },
        ]}
      />
    }
    charts={<ProjectsCharts hits={props.viewer.projects.hits} />}
  />
);

export const ProjectsPageQuery = {
  initialVariables: {
    size: 1000,
    offset: null,
    filters: null,
    sort: null,
    idAutocomplete: null,
    runAutocomplete: false,
    projects_sort: null,
  },
  fragments: {
    viewer: () => Relay.QL`
      fragment on Root {
        autocomplete: query(query: $idAutocomplete types: ["project"]) @include(if: $runAutocomplete) {
          hits {
            id
            ...on Project {
              project_id
              name
              primary_site
            }
          }
        }
        projects {
          aggregations(filters: $filters) {
            ${ProjectAggregations.getFragment('aggregations')}
          }
          hits(first: $size offset: $offset, sort: $projects_sort, filters: $filters) {
            ${ProjectTable.getFragment('hits')}
            ${ProjectsCharts.getFragment('hits')}
          }
        }
      }
    `,
  },
};

const ProjectsPage = Relay.createContainer(
  enhance(ProjectsPageComponent),
  ProjectsPageQuery
);

export default ProjectsPage;
