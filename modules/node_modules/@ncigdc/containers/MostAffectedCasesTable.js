// @flow

import React from 'react';
import Relay from 'react-relay';
import withSize from 'react-sizeme';
import { isEqual } from 'lodash';
import { lifecycle, compose } from 'recompose';

import { parseIntParam, parseFilterParam } from '@ncigdc/utils/uri';
import Showing from '@ncigdc/components/Pagination/Showing';
import { withTheme } from '@ncigdc/theme';
import ageDisplay from '@ncigdc/utils/ageDisplay';
import { DATA_CATEGORIES } from '@ncigdc/utils/constants';
import { tableToolTipHint } from '@ncigdc/theme/mixins';
import CaseLink from '@ncigdc/components/Links/CaseLink';
import withRouter from '@ncigdc/utils/withRouter';
import Loader from '@ncigdc/uikit/Loaders/Loader';
import { RepositoryFilesLink } from '@ncigdc/components/Links/RepositoryLink';
import { makeFilter } from '@ncigdc/utils/filters';
import EntityPageHorizontalTable from '@ncigdc/components/EntityPageHorizontalTable';
import { Row } from '@ncigdc/uikit/Flex';
import { Tooltip } from '@ncigdc/uikit/Tooltip';
import Pagination from '@ncigdc/components/Pagination';

const MostAffectedCasesTableComponent = compose(
  withRouter,
  lifecycle({
    componentDidMount() {
      this.props.relay.setVariables({
        fetchData: true,
        macTable_offset: parseIntParam(this.props.query.macTable_offset, 0),
        macTable_size: parseIntParam(this.props.query.macTable_size, 10),
        macTable_filters: parseFilterParam(this.props.query.macTable_filters, this.props.defaultFilters || null),
      });
    },
    componentWillReceiveProps(nextProps) {
      if (!isEqual(this.props.query, nextProps.query)) {
        this.props.relay.setVariables({
          macTable_offset: parseIntParam(nextProps.query.macTable_offset, 0),
          macTable_size: parseIntParam(nextProps.query.macTable_size, 10),
          macTable_filters: parseFilterParam(nextProps.query.macTable_filters, nextProps.defaultFilters || null),
        })
      }
      if (this.props.cohort.cases !== nextProps.cohort.cases) {
        const nextCaseIds = nextProps.cohort.cases.hits.edges.map(e => e.node.case_id);
        const currentCaseIds = (this.props.cohort.cases || { hits: { edges: [] } }).hits.edges.map(e => e.node.case_id);
        if (nextCaseIds !== currentCaseIds) {
          this.props.relay.setVariables(
            {
              ...nextCaseIds.reduce((acc, id, index) => ({
                ...acc,
                [`ssmsFilters${index}`]:
                  { op: 'and', content: [{ op: 'in', content: { field: 'occurrence.case.case_id', value: [id] } }] },
              }), {}),
              fetch10Ssms: true,
              fetch20Ssms: nextCaseIds.length >= 11,
              fetch40Ssms: nextCaseIds.length >= 21,
            }
          );
        }
      }
    },
  }),
  withTheme,
  withSize()
)(({
  cohort: { cases, mutationCounts10, mutationCounts20, mutationCounts40 },
  relay,
} = {}) => {
  if (cases && !cases.hits.edges.length) {
    return <Row style={{ padding: '1rem' }}>No data found.</Row>;
  }
  const mutationCountsArray = [
    ...Object.keys(mutationCounts10 || {}).filter(x => x !== '__dataID__').map(row => mutationCounts10[row].total),
    ...Object.keys(mutationCounts20 || {}).filter(x => x !== '__dataID__').map(row => mutationCounts20[row].total),
    ...Object.keys(mutationCounts40 || {}).filter(x => x !== '__dataID__').map(row => mutationCounts40[row].total),
  ];
  return (
    <Loader
      loading={!cases}
      height="387px"
    >
      <Row style={{ backgroundColor: 'white', padding: '1rem', justifyContent: 'space-between' }}>
        <Showing
          docType="cases"
          prefix={'macTable'}
          params={relay.route.params}
          total={!cases ? 0 : cases.hits.total}
        />
      </Row>
      <EntityPageHorizontalTable
        headings={[
          { key: 'id', title: 'UUID' },
          { key: 'primary_site', title: 'Site' },
          { key: 'gender', title: 'Gender' },
          { key: 'age_at_diagnosis', title: 'Age at Diagnosis' },
          { key: 'tumor_stage', title: 'Stage' },
          { key: 'days_to_death',
            title: <Tooltip Component='Survival (days)' style={tableToolTipHint()}>Survival</Tooltip>,
          },
          { key: 'days_to_last_follow_up',
            title: <Tooltip Component='Days to Last Follow Up' style={tableToolTipHint()}>Last Follow<br />Up</Tooltip>,
            style: { textAlign: 'right' },
          },
          { key: 'data_types',
            title: 'Available Files per Data Category',
            style: { textAlign: 'right' },
            subheadings: Object.keys(DATA_CATEGORIES).map(k =>
              <abbr key={DATA_CATEGORIES[k].abbr}>
                <Tooltip Component={DATA_CATEGORIES[k].full} style={tableToolTipHint()}>
                  {DATA_CATEGORIES[k].abbr}
                </Tooltip>
              </abbr>
            ),
          },
           {
             key: 'num_mutations',
             title: '# Mutations',
             style: { textAlign: 'right' },
           },
          {
            key: 'num_genes',
            title: '# Genes',
            style: { textAlign: 'right' },
          },
        ]}
        data={!cases ? [] : cases.hits.edges.map(x => x.node).map((c, index) => {
          const dataCategorySummary = c.summary.data_categories.reduce((acc, d) => ({
            ...acc, [d.data_category]: d.file_count,
          }), {});

          const diagnosis = (c.diagnoses.hits.edges[0] || { node: {} }).node;

          return {
            id: <CaseLink id={c.case_id} />,
            primary_site: c.primary_site,
            gender: c.demographic ? c.demographic.gender : '',
            age_at_diagnosis: ageDisplay(diagnosis.age_at_diagnosis),
            tumor_stage: diagnosis.tumor_stage,
            days_to_last_follow_up: diagnosis.days_to_last_follow_up,
            days_to_death: diagnosis.days_to_death,
            num_mutations: mutationCountsArray[index],
            num_genes: c.score,
            data_types: Object.keys(DATA_CATEGORIES).map(k => (
              dataCategorySummary[DATA_CATEGORIES[k].full] ? (
                <RepositoryFilesLink
                  query={{
                    filters: makeFilter([
                      { field: 'cases.case_id', value: c.case_id },
                      { field: 'files.data_category', value: DATA_CATEGORIES[k].full },
                    ], false),
                  }}
                >
                  {dataCategorySummary[DATA_CATEGORIES[k].full]}
                </RepositoryFilesLink>
              ) : '--'
            )
          ) };
        })}
      />
      <Pagination
        prefix={'macTable'}
        params={relay.route.params}
        total={!cases ? 0 : cases.hits.total}
      />
    </Loader>
  );
});

const mutationsFragment10 = Relay.QL`
fragment on Ssms {
  row0: hits(filters: $ssmsFilters0) {
    total
  }
  row1: hits(filters: $ssmsFilters1) {
    total
  }
  row2: hits(filters: $ssmsFilters2) {
    total
  }
  row3: hits(filters: $ssmsFilters3) {
    total
  }
  row4: hits(filters: $ssmsFilters4) {
    total
  }
  row5: hits(filters: $ssmsFilters5) {
    total
  }
  row6: hits(filters: $ssmsFilters6) {
    total
  }
  row7: hits(filters: $ssmsFilters7) {
    total
  }
  row8: hits(filters: $ssmsFilters8) {
    total
  }
  row9: hits(filters: $ssmsFilters9) {
    total
  }
}
`;

const mutationsFragment20 = Relay.QL`
fragment on Ssms {
  row0: hits(filters: $ssmsFilters10) {
    total
  }
  row1: hits(filters: $ssmsFilters11) {
    total
  }
  row2: hits(filters: $ssmsFilters12) {
    total
  }
  row3: hits(filters: $ssmsFilters13) {
    total
  }
  row4: hits(filters: $ssmsFilters14) {
    total
  }
  row5: hits(filters: $ssmsFilters15) {
    total
  }
  row6: hits(filters: $ssmsFilters16) {
    total
  }
  row7: hits(filters: $ssmsFilters17) {
    total
  }
  row8: hits(filters: $ssmsFilters18) {
    total
  }
  row9: hits(filters: $ssmsFilters19) {
    total
  }
}
`;

const mutationsFragment40 = Relay.QL`
fragment on Ssms {
  row0: hits(filters: $ssmsFilters20) {
    total
  }
  row1: hits(filters: $ssmsFilters21) {
    total
  }
  row2: hits(filters: $ssmsFilters22) {
    total
  }
  row3: hits(filters: $ssmsFilters23) {
    total
  }
  row4: hits(filters: $ssmsFilters24) {
    total
  }
  row5: hits(filters: $ssmsFilters25) {
    total
  }
  row6: hits(filters: $ssmsFilters26) {
    total
  }
  row7: hits(filters: $ssmsFilters27) {
    total
  }
  row8: hits(filters: $ssmsFilters28) {
    total
  }
  row9: hits(filters: $ssmsFilters29) {
    total
  }
  row10: hits(filters: $ssmsFilters30) {
    total
  }
  row11: hits(filters: $ssmsFilters31) {
    total
  }
  row12: hits(filters: $ssmsFilters32) {
    total
  }
  row13: hits(filters: $ssmsFilters33) {
    total
  }
  row14: hits(filters: $ssmsFilters34) {
    total
  }
  row15: hits(filters: $ssmsFilters35) {
    total
  }
  row16: hits(filters: $ssmsFilters36) {
    total
  }
  row17: hits(filters: $ssmsFilters37) {
    total
  }
  row18: hits(filters: $ssmsFilters38) {
    total
  }
  row19: hits(filters: $ssmsFilters39) {
    total
  }
}
`;

const SsmVariables = {
  ssmsFilters0: null,
  ssmsFilters1: null,
  ssmsFilters2: null,
  ssmsFilters3: null,
  ssmsFilters4: null,
  ssmsFilters5: null,
  ssmsFilters6: null,
  ssmsFilters7: null,
  ssmsFilters8: null,
  ssmsFilters9: null,
  ssmsFilters10: null,
  ssmsFilters11: null,
  ssmsFilters12: null,
  ssmsFilters13: null,
  ssmsFilters14: null,
  ssmsFilters15: null,
  ssmsFilters16: null,
  ssmsFilters17: null,
  ssmsFilters18: null,
  ssmsFilters19: null,
  ssmsFilters20: null,
  ssmsFilters21: null,
  ssmsFilters22: null,
  ssmsFilters23: null,
  ssmsFilters24: null,
  ssmsFilters25: null,
  ssmsFilters26: null,
  ssmsFilters27: null,
  ssmsFilters28: null,
  ssmsFilters29: null,
  ssmsFilters30: null,
  ssmsFilters31: null,
  ssmsFilters32: null,
  ssmsFilters33: null,
  ssmsFilters34: null,
  ssmsFilters35: null,
  ssmsFilters36: null,
  ssmsFilters37: null,
  ssmsFilters38: null,
  ssmsFilters39: null,
};

export const MostAffectedCasesTableQuery = {
  initialVariables: {
    fetchData: false,
    score: 'gene.gene_id',
    macTable_filters: null,
    macTable_size: 10,
    macTable_offset: 0,
    ...SsmVariables,
    fetch10Ssms: false,
    fetch20Ssms: false,
    fetch40Ssms: false,
  },
  fragments: {
    cohort: () => Relay.QL`
      fragment on Cohort {
        allCases: cases {
          hits(first: 0) { total }
        }
        mutationCounts10: ssms @include(if: $fetch10Ssms) {
          ${mutationsFragment10}
        }
        mutationCounts20: ssms @include(if: $fetch20Ssms) {
          ${mutationsFragment20}
        }
        mutationCounts40: ssms @include(if: $fetch40Ssms) {
          ${mutationsFragment40}
        }
        cases @include(if: $fetchData) {
          hits (
            score: $score
            first: $macTable_size
            filters: $macTable_filters
            offset: $macTable_offset
          ) @include(if: $fetchData) {
            total
            edges {
              node {
                primary_site
                score
                case_id
                demographic {
                  gender
                }
                summary {
                  data_categories {
                    data_category
                    file_count
                  }
                }
                diagnoses {
                  hits(first: 1) {
                    edges {
                      node {
                        age_at_diagnosis
                        tumor_stage
                        days_to_last_follow_up
                        days_to_death
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const MostAffectedCasesTable = Relay.createContainer(
  MostAffectedCasesTableComponent,
  MostAffectedCasesTableQuery
);

export default MostAffectedCasesTable;
