/* @flow */

import React from 'react';
import LocationSubscriber from '@ncigdc/components/LocationSubscriber';
import { compose, withState, mapProps, pure } from 'recompose';
import AngleIcon from 'react-icons/lib/fa/angle-down';

import { withTheme } from '@ncigdc/theme';

import type { TRawQuery } from '@ncigdc/utils/uri/types';
import { parseFilterParam } from '@ncigdc/utils/uri';
import { inCurrentFilters } from '@ncigdc/utils/filters';

import { Row, Column } from '@ncigdc/uikit/Flex';
import A from '@ncigdc/uikit/A';
import CountBubble from '@ncigdc/uikit/CountBubble';


import Link from '../Links/Link';

import type { TBucket } from './types';

type TProps = {
  buckets: [TBucket],
  field: string,
  state: {
    collapsed: boolean,
    showingMore: boolean,
  },
  style: Object,
  title: string,
  toggleCollapsed: Function,
  toggleShowMore: Function,
};

const TermAggregation = (props: TProps) => {
  const styles = {
    container: {
      padding: '1rem 1.2rem',
      backgroundColor: 'white',
    },
    header: {
      color: props.theme.primaryLight1,
      fontSize: '1.7rem',
      marginBottom: '0.5rem',
      cursor: 'pointer',
      alignItems: 'center',
    },
    bucketRow: {
      padding: '0.3rem 0',
    },
    bucketLink: {
      color: '#3a3a3a',
      textDecoration: 'none',
    },
    toggleMore: {
      marginLeft: 'auto',
      color: props.theme.primaryLight1,
      fontSize: '1.2rem',
      cursor: 'pointer',
      ':hover': {
        color: 'blue',
        textDecoration: 'underline',
      },
    },
    bottomRow: {
      padding: '0.5rem',
    },
  };

  const dotField = props.field.replace(/__/g, '.');

  return (
    <LocationSubscriber>{(ctx: {| pathname: string, query: TRawQuery |}) => {
      const currentFilters = ctx.query && parseFilterParam((ctx.query || {}).filters, {}).content || [];
      return (
        <Column style={{ ...styles.container, ...props.style }}>
          <Row style={styles.header} onClick={() => props.toggleCollapsed()}>
            <AngleIcon style={{ transform: `rotate(${props.state.collapsed ? 270 : 0}deg)` }} />
            {props.title}
          </Row>
          {!props.state.collapsed &&
            <Column>
              {props.buckets
                .filter(bucket => bucket.key !== '_missing')
                .slice(0, props.state.showingMore ? Infinity : 5)
                .map(bucket => (
                <Row key={bucket.key} style={styles.bucketRow}>
                  <Link
                    style={styles.bucketLink}
                    merge="toggle"
                    query={{
                      offset: 0,
                      filters: {
                        op: 'and',
                        content: [{
                          op: 'in',
                          content: {
                            field: dotField,
                            value: [bucket.key],
                          },
                        }],
                      },
                    }}
                  >
                    <input
                      readOnly
                      type="checkbox"
                      style={{ pointerEvents: 'none', marginRight: '5px' }}
                      checked={inCurrentFilters({ key: bucket.key, dotField, currentFilters })}
                    />

                    { // TODO: this needs to change in the data
                      bucket.key === '1' ? 'Cancer Gene Sensus' : bucket.key
                    }
                  </Link>
                  <CountBubble>{bucket.doc_count.toLocaleString()}</CountBubble>
                </Row>
              ))
            }

              {props.buckets.length > 5 &&
                <Row style={styles.bottomRow}>
                  <Row style={styles.toggleMore} onClick={() => props.toggleShowMore()}>
                    {props.state.showingMore
                      ? <A>Less...</A>
                      : <A>{props.buckets.length - 5} More...</A>
                    }
                  </Row>
                </Row>
              }
            </Column>
          }
        </Column>
      );
    }}
    </LocationSubscriber>
  );
};

const enhance = compose(
  withState('state', 'setState', { collapsed: false, showingMore: false }),
  mapProps(({ setState, ...rest }) => ({
    toggleCollapsed: () => setState(state => ({ collapsed: !state.collapsed })),
    toggleShowMore: () => setState(state => ({ showingMore: !state.showingMore })),
    ...rest,
  })),
  withTheme,
  pure
);

export default enhance(TermAggregation);
