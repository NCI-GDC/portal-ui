// @flow

// Vendor
import React, { PropTypes } from 'react';
import { getContext, compose } from 'recompose';
import ArrowDownIcon from 'react-icons/lib/fa/long-arrow-down';
import ArrowUpIcon from 'react-icons/lib/fa/long-arrow-up';

// Custom
import { SortIcon } from '@ncigdc/theme/icons';
import { Row, Column } from '@ncigdc/uikit/Flex';
import Button from '@ncigdc/uikit/Button';
import withDropdown from '@ncigdc/uikit/withDropdown';
import { dropdown } from '@ncigdc/theme/mixins';
import { withTheme } from '@ncigdc/theme';
import Link from '@ncigdc/components/Links/Link';

/*----------------------------------------------------------------------------*/

const styles = {
  checkboxRow: (theme) => ({
    padding: '0.3rem 0.6rem',
    ':hover': {
      backgroundColor: theme.greyScale6,
      borderRight: `2px solid ${theme.secondary}`,
    },
  }),
  radioRow: {
    padding: '0.3rem 0.6rem',
    marginLeft: 'auto',
    alignItems: 'center',
  },
};

const enhance = compose(
  getContext({ router: React.PropTypes.object }),
  withTheme,
  withDropdown
);

const SortTableButton = ({
  theme,
  style,
  setActive,
  active,
  mouseDownHandler,
  mouseUpHandler,
  options,
  query: q,
  sortKey,
}) => {
  const { [sortKey]: sort = '', ...query } = q;
  const fields = sort.split(',').filter(Boolean);

  return (
    <Button
      style={style}
      onClick={() => setActive(true)}
    >
      <SortIcon />
      {active &&
        <Column
          style={{ ...dropdown, width: '22rem', top: '100%', marginTop: 5 }}
          onMouseDown={mouseDownHandler}
          onMouseUp={mouseUpHandler}
        >
          {options.map(x => {
            const sameField = fields.find(f => f.split(':')[0] === x.id);
            const otherFields = fields.filter(f => f.split(':')[0] !== x.id);

            const nextSort = sameField
              ? otherFields.join(',')
              : [...fields, `${x.id}:asc`].join(',');

            return (
              <Row key={x.id} style={{ lineHeight: '1.5' }}>
                <Row style={styles.checkboxRow(theme)} flex="1">
                  <Link
                    style={{ width: '100%' }}
                    query={{
                      ...query,
                      ...(nextSort ? { [sortKey]: nextSort } : {}),
                    }}
                    onClick={() => setTimeout(() => setActive(false))}
                  >
                    <input
                      readOnly
                      style={{ pointerEvents: 'none' }}
                      type="checkbox"
                      checked={!!sameField}
                    />
                    <span style={{ marginLeft: '0.3rem' }}>{x.name}</span>
                  </Link>
                </Row>
                <Row style={styles.radioRow}>
                  <Link
                    style={{ width: '100%' }}
                    query={{
                      ...query,
                      [sortKey]: [...otherFields, `${x.id}:asc`].join(','),
                    }}
                    onClick={() => setTimeout(() => setActive(false))}
                  >
                    <ArrowDownIcon />
                    <input
                      readOnly
                      type="radio"
                      checked={!!sameField && sameField.split(':')[1] === 'asc'}
                    />
                  </Link>
                  <Link
                    style={{ width: '100%' }}
                    query={{
                      ...query,
                      [sortKey]: [...otherFields, `${x.id}:desc`].join(','),
                    }}
                    onClick={() => setTimeout(() => setActive(false))}
                  >
                    <ArrowUpIcon />
                    <input
                      readOnly
                      type="radio"
                      checked={!!sameField && sameField.split(':')[1] === 'desc'}
                    />
                  </Link>
                </Row>
              </Row>
            );
          })}
        </Column>
      }
    </Button>
  );
};

SortTableButton.propTypes = {
  theme: PropTypes.object,
  style: PropTypes.object,
  setActive: PropTypes.func,
  active: PropTypes.bool,
  mouseDownHandler: PropTypes.func,
  mouseUpHandler: PropTypes.func,
  location: PropTypes.object,
  entityType: PropTypes.string,
  options: PropTypes.array,
  query: PropTypes.object,
  sortKey: PropTypes.string,
};

/*----------------------------------------------------------------------------*/

export default enhance(SortTableButton);
