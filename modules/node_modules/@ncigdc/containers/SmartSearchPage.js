/* @flow */
/* global _ angular */
/* eslint
  fp/no-class:0,
  fp/no-this:0,
  fp/no-mutation:0,
  class-methods-use-this:0,
  react/prefer-stateless-function:0,
  max-len:0,
  flowtype/require-parameter-type:0,
  flowtype/require-return-type:0,
  no-param-reassign:0,
  no-useless-escape:0,
  no-unused-vars:1,
  no-else-return:0,
*/

import React from 'react';
import Relay from 'react-relay';

import CaseTable from './CaseTable';
import FileTable from './FileTable';

import { Row } from '@ncigdc/uikit/Flex';
import Button from '@ncigdc/uikit/Button';

import TabbedLinks from '@ncigdc/components/TabbedLinks';
import AnnotationsLink from '@ncigdc/components/Links/AnnotationsLink';

_.pluck = _.map;

angular
  .module('legacyAngularWrapper', ['ngApp'])
  .config(($locationProvider: ng.ILocationProvider) => {
    $locationProvider.html5Mode({
      enabled: true,
      requireBase: false,
    });
  })
  .directive('smartSearchWrapper', () => ({
    controller: 'QueryController as qc',
    templateUrl: 'query/templates/query.html',
  }))
  ;

const angularBootstrapHtml = `
  <smart-search-wrapper></smart-search-wrapper>
`;

class SmartSearchComponent extends React.Component {
  componentDidMount() {
    angular.bootstrap(this.container, ['legacyAngularWrapper']);
  }

  render(): void {
    console.log(123, this.props)

    return (
      <div>
        <div
          ref={c => { this.container = c; }}
          dangerouslySetInnerHTML={{ __html: angularBootstrapHtml }}
        />

        <TabbedLinks
          queryParam="searchTableTab"
          defaultIndex={0}
          tabToolbar={
            <Row spacing="2rem" style={{ alignItems: 'center' }}>
              <AnnotationsLink>
                <Button leftIcon={<i className="fa fa-edit" />}>
                  Browse Annotations
                </Button>
              </AnnotationsLink>
            </Row>
          }
          links={[
            {
              id: 'cases',
              text: `Cases (${this.props.viewer.repository.cases.hits.pagination.total})`,
              component: <CaseTable hits={this.props.viewer.repository.cases.hits} />,
            },
            {
              id: 'files',
              text: `Files (${this.props.viewer.repository.files.hits.pagination.total})`,
              component: <FileTable hits={this.props.viewer.repository.files.hits} />,
            },
          ]}
        />

      </div>
    );
  }
}

export const SmartSearchQuery = {
  initialVariables: {
    cases_offset: null,
    cases_size: null,
    cases_sort: null,
    files_offset: null,
    files_size: null,
    files_sort: null,
    filters: null,
  },
  fragments: {
    viewer: () => Relay.QL`
      fragment on Root {
        repository {
          cases {
            hits(first: $cases_size offset: $cases_offset, filters: $filters) {
              ${CaseTable.getFragment('hits')}
              pagination {
                total
              }
            }
          }
          files {
            hits(first: $files_size offset: $files_offset, filters: $filters) {
              ${FileTable.getFragment('hits')}
              pagination {
                total
              }
            }
          }
        }
      }
    `,
  },
};

const SmartSearchPage = Relay.createContainer(
  SmartSearchComponent,
  SmartSearchQuery
);

export default SmartSearchPage;
