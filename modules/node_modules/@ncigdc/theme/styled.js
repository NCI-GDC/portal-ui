// @flow
/* eslint-disable fp/no-mutation */

import { createElement } from 'react';
import { css } from 'glamor';
import { withTheme } from './index';
import validAttr from './utils/validAttr';
import domElements from './utils/domElements';

type TAddPropsToFunction = (value: Function | string, props: Object) => string;
const addPropsToFunction: TAddPropsToFunction = (value, props) => (
  typeof value === 'function' ? value(props) : value
);

type TMapValues = (style: Object, props: Object) => Object;
const mapValues: TMapValues = (style, props) => (
  Object.entries(style).reduce((acc, [k, v]) => ({
    ...acc,
    [k]: typeof v === 'object' ? mapValues(v, props) : addPropsToFunction(v, props),
  }), {})
);

type TCreateStyledComponent = (el: string | ReactClass<{}>) => (style: Object) => ReactClass<*>;
const createStyledComponent: TCreateStyledComponent = el => style => (
  withTheme(({ ref, children, ...props }) => {
    const validAttrProps = typeof el !== 'string' ? props : Object.entries(props).reduce((acc, [k, v]) => ({
      ...acc,
      ...(validAttr(k) ? { [k]: v } : {}),
    }), {});

    return createElement(
      el,
      {
        ...validAttrProps,
        ref: node => (ref ? ref(node) : () => {}),
        className: `${props.className || ''} ${css(mapValues(style, props))}`,
      },
      children
    );
  })
);

type TStyled = (el: ReactClass<{}>, style: Object) => ReactClass<{}>;
const styled: TStyled = (el, style) => createStyledComponent(el)(style);
domElements.forEach(el => { styled[el] = createStyledComponent(el); });

export default styled;
