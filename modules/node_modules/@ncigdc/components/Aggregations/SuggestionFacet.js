// @flow

// Vendor
import React from 'react';
import { compose, withState, mapProps, pure } from 'recompose';
import AngleIcon from 'react-icons/lib/fa/angle-down';
import SearchIcon from 'react-icons/lib/fa/search';
import LocationSubscriber from '@ncigdc/components/LocationSubscriber';

// Custom
import { parseFilterParam } from '@ncigdc/utils/uri';
import { inCurrentFilters, getFilterValue } from '@ncigdc/utils/filters';
import { Row, Column } from '@ncigdc/uikit/Flex';
import Input from '@ncigdc/uikit/Form/Input';
import withDropdown from '@ncigdc/uikit/withDropdown';
import styled from '@ncigdc/theme/styled';
import { dropdown } from '@ncigdc/theme/mixins';
import Link from '@ncigdc/components/Links/Link';
import CheckCircleOIcon from '@ncigdc/theme/icons/CheckCircleOIcon';

/*----------------------------------------------------------------------------*/

const Container = styled(Column, {
  padding: '1rem 1.2rem',
  backgroundColor: 'white',
});

const Header = styled(Row, {
  color: ({ theme }) => theme.primary,
  fontSize: '1.7rem',
  marginBottom: '0.5rem',
  cursor: 'pointer',
});

const MagnifyingGlass = styled(SearchIcon, {
  backgroundColor: ({ theme }) => theme.greyScale5,
  color: ({ theme }) => theme.greyScale2,
  padding: '0.8rem',
  width: '3.4rem',
  height: '3.4rem',
  borderRadius: '4px 0 0 4px',
  border: ({ theme }) => `1px solid ${theme.greyScale4}`,
  borderRight: 'none',
});

const StyledDropdownLink = styled(Link, ({
  color: ({ theme }) => theme.greyScale2,
  padding: '1rem',
  ':link': {
    textDecoration: 'none',
  },
  ':hover': {
    backgroundColor: 'rgb(31, 72, 108)',
    color: 'white',
    textDecoration: 'none',
  },
  width: '100%',
  textDecoration: 'none',
}));

const CheckedRow = styled(Row, ({
  padding: '0.25rem',
  fontSize: '1.5rem',
}));

const CheckedLink = styled(Link, ({
  color: ({ theme }) => theme.success,
  textDecoration: 'none',
  ':link': {
    textDecoration: 'none',
    color: ({ theme }) => theme.success,
  },
}));

let input;
const SuggestionFacet = compose(
  withDropdown,
  withState('state', 'setState', { collapsed: false }),
  mapProps(({ setState, ...rest }) => ({
    toggleCollapsed: () => setState(state => ({ collapsed: !state.collapsed })),
    ...rest,
  })),
  pure
)(({
  dropdownItem,
  title,
  doctype,
  fieldNoDocType,
  state,
  toggleCollapsed,
  placeholder,
  hits,
  setAutocomplete,
  setActive,
  active,
  mouseDownHandler,
  mouseUpHandler,
}) => {
  const query = v => ({
    offset: 0,
    filters: {
      op: 'and',
      content: [{
        op: 'in',
        content: {
          field: `${doctype}.${fieldNoDocType}`,
          value: [v],
        },
      }],
    },
  });
  return (
    <LocationSubscriber>{(ctx: {| pathname: string, query: TRawQuery |}) => {
      const { filters } = ctx.query || {};
      const currentFilters = parseFilterParam(filters, { content: [] }).content;
      const currentValues = (getFilterValue({
        currentFilters,
        dotField: `${doctype}.${fieldNoDocType}`,
      }) || { content: { value: [] } }).content.value;
      return (
      <Container>
        <Header onClick={() => toggleCollapsed()}>
          <AngleIcon style={{ transform: `rotate(${state.collapsed ? 270 : 0}deg)` }} />
          {title}
        </Header>
        {!state.collapsed &&
          <Column>
            {currentValues.map(v => (
              <CheckedRow key={v}>
                <CheckedLink
                  merge="toggle"
                  query={{
                    offset: 0,
                    filters: {
                      op: 'and',
                      content: [{
                        op: 'in',
                        content: {
                          field: `${doctype}.${fieldNoDocType}`,
                          value: [v],
                        },
                      }],
                    },
                  }}
                >
                  <CheckCircleOIcon style={{ paddingRight: '0.5rem' }} />
                  {v}
                </CheckedLink>
              </CheckedRow>
            ))}
            <Row>
              <MagnifyingGlass />
              <Input
                getNode={node => { input = node; }}
                onChange={() => {
                  setActive(!!input.value);
                  if (!!input.value) {
                    setAutocomplete(input.value);
                  }
                }}
                placeholder={placeholder}
              />
              {(active && !!(hits.edges || []).length) &&
              <Column
                style={{ ...dropdown, marginTop: 0, top: '35px' }}
                onMouseUp={mouseUpHandler}
                onMouseDown={mouseDownHandler}
              >
                {(hits.edges || []).map((x, i) => (
                  <Row
                    key={x.node[fieldNoDocType]}
                    style={{ alignItems: 'center' }}
                  >
                    <StyledDropdownLink
                      merge="add"
                      query={query(x.node[fieldNoDocType])}
                      id={x.node[fieldNoDocType]}
                      onClick={() => {
                        setActive(false);
                        input.value = '';
                      }}
                    >
                      {dropdownItem(x)}
                    </StyledDropdownLink>
                  </Row>
                ))}
              </Column>
              }
            </Row>
          </Column>
        }
      </Container>);
      }}
    </LocationSubscriber>
  );
});

/*----------------------------------------------------------------------------*/

export default SuggestionFacet;
