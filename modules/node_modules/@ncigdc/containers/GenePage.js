/* @flow */

import React from 'react';
import Relay from 'react-relay';
import { compose, lifecycle } from 'recompose';

import { makeFilter } from '@ncigdc/utils/filters';
import SideNavLayout from '@ncigdc/components/Layouts/SideNavLayout';
import Gene from '@ncigdc/components/Gene';

export type TProps = {
  node: {
    symbol: string,
  },
};

export const GenePageComponent = compose(
  lifecycle({
    componentDidMount() {
      const transcript = this.props.node.transcripts.hits.edges.find(x => x.node.is_canonical).node;

      this.props.relay.setVariables({
        fetchSsms: true,
        filters: makeFilter([
          {
            field: 'consequence.transcript.gene.gene_id',
            value: [this.props.node.gene_id],
          },
          {
            field: 'consequence.transcript.transcript_id',
            value: [transcript.transcript_id],
          },
        ], false),
      })
    },
  })
)((props: TProps) => (
  <SideNavLayout
    links={[
      { icon: 'table', id: 'summary', title: 'Summary' },
    ]}
    title={props.node.symbol}
    entityType={<i className="fa fa-file-o" />}
  >
    <Gene node={props.node} ssms={(props.viewer.cohort || { ssms: { hits: { edges: [] } } }).ssms.hits.edges} />
  </SideNavLayout>
));

export const GenePageQuery = {
  initialVariables: {
    filters: null,
    score: 'occurrence.case.project.project_id',
    fetchSsms: false,
  },
  fragments: {
    node: () => Relay.QL`
      fragment on Gene {
        description
        gene_id
        symbol
        name
        synonyms
        biotype
        gene_chromosome
        gene_start
        gene_end
        gene_strand
        canonical_transcript_id
        case {
          hits(first: 99) {
            edges {
              node {
                submitter_id
                case_id
                primary_site
                disease_type
                project {
                  project_id
                }
                ssm {
                  hits(first: 99) {
                    edges {
                      node {
                        ssm_id
                      }
                    }
                  }
                }
              }
            }
          }
        }
        external_db_ids {
          entrez_gene
          uniprotkb_swissprot
          hgnc
          omim_gene
        }
        transcripts {
          hits(first: 99) {
            edges {
              node {
                is_canonical
                transcript_id
                length_amino_acid
                domains {
                  hit_name
                  start
                  end
                }
              }
            }
          }
        }
      }
    `,
    viewer: () => Relay.QL`
      fragment on Root {
        cohort @include(if: $fetchSsms) {
          ssms {
            hits(first: 100 filters: $filters, score: $score) {
              total
              edges {
                node {
                  score
                  ssm_id
                  genomic_dna_change
                  occurrence {
                    hits(first: 99) {
                      edges {
                        node {
                          case {
                            case_id
                            disease_type
                            primary_site
                            project {
                              project_id
                            }
                          }
                        }
                      }
                    }
                  }
                  consequence {
                    hits(first: 99) {
                      edges {
                        node {
                          transcript {
                            is_canonical
                            # annotation.impact
                            consequence_type
                            gene {
                              gene_id
                              symbol
                            }
                            aa_change
                            transcript_id
                            aa_start
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const GenePage = Relay.createContainer(
  GenePageComponent,
  GenePageQuery
);

export default GenePage;
