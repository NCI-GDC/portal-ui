// @flow

import React from 'react';
import { compose, withState } from 'recompose';
import { connect } from 'react-redux';

import DownloadButton from '@ncigdc/components/DownloadButton';
import NoAccessModal from '@ncigdc/components/Modals/NoAccessModal';

import DownCaretIcon from 'react-icons/lib/fa/caret-down';

import { setModal } from '@ncigdc/dux/modal';

import Dropdown from '@ncigdc/uikit/Dropdown';
import Button from '@ncigdc/uikit/Button';
import { Column, Row } from '@ncigdc/uikit/Flex';

import { withTheme } from '@ncigdc/theme';

import download from '@ncigdc/utils/download';
/*----------------------------------------------------------------------------*/

const styles = {
  button: theme => ({
    backgroundColor: 'transparent',
    color: theme.greyScale2,
    justifyContent: 'flex-start',
    borderRadius: '0px',
    marginLeft: '0px',
    ':hover': {
      backgroundColor: theme.greyScale6,
    },
  }),
  iconSpacing: {
    marginRight: '0.6rem',
  },
};

const downloadCart = (files, dispatch, setState) => {
  const controlledFiles = files.filter((file) => file.access === 'controlled');

  if (controlledFiles.length) {
    dispatch(setModal(
      <NoAccessModal
        message={
          <div>
            <p>You are attempting to download files that you are not authorized to access.</p>
            <p>
              <span className='label label-success'>
                {files.length - controlledFiles.length}
              </span> files that you are authorized to download.
            </p>
            <p>
              <span className='label label-danger'>
                {controlledFiles.length}
              </span> files that you are not authorized to download.
            </p>
          </div>
        }
        primaryButton={
          <Button
            onClick={() => downloadCart(files.filter((file) => file.access === 'open'), dispatch, setState)}
            style={{ margin: '0 10px' }}
          >
            <span>Download {files.length - controlledFiles.length} authorized files</span>
          </Button>
        }
      />
    ));
  } else {
    dispatch(setModal(null));
    setState(s => ({ ...s, cartState: true }));
    download({
      url: `${GDC_AUTH}api/data`,
      params: {
        ids: files.map((file) => file.file_id),
      },
      method: 'POST',
      altMessage: true,
    })(
      () => {},
      () => setState(s => ({ ...s, cartState: false }))
    );
  }
};

const CartDownloadDropdown = ({
  files,
  theme,
  disabled = false,
  state,
  setState,
  dispatch,
}) => (
  <Row>
    <Dropdown
      dropdownStyle={{
        marginTop: '2px',
        borderRadius: '4px',
      }}
      dropdownItemClass={false}
      button={
        <Button
          style={{ marginLeft: '10px' }}
          leftIcon={
            <i className={`fa ${(state.manifestState || state.cartState) ? 'fa-spinner fa-pulse' : 'fa-download'}`} />
          }
          rightIcon={<DownCaretIcon />}
        >
          Download
        </Button>
      }
    >
      <Column>
        <DownloadButton
          style={styles.button(theme)}
          url={`${GDC_AUTH}api/manifest`}
          activeText="Manifest"
          inactiveText="Manifest"
          altMessage={false}
          setParentState={(currentState) => setState(s => ({ ...s, manifestState: currentState }))}
          extraParams={{
            ids: files.files.map((file) => file.file_id),
          }}
        />
        <Button
          style={styles.button(theme)}
          onClick={() => downloadCart(files.files, dispatch, setState)}
          leftIcon={<i className={`fa ${state.cartState ? 'fa-spinner fa-pulse' : 'fa-download'}`} />}
        >
          Cart
        </Button>
      </Column>
    </Dropdown>
  </Row>
);

export default compose(
  connect(),
  withTheme,
  withState('state', 'setState', {
    manifestState: false,
    cartState: false,
  })
)(CartDownloadDropdown);
