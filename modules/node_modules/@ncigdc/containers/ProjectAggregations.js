/* @flow */

import React from 'react';
import Relay from 'react-relay';

import TermAggregation from '@ncigdc/components/Aggregations/TermAggregation';
import SuggestionFacet from '@ncigdc/components/Aggregations/SuggestionFacet';

import type { TBucket } from '@ncigdc/components/Aggregations/types';

import { withTheme } from '@ncigdc/theme';
import { Row, Column } from '@ncigdc/uikit/Flex';
import FolderIcon from '@ncigdc/theme/icons/Folder';

export type TProps = {
  suggestions: Array<Object>,
  aggregations: {
    disease_type: { buckets: [TBucket] },
    primary_site: { buckets: [TBucket] },
    program__name: { buckets: [TBucket] },
    project_id: { buckets: [TBucket] },
    summary__data_categories__data_category: { buckets: [TBucket] },
    summary__experimental_strategies__experimental_strategy: { buckets: [TBucket] },
  },
  setAutocomplete: Function,
  theme: Object,
};

export const ProjectAggregationsComponent = (props: TProps) => (
  <div>
    <SuggestionFacet
      title="Project"
      placeholder="Search for Project ID"
      hits={props.suggestions}
      setAutocomplete={() => { /* autcomplete turned off for now */ }}
      doctype='projects'
      fieldNoDoctype='project_id'
      dropdownItem={(x) => (
        <Row>
          <Column>
            <FolderIcon style={{ paddingRight: '1rem', paddingTop: '1rem' }} />
          </Column>
          <Column>
            <Row style={{ fontWeight: 'bold' }}>
              {x.node.name}
            </Row>
            <Row>
              {x.node.project_id}
            </Row>
            <Row>
              {x.node.primary_site}
            </Row>
          </Column>
        </Row>
      )}
    />
    <TermAggregation
      style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
      field={'projects.primary_site'}
      title="Primary Site"
      buckets={props.aggregations.primary_site.buckets}
    />
    <TermAggregation
      style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
      field={'projects.program__name'}
      title="Cancer Program"
      buckets={props.aggregations.program__name.buckets}
    />
    <TermAggregation
      style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
      field={'projects.disease_type'}
      title="Disease Type"
      buckets={props.aggregations.disease_type.buckets}
    />
    <TermAggregation
      style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
      field={'projects.summary__data_categories__data_category'}
      title="Data Category"
      buckets={props.aggregations.summary__data_categories__data_category.buckets}
    />
    <TermAggregation
      style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
      field={'projects.summary__experimental_strategies__experimental_strategy'}
      title="Experimental Strategies"
      buckets={props.aggregations.summary__experimental_strategies__experimental_strategy.buckets}
    />
  </div>
);

export const ProjectAggregationsQuery = {
  fragments: {
    aggregations: () => Relay.QL`
      fragment on ProjectAggregations {
        primary_site {
          buckets {
            doc_count
            key
          }
        }
        program__name {
          buckets {
            doc_count
            key
          }
        }
        disease_type {
          buckets {
            doc_count
            key
          }
        }
        project_id {
          buckets {
            doc_count
            key
          }
        }
        summary__experimental_strategies__experimental_strategy {
          buckets {
            doc_count
            key
          }
        }
        summary__data_categories__data_category {
          buckets {
            doc_count
            key
          }
        }
      }
    `,
  },
};


const ProjectAggregations = Relay.createContainer(
  withTheme(ProjectAggregationsComponent),
  ProjectAggregationsQuery
);

export default ProjectAggregations;
