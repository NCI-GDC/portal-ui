// @flow

import React from 'react';
import { compose, withState, lifecycle } from 'recompose';
import _ from 'lodash';
import { scaleOrdinal, schemeCategory20 } from 'd3';
import { LocationSubscriber } from 'react-router/Broadcasts';

import { parseFilterParam } from '@ncigdc/utils/uri';
import { makeFilter } from '@ncigdc/utils/filters';
import { fetchApi } from '@ncigdc/utils/ajax';
import { EXPERIMENTAL_STRATEGIES, DATA_CATEGORIES } from '@ncigdc/utils/constants';

import { Row, Column } from '@ncigdc/uikit/Flex';
import { Tooltip } from '@ncigdc/uikit/Tooltip';

import EntityPageVerticalTable from '@ncigdc/components/EntityPageVerticalTable';
import CountCard from '@ncigdc/components/CountCard';
import DownloadButton from '@ncigdc/components/DownloadButton';
import FrequentMutationsContainer from '@ncigdc/components/FrequentMutationsContainer';
import MostAffectedCases from '@ncigdc/components/MostAffectedCases';
import SummaryCard from '@ncigdc/components/SummaryCard';
import OncoGridWrapper from '@ncigdc/components/Oncogrid/OncogridWrapper';
import FrequentlyMutatedGenesContainer from '@ncigdc/components/FrequentlyMutatedGenesContainer';

import FileIcon from '@ncigdc/theme/icons/File';
import CaseIcon from '@ncigdc/theme/icons/Case';
import EditIcon from '@ncigdc/theme/icons/Edit';

const colors20 = scaleOrdinal(schemeCategory20);

const SPACING = '2rem';

const styles = {
  heading: {
    flexGrow: 1,
    fontSize: '2rem',
    marginBottom: 7,
    marginTop: 7,
  },
  countCard: {
    width: 'auto',
    marginBottom: SPACING,
  },
  column: {
    flexGrow: 1,
  },
  margin: {
    marginBottom: SPACING,
  },
  icon: {
    width: '4rem',
    height: '4rem',
    color: '#888',
  },
  hidden: {
    width: 0,
    height: 0,
    overflow: 'hidden',
  },
  card: {
    backgroundColor: 'white',
  },
  coloredSquare: {
    display: 'inline-block',
    width: 10,
    height: 10,
    marginRight: 5,
  },
};

const initialState = {
  loading: true,
  numCasesAggByProject: {},
  mutatedGenesProject: {},
  mostAffectedCases: [],
  defaultSurvivalRawData: {},
};

const enhance = compose(
  withState('selectedSurvivalData', 'setSelectedSurvivalData', {}),
  withState('state', 'setState', initialState),
  lifecycle({
    getInitialState(): Object {
      return { width: window.innerWidth };
    },

    async componentDidMount(): Promise<*> {
      this.onResize = _.debounce(() => {
        this.setState({
          width: window.innerWidth,
        });
      }, 100);

      window.addEventListener('resize', this.onResize);

      const data1 = await fetchApi(
        'analysis/mutated_cases_count_by_project?size=0',
        { headers: { 'Content-Type': 'application/json' } }
      );

      const numCasesAggByProject = data1.aggregations.projects.buckets.reduce((acc, b) => ({
        ...acc,
        [b.key]: b.case_summary.case_with_ssm.doc_count,
      }), {});

      const data3 = await fetchApi(
        'analysis/top_mutated_cases_by_ssm',
        {
          headers: { 'Content-Type': 'application/json' },
          body: {
            filters: JSON.stringify({
              op: '=',
              content: {
                field: 'project.project_id',
                value: this.props.projectId,
              },
            }),
            fields: [
              'case_id',
              'gene.ssm.ssm_id',
              'summary.data_categories.data_category',
              'summary.data_categories.file_count',
              'project.primary_site',
              'demographic.gender',
              'diagnoses.days_to_last_follow_up',
            ].join(),
          },
        }
      );

      const mostAffectedCases = data3.data.hits;

      const data4 = await fetchApi(
        `analysis/survival?filters=[{"op":"=","content":{"field":"cases.project.project_id","value":"${this.props.projectId}"}}]`,
        { headers: { 'Content-Type': 'application/json' } }
      );

      const defaultSurvivalRawData = data4;

      this.props.setState(s => ({
        ...s,
        loading: false,
        numCasesAggByProject,
        mostAffectedCases,
        defaultSurvivalRawData,
      }));
    },

    componentWillUnmount() {
      window.removeEventListener('resize', this.onResize);
    },
  })
);

const Project = enhance(({
  state,
  setSelectedSurvivalData,
  selectedSurvivalData,
  width,
  projectId,
  fileCount,
  projectName,
  programName,
  caseCount,
  diseaseType,
  primarySite,
  experimentalStrategies: es,
  dataCategories: dc,
}) => {
  const {
    clinicalCount,
    clinicalDataExportFileName,
    clinicalDataExportExpands,
    clinicalDataExportFilters,
    biospecimenCount,
    biospecimenDataExportFileName,
    biospecimenDataExportExpands,
    biospecimenDataExportFilters,
    defaultSurvivalRawData,
    numCasesAggByProject,
    mostAffectedCases,
    loading,
  } = state;

  const project = {}; // TODO: remove (for annotations)

  if (loading) return null;

  const experimentalStrategies = EXPERIMENTAL_STRATEGIES.reduce((result, name) => {
    const strat = es.find(item =>
      item.experimental_strategy.toLowerCase() === name.toLowerCase()
    );

    if (strat) {
      result.push(strat);
    }

    return result;
  }, []);

  const dataCategories = Object.keys(DATA_CATEGORIES).reduce((acc, key) => {
    const type = dc.find(item => item.data_category === DATA_CATEGORIES[key].full);

    return acc.concat(type || {
      data_category: DATA_CATEGORIES[key].full,
      file_count: 0,
      case_count: 0,
    });
  }, []);

  const expStratConfig = {
    sortKey: 'file_count',
    showParticipant: true,
    displayKey: 'experimental_strategy',
    defaultText: 'experimental strategy',
    pluralDefaultText: 'experimental strategies',
    hideFileSize: true,
    tableTitle: 'Case and File Counts by Experimental Strategy',
    noResultsText: 'No files or cases with Experimental Strategies',
    state: {
      name: 'search.files',
    },
    filters: {
      default: {
        params: {
          filters(value) {
            return makeFilter([
              {
                field: 'cases.project.project_id',
                value: [
                  project.project_id,
                ],
              },
              {
                field: 'files.experimental_strategy',
                value: [
                  value,
                ],
              },
            ], true);
          },
        },
      },
    },
  };

  const dataCategoriesConfig = {
    sortKey: 'file_count',
    showParticipant: true,
    displayKey: 'data_category',
    defaultText: 'data category',
    hideFileSize: true,
    tableTitle: 'Case and File Counts by Data Category',
    pluralDefaultText: 'data categories',
    noResultsText: 'No files or cases with Data Categories',
    state: {
      name: 'search.files',
    },
    blacklist: ['structural rearrangement', 'dna methylation'],
    filters: {
      default: {
        params: {
          filters(value) {
            return makeFilter([
              {
                field: 'cases.project.project_id',
                value: [
                  project.project_id,
                ],
              },
              {
                field: 'files.data_category',
                value: [
                  value,
                ],
              },
            ], true);
          },
        },
      },
    },
  };

  const defaultSurvivalLegend = [`${numCasesAggByProject[projectId] || 0} cases on ${projectId}`];

  const survivalData = {
    legend: selectedSurvivalData.legend || defaultSurvivalLegend,
    rawData: selectedSurvivalData.rawData || defaultSurvivalRawData,
  };

  const totalNumCases = Object.keys(numCasesAggByProject).reduce((sum, b) => sum + numCasesAggByProject[b], 0);

  return (
    <span>
      <Row style={{ ...styles.margin, flexDirection: 'row-reverse' }}>
        <DownloadButton
          disabled={biospecimenCount === 0}
          filename={biospecimenDataExportFileName}
          dataExportExpands={biospecimenDataExportExpands}
          url={`${API}/cases`}
          activeText="Processing"
          inactiveText={biospecimenCount === 0 ? 'No Biospecimen Data' : 'Download Biospecimen'}
          fields={['case_id']}
          filters={
            makeFilter(_.values(_.mapValues(biospecimenDataExportFilters, (value, field) => ({ value, field }))), false)
          }
        />

        <DownloadButton
          disabled={clinicalCount === 0}
          filename={clinicalDataExportFileName}
          dataExportExpands={clinicalDataExportExpands}
          url={`${API}/cases`}
          activeText="Processing"
          inactiveText={clinicalCount === 0 ? 'No Clinical Data' : 'Download Clinical'}
          fields={['case_id']}
          filters={
            makeFilter(_.values(_.mapValues(clinicalDataExportFilters, (value, field) => ({ value, field }))), false)
          }
        />

        <Tooltip
          dir="down"
          Component={`Download a manifest for use with the GDC Data Transfer Tool.
            The GDC Data Transfer Tool is recommended for transferring large volumes of data.`}
          maxWidth="250px"
        >
          <DownloadButton
            disabled={!fileCount}
            url={`${API}/files`}
            activeText="Downloading"
            inactiveText="Download manifest"
            fields={['file_id']}
            size={fileCount}
            returnType="manifest"
            format="TSV"
            filters={
              makeFilter([{ field: 'cases.project.project_id', value: projectId }], false)
            }
          />
        </Tooltip>
      </Row>

      <Row style={{ flexWrap: 'wrap' }} spacing={SPACING}>
        <span style={{ ...styles.column, ...styles.margin }}>
          <EntityPageVerticalTable
            id="summary"
            title={<span><i className="fa fa-table" /> Summary</span>}
            thToTd={[
              { th: 'Project ID', td: projectId },
              { th: 'Project Name', td: projectName },
              { th: 'Disease Type', td: [].concat(diseaseType).map(p => <div key={p}>{p}</div>) },
              { th: 'Primary Site', td: [].concat(primarySite).map(p => <div key={p}>{p}</div>) },
              { th: 'Program', td: programName },
            ]}
          />
        </span>

        <Column style={{ ...styles.margin, width: '200px' }}>
          <CountCard
            title="CASES"
            count={caseCount.toLocaleString()}
            icon={<CaseIcon style={styles.icon} className="fa-3x" />}
            style={styles.countCard}
            onCountClick={() => {
              window.location = `/search/c?filters=${
                makeFilter([{ field: 'cases.project.project_id', value: projectId }])
              }`;
            }}
          />

          <CountCard
            title="FILES"
            count={fileCount.toLocaleString()}
            icon={<FileIcon style={styles.icon} className="fa-3x" />}
            style={styles.countCard}
            onCountClick={() => {
              window.location = `/search/f?filters=${
                makeFilter([{ field: 'cases.project.project_id', value: projectId }])
              }`;
            }}
          />

          <CountCard
            title="ANNOTATIONS"
            count={(project.annotations ? project.annotations.pagination.total : 0).toLocaleString()}
            icon={<EditIcon style={styles.icon} className="fa-3x" />}
            style={{ ...styles.countCard, marginBottom: 0 }}
            {
              ...(project.annotations && project.annotations.pagination.total > 0 ? { onCountClick: () => {
                if (project.annotations.pagination.total > 1) {
                  window.location = `/annotations?filters=${
                      makeFilter([{ field: 'project.project_id', value: projectId }])
                  }`;
                } else {
                  window.location = `/annotations?filters=annotationId=${project.annotations.hits[0].annotation_id}`;
                }
              } } : {})
            }
          />
        </Column>
      </Row>

      <Row style={{ flexWrap: 'wrap' }} spacing={SPACING}>
        <span style={{ ...styles.column, ...styles.margin, flex: 1 }}>
          <SummaryCard
            tableTitle="Cases and File Counts by Experimental Strategy"
            pieChartTitle="File Counts by Experimental Strategy"
            data={
              experimentalStrategies.map((item, i) => {
                const { filters, displayKey } = expStratConfig;
                const builtFilters = filters.default.params.filters(item[displayKey]);

                return {
                  id: item.experimental_strategy,
                  experimental_strategy: (
                    <span>
                      <div style={{ ...styles.coloredSquare, backgroundColor: colors20(i) }} />
                      {item.experimental_strategy}
                    </span>
                  ),
                  case_count: <a href={`/search/c?filters=${builtFilters}`}>{item.case_count.toLocaleString()}</a>,
                  file_count: <a href={`/search/f?filters=${builtFilters}`}>{item.file_count.toLocaleString()}</a>,
                  file_count_value: item.file_count,
                  tooltip: (
                    <span>
                      <b>{item.experimental_strategy}</b><br />
                      {item.file_count} file{item.file_count > 1 ? 's' : 0}
                    </span>
                  ),
                };
              })
            }
            footer={`${experimentalStrategies.length} Experimental Strategies`}
            path="file_count_value"
            headings={[
              { key: 'experimental_strategy', title: 'Experimental Strategy', color: true },
              {
                key: 'case_count',
                title: 'Cases',
                style: { textAlign: 'right' },
              },
              {
                key: 'file_count',
                title: 'Files',
                style: { textAlign: 'right' },
              },
            ]}
          />
        </span>
        <span style={{ ...styles.column, ...styles.margin, flex: 1 }}>
          <SummaryCard
            tableTitle="Cases and File Counts by Data Category"
            pieChartTitle="File Counts by Data Category"
            data={
              dataCategories.map((item, i) => {
                const { filters, displayKey } = dataCategoriesConfig;
                const builtFilters = filters.default.params.filters(item[displayKey]);

                return {
                  id: item.data_category,
                  data_category: (
                    <span>
                      <div style={{ ...styles.coloredSquare, backgroundColor: colors20(i) }} />
                      {item.data_category}
                    </span>
                  ),
                  case_count: <a href={`/search/c?filters=${builtFilters}`}>{item.case_count.toLocaleString()}</a>,
                  file_count: <a href={`/search/f?filters=${builtFilters}`}>{item.file_count.toLocaleString()}</a>,
                  file_count_value: item.file_count,
                  tooltip: (
                    <span>
                      <b>{item.data_category}</b><br />
                      {item.file_count} file{item.file_count > 1 ? 's' : 0}
                    </span>
                  ),
                };
              })
            }
            footer={`${dataCategories.length} Data Categories`}
            path="file_count_value"
            headings={[
              { key: 'data_category', title: 'Data Category', color: true },
              {
                key: 'case_count',
                title: 'Cases',
                style: { textAlign: 'right' },
              },
              {
                key: 'file_count',
                title: 'Files',
                style: { textAlign: 'right' },
              },
            ]}
          />
        </span>
      </Row>

      <Column style={styles.card}>
        <h1 style={{ ...styles.heading, padding: '1rem' }} id="mutated-genes">
          <i className="fa fa-bar-chart-o" style={{ paddingRight: '10px' }} />
          Most Frequently Mutated Genes
        </h1>
        <LocationSubscriber>{(ctx: {| pathname: string, query: TRawQuery |}) => {
          const { filters } = ctx.query || {};
          const currentFilters = parseFilterParam(filters, { op: 'and', content: [] });
          return (
            <FrequentlyMutatedGenesContainer
              numCasesAggByProject={numCasesAggByProject}
              survivalData={survivalData}
              setSelectedSurvivalData={setSelectedSurvivalData}
              selectedSurvivalData={selectedSurvivalData}
              totalNumCases={totalNumCases}
              projectId={projectId}
              width={width}
              api={API}
              currentFilters={currentFilters}
            />
          );
        }}</LocationSubscriber>
        
      </Column>

      <Column style={{ ...styles.card, marginTop: '2rem', position: 'static' }}>
        <h1 style={{ ...styles.heading, padding: '1rem' }} id="oncogrid">
          <i className="fa fa-th" style={{ paddingRight: '10px' }} />
          OncoGrid
        </h1>
        <LocationSubscriber>{(ctx: {| pathname: string, query: TRawQuery |}) => {
          const { filters } = ctx.query || {};
          const currentFilters = parseFilterParam(filters, { op: 'and', content: [] });
          return (
            <OncoGridWrapper
              width={width}
              projectId={projectId}
              api={API}
              currentFilters={currentFilters}
            />
          );
        }}</LocationSubscriber>

        
      </Column>

      <Column style={{ ...styles.card, marginTop: '2rem' }}>
        <h1 style={{ ...styles.heading, padding: '1rem' }} id="frequent-mutations">
          <i className="fa fa-bar-chart-o" style={{ paddingRight: '10px' }} />
          Most Frequent Mutations
        </h1>
        <LocationSubscriber>{(ctx: {| pathname: string, query: TRawQuery |}) => {
          const { filters } = ctx.query || {};
          const currentFilters = parseFilterParam(filters, { op: 'and', content: [] });
          return (
            <FrequentMutationsContainer
              numCasesAggByProject={numCasesAggByProject}
              totalNumCases={totalNumCases}
              projectId={projectId}
              defaultSurvivalRawData={defaultSurvivalRawData}
              defaultSurvivalLegend={defaultSurvivalLegend}
              api={API}
              width={width}
              showSurvivalPlot
              currentFilters={currentFilters}
            />
          );
        }}</LocationSubscriber>
      </Column>
      <Column style={{ ...styles.card, marginTop: '2rem' }}>
        <h1 style={{ ...styles.heading, padding: '1rem' }} id="most-affected-cases">
          <i className="fa fa-bar-chart-o" style={{ paddingRight: '10px' }} />
          Most Affected Cases
        </h1>

        <MostAffectedCases
          mostAffectedCases={_.sortBy(mostAffectedCases, c => c.gene.length).reverse()}
          project={projectId}
        />
      </Column>
    </span>
  );
});

export default Project;
