// @flow

import React from 'react';
import Relay from 'react-relay';
import withSize from '@ncigdc/utils/withSize';
import { compose, withPropsOnChange } from 'recompose';
import { isEqual } from 'lodash';
import withRouter from '@ncigdc/utils/withRouter';
import { parseFilterParam } from '@ncigdc/utils/uri';
import { makeFilter } from '@ncigdc/utils/filters';
import Loader from '@ncigdc/uikit/Loaders/Loader';
import { withTheme } from '@ncigdc/theme';
import { graphTitle } from '@ncigdc/theme/mixins';
import { Row, Column } from '@ncigdc/uikit/Flex';
import DownloadVisualizationButton from '@ncigdc/components/DownloadVisualizationButton';
import BarChart from '@ncigdc/components/Charts/BarChart';
import wrapSvg from '@ncigdc/utils/wrapSvg';

const TITLE = 'Distribution of Most Frequently Mutated Genes';

const FrequentlyMutatedGenesChartComponent = compose(
  withRouter,
  withPropsOnChange(
    (props, nextProps) => ['query', 'projectId', 'defaultFilters']
      .some((propName) => !isEqual(props[propName], nextProps[propName])),
    ({ relay, query, defaultFilters }) => {
      relay.setVariables({
        fetchData: true,
        fmgChart_filters: parseFilterParam(
          query.fmgChart_filters,
          defaultFilters || null
        ),
      });
    }
  ),
  withTheme,
  withSize()
)(({
  projectId = '',
  theme,
  size: {
    width,
  },
  cohort: { genes, cases, filteredCases },
  push,
  showSurvivalPlot = true,
  context = 'cohort',
}) => {
  const chartMargin = { top: 30, right: 50, bottom: 105, left: 40 };

  const maxBars = 20;
  const bandWidth = (
    (width - chartMargin.right - chartMargin.left) /
    (maxBars + 1) / (showSurvivalPlot ? 1 : 2)
  ) * 0.7;

  const mutatedGenesChartData = !!genes && genes.hits.edges.map(x => x.node);

  const numCasesAggByProject = cases.aggregations.project__project_id.buckets.reduce((acc, b) => ({
    ...acc,
    [b.key]: b.doc_count,
  }), {});

  const tooltipContext = (ctx, { symbol, score = 0 }) => {
    switch (ctx) {
      case 'project': {
        return (
          <span>
            <b>{symbol}</b><br />
            {score.toLocaleString()} Case{score > 1 ? 's' : ''} affected in {projectId}<br />
            {score.toLocaleString()} / {(numCasesAggByProject[projectId] || 0).toLocaleString()}
            &nbsp;({((score / numCasesAggByProject[projectId]) * 100).toFixed(2)}%)
          </span>
        );
      }
      case 'cohort': {
        return (
          <span>
            <b>{symbol}</b><br />
            {score.toLocaleString()} Case{score > 1 ? 's' : ''} affected in cohort<br />
            {score.toLocaleString()} / {(filteredCases.hits.total || 0).toLocaleString()}
            &nbsp;({((score / filteredCases.hits.total) * 100).toFixed(2)}%)
          </span>
        );
      }
      default: {
        return <span />;
      }
    }
  };

  return (
    <Loader
      loading={!genes}
      height="400px"
    >
      {!!mutatedGenesChartData &&
        <Column>
          <div style={{ textAlign: 'right', marginRight: 50, marginLeft: 30 }}>
            <DownloadVisualizationButton
              disabled={!mutatedGenesChartData.length}
              svg={() => wrapSvg({ selector: '#mutated-genes-chart svg', title: TITLE })}
              data={mutatedGenesChartData}
              slug="bar-chart"
              tooltipHTML="Download image or data"
              noText
            />
          </div>
          <div style={graphTitle()}>{TITLE}</div>
          {!!mutatedGenesChartData.length &&
            <div id="mutated-genes-chart">
              <Row style={{ padding: '2rem 2rem 0' }}>
                <BarChart
                  data={
                    mutatedGenesChartData
                      .sort((a, b) => b.score - a.score)
                      .map(g => ({
                        label: g.symbol,
                        value: projectId
                          ? ((g.score / numCasesAggByProject[projectId]) * 100)
                          : (g.score / cases.hits.total) * 100,
                        tooltip: tooltipContext(context, g),
                        onClick: () => push(`/genes/${g.gene_id}`),
                      }))
                  }
                  yAxis={{ title: '% of Cases Affected' }}
                  bandwidth={bandWidth}
                  margin={chartMargin}
                  height={300}
                  styles={{
                    xAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                    yAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                    bars: { fill: theme.secondary },
                    tooltips: {
                      fill: '#fff',
                      stroke: theme.greyScale4,
                      textFill: theme.greyScale3,
                    },
                  }}
                />
              </Row>
            </div>
          }
        </Column>
      }
    </Loader>
  );
});

export const FrequentlyMutatedGenesChartQuery = {
  initialVariables: {
    fetchData: false,
    fmgChart_filters: null,
    score: 'case.project.project_id',
    ssmTested: makeFilter([{
      field: 'available_variation_data',
      value: 'ssm',
    }], false),
  },
  fragments: {
    cohort: () => Relay.QL`
      fragment on Cohort {
        cases {
          aggregations(filters: $ssmTested) {
            project__project_id {
              buckets {
                doc_count
                key
              }
            }
          }
          hits(first: 0) { total }
        }
        filteredCases: cases @include(if: $fetchData) {
          hits(first: 0 filters: $fmgChart_filters) {
            total
          }
        }
        genes @include(if: $fetchData) {
          hits (first: 20 filters: $fmgChart_filters, score: $score) @include(if: $fetchData) {
            total
            edges {
              node {
                id
                score
                symbol
                gene_id
                case {
                  hits(first: 1) {
                    total
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const FrequentlyMutatedGenesChart = Relay.createContainer(
  FrequentlyMutatedGenesChartComponent,
  FrequentlyMutatedGenesChartQuery
);

export default FrequentlyMutatedGenesChart;
