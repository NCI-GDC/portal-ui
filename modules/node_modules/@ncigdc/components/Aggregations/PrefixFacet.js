// @flow

// Vendor
import React, { PropTypes } from 'react';
import { compose, withState, mapProps, pure } from 'recompose';
import AngleIcon from 'react-icons/lib/fa/angle-down';
import SearchIcon from 'react-icons/lib/fa/search';
import UserIcon from 'react-icons/lib/fa/user';

// Custom
import { mergeFilters, setFilters, setFilter, inCurrentFilters, makeFilter } from '@ncigdc/utils/filters';
import { Row, Column } from '@ncigdc/uikit/Flex';
import Input from '@ncigdc/uikit/Form/Input';
import withDropdown from '@ncigdc/uikit/withDropdown';
import { withTheme } from '@ncigdc/theme';
import { dropdown } from '@ncigdc/theme/mixins';
import styled from '@ncigdc/theme/styled';
import Link from '@ncigdc/components/Links/Link';

const Container = styled(Column, {
  padding: '1rem 1.2rem',
  backgroundColor: 'white',
});

const Header = styled(Row, {
  color: ({ theme }) => theme.primary,
  fontSize: '1.7rem',
  marginBottom: '0.5rem',
  cursor: 'pointer',
});

const MagnifyingGlass = styled(SearchIcon, {
  backgroundColor: ({ theme }) => theme.greyScale5,
  color: ({ theme }) => theme.greyScale2,
  padding: '0.8rem',
  width: '3.4rem',
  height: '3.4rem',
  borderRadius: '4px 0 0 4px',
  border: ({ theme }) => `1px solid ${theme.greyScale4}`,
  borderRight: 'none',
});

const StyledDropdownLink = styled(Link, ({
  color: ({ theme }) => theme.greyScale2,
  padding: '1rem',
  ':link': {
      textDecoration: 'none',
    },
  ':hover': {
      backgroundColor: 'rgb(31, 72, 108)',
      color: 'white',
      textDecoration: 'none',
    },
  width: '100%',
  textDecoration: 'none',
}));

let input;

const PrefixFacet = compose(
  withDropdown,
  withState('state', 'setState', { collapsed: false }),
  mapProps(({ setState, ...rest }) => ({
    toggleCollapsed: () => setState(state => ({ collapsed: !state.collapsed })),
    ...rest,
  })),
  pure,
  withTheme
)(({
  title,
  state,
  doctype,
  fieldNoDoctype,
  toggleCollapsed,
  placeholder,
  setAutocomplete,
  setActive,
  active,
  mouseDownHandler,
  mouseUpHandler,
}) => {
  return (
    <Container>
      <Header onClick={() => toggleCollapsed()}>
        <AngleIcon style={{ transform: `rotate(${state.collapsed ? 270 : 0}deg)` }} />
        {title}
      </Header>
      {!state.collapsed &&
        <Row>
          <MagnifyingGlass />
          <Input
            getNode={node => { input = node; }}
            onChange={() => {
              setActive(!!input.value);
            }}
            placeholder={placeholder}
          />
          {active &&
            <Column
              style={{ ...dropdown, marginTop: 0, top: '35px', minWidth: '290px' }}
              onMouseUp={mouseUpHandler}
              onMouseDown={mouseDownHandler}
            >
              <StyledDropdownLink
                merge="toggle"
                query={{
                  filters: makeFilter([
                    {
                      field: `${doctype}.${fieldNoDoctype}`,
                      value: [`${input.value}*`],
                    },
                  ], false),
                }}
                id='prefix-search-link'
                onClick={() => {
                  setActive(false);
                  input.value = '';
                }}
              >
                {input.value}* <br />
                Prefix Search
              </StyledDropdownLink>
            </Column>
          }
        </Row>
      }
    </Container>
  );
});
export default PrefixFacet;
