/* @flow */

import React from 'react';
import Relay from 'react-relay';

import { Row } from '@ncigdc/uikit/Flex';
import TableActions from '@ncigdc/components/TableActions';
import Showing from '@ncigdc/components/Pagination/Showing';
import { RepositoryCasesLink, RepositoryFilesLink } from '@ncigdc/components/Links/RepositoryLink';

import { Tr, Th, Td } from '@ncigdc/uikit/Table';
import { makeFilter } from '@ncigdc/utils/filters';
import { findDataCategory, CATEGORY_MAP } from '@ncigdc/utils/data';
import ProjectTr from './ProjectTr';

import type { TTableProps } from './types';

const styles = {
  table: {
    width: '100%',
    borderCollapse: 'collapse',
    borderSpacing: 0,
  },
};

export const ProjectTableComponent = (props: TTableProps) => (
  <div>
    <Row style={{ backgroundColor: 'white', padding: '1rem', justifyContent: 'space-between' }}>
      <Showing
        docType="projects"
        params={props.relay.route.params}
        total={props.projects.total}
      />
      <TableActions
        prefix={'projects'}
        total={props.projects.total}
        sortKey="projects_sort"
        endpoint={`${API}projects`}
        downloadFields={[
          'project_id',
          'primary_site',
          'disease_type',
          'program.name',
          'summary.case_count',
          'summary.file_count',
          'summary.file_size',
        ]}
        sortOptions={[
          {
            id: 'project_id',
            name: 'ID',
          },
          {
            id: 'primary_site',
            name: 'Primary Site',
          },
          {
            id: 'disease_type',
            name: 'Disease Type',
          },
          {
            id: 'program.name',
            name: 'Program',
          },
          {
            id: 'summary.case_count',
            name: 'Cases',
          },
          {
            id: 'summary.file_count',
            name: 'Files',
          },
          {
            id: 'summary.file_size',
            name: 'File Size',
          },
        ]}
      />
    </Row>
    <div style={{ overflowX: 'auto' }}>
      <table style={styles.table}>
        <thead>
          <Tr>
            <Th rowSpan="2">ID</Th>
            <Th rowSpan="2">Disease Type</Th>
            <Th rowSpan="2">Primary Site</Th>
            <Th rowSpan="2">Program</Th>
            <Th rowSpan="2">Cases</Th>
            <Th colSpan="6">Available Cases per Data Category</Th>
            <Th rowSpan="2">Files</Th>
          </Tr>
          <Tr>
            <Th>Seq</Th>
            <Th>Exp</Th>
            <Th>SNV</Th>
            <Th>CNV</Th>
            <Th>Clinical</Th>
            <Th>Bio</Th>
          </Tr>
        </thead>
        <tbody>
          {props.projects.edges.map((e, i) => (
            <ProjectTr node={e.node} key={e.node.id} index={i} />
          ))}
          <Tr>
            <Td
              colSpan="4"
            >
              <b>Total</b>
            </Td>
            <Td>
              <RepositoryCasesLink>
                {props.repository.cases.hits.total.toLocaleString()}
              </RepositoryCasesLink>
            </Td>
            {Object.keys(CATEGORY_MAP)
              .filter((category) => category !== 'DNA')
              .map((category, i) => (
                <Td key={i}>
                  <RepositoryCasesLink
                    query={{
                      filters: makeFilter([{ field: 'files.data_category', value: CATEGORY_MAP[category] }], false),
                    }}
                  >
                    {props.projects.edges.reduce(
                      (acc, val) =>
                        acc + findDataCategory(
                          category, val.node.summary.data_categories).case_count, 0
                        ).toLocaleString()
                    }
                  </RepositoryCasesLink>
                </Td>
              ))
            }
            <Td>
              <RepositoryFilesLink>
                {props.repository.files.hits.total.toLocaleString()}
              </RepositoryFilesLink>
            </Td>
          </Tr>
        </tbody>
      </table>
    </div>
  </div>
);

export const ProjectTableQuery = {
  fragments: {
    projects: () => Relay.QL`
      fragment on ProjectConnection {
        total
        edges @relay(plural: true) {
          node {
            id
            project_id
            disease_type
            program {
              name
            }
            primary_site
            summary {
              case_count
              data_categories {
                case_count
                data_category
              }
              file_count
            }
          }
        }
      }
    `,
  },
};

const ProjectTable = Relay.createContainer(
  ProjectTableComponent,
  ProjectTableQuery
);

export default ProjectTable;
