// @flow

import React from 'react';
import { withState, withProps, lifecycle, compose } from 'recompose';
import { isEqual } from 'lodash';

import { PaginationContainer } from '@ncigdc/uikit/Pagination';
import FrequentlyMutatedGenes from './FrequentlyMutatedGenes';

declare var API: string;

function mapData(data: Array<Object>, projectId: string): Array<Object> {
  return data.map(g => ({
    ...g,
    num_affected_cases_project: g.case.filter(c => c.project.project_id === projectId).length,
    num_affected_cases_all: g.case.length,
    num_affected_cases_by_project: g.case.reduce((acc, c) => ({
      ...acc,
      [c.project.project_id]: acc[c.project.project_id] ? acc[c.project.project_id] + 1 : 1,
    }), {}),
  }));
}

export default
compose(
  withState('state', 'setState', { total: 0, mutatedGenesChartData: [], mutatedGenesTableData: [], loading: true }),
  withProps({
    fetchBarChart: async ({ currentFilters, projectId, setState }) => {
      const url = `${API}analysis/top_mutated_genes_by_project`;
      const filters = !!currentFilters.content.length ? currentFilters : null;

      const res = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...(filters && { filters: JSON.stringify(filters) }),
          size: 20,
          fields: [
            'case.project.project_id',
            'symbol',
            'gene_id',
          ].join(),
        }),
      });

      const { data } = await res.json();
      setState(s => ({
        ...s,
        mutatedGenesChartData: mapData(data.hits, projectId),
      }));
    },
    fetchData: async ({ currentFilters, offset = 0, setState, first, projectId }) => {
      setState(s => ({ ...s, loading: true }));
      const url = `${API}analysis/top_mutated_genes_by_project`;
      const filters = !!currentFilters.content.length ? currentFilters : null;

      const res = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...(filters && { filters: JSON.stringify(filters) }),
          from: offset,
          size: first,
          fields: [
            'gene_id',
            'symbol',
            'cytoband',
            'case.project.project_id',
            'case.ssm.ssm_id',
            'name',
          ].join(),
        }),
      });

      const { data } = await res.json();

      setState(s => ({
        ...s,
        total: data.pagination.total,
        mutatedGenesTableData: mapData(data.hits, projectId),
        loading: false,
      }));
    },
  }),
  lifecycle({
    componentDidMount() {
      this.props.fetchBarChart(this.props);
      this.props.fetchData(this.props);
    },
    componentWillReceiveProps(next) {
      if (!isEqual(this.props.currentFilters, next.currentFilters)) {
        this.props.fetchBarChart(next);
        this.props.fetchData(next);
      }
    },
  })
)(({ state, ...props }) => (
  <PaginationContainer
    total={state.total}
    onChange={pageInfo => props.fetchData({ ...props, ...pageInfo })}
    entityType="Genes"
    loading={state.loading}
  >
    <FrequentlyMutatedGenes
      mutatedGenesTableData={state.mutatedGenesTableData}
      mutatedGenesChartData={state.mutatedGenesChartData}
      numCasesAggByProject={props.numCasesAggByProject}
      survivalData={props.survivalData}
      setSelectedSurvivalData={props.setSelectedSurvivalData}
      selectedSurvivalData={props.selectedSurvivalData}
      totalNumCases={props.totalNumCases}
      projectId={props.projectId}
      survivalPlotloading={props.survivalPlotloading}
    />
  </PaginationContainer>
));
