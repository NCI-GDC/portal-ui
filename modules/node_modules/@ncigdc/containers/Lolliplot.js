// @flow

import React from 'react';
import Relay from 'react-relay';
import { compose, lifecycle, withProps, withState } from 'recompose';
import moment from 'moment';
import { insertRule } from 'glamor';
import * as d3 from 'd3';
import { isEqual } from 'lodash';
import lolliplot from '@oncojs/lolliplot';
import withRouter from '@ncigdc/utils/withRouter';
import { buildProteinLolliplotData } from '@ncigdc/utils/data';
import { makeFilter } from '@ncigdc/utils/filters';
import { withTooltip } from '@ncigdc/uikit/Tooltip';
import { Row, Column } from '@ncigdc/uikit/Flex';
import DropdownItem from '@ncigdc/uikit/DropdownItem';
import Dropdown from '@ncigdc/uikit/Dropdown';
import Button from '@ncigdc/uikit/Button';
import { visualizingButton } from '@ncigdc/theme/mixins';
import DoubleHelix from '@ncigdc/theme/icons/DoubleHelix';
import DownloadVisualizationButton from '@ncigdc/components/DownloadVisualizationButton';
import Loader from '@ncigdc/uikit/Loaders/Loader';

const id = 'protein-viewer-root';
const selector = `#${id}`;

insertRule(`
  ${selector} text { user-select: none; }
`);

insertRule(`
  [class^="mutation-circle"] { cursor: pointer; }
`);

const styles = {
  heading: {
    flexGrow: 1,
    fontSize: '2.2rem',
    marginBottom: 7,
    marginTop: 7,
    display: 'flex',
    alignItems: 'center',
  },
};

const initialState = {
  activeTranscript: {},
  loading: true,
  actions: {
    reset: () => {},
  },
};

type TTranscript = {
  length_amino_acid: number,
  is_canonical: boolean,
  transcript_id: string,
};

type TProps = {
  ssms: {
    hits: {
      edges: Array<{
        node: {},
      }>,
    },
  },
  state: {
    activeTranscript: TTranscript,
    loading: boolean,
    actions: {
      reset: Function,
    },
  },
  viewer: {
    node: {
      transcripts: {
        hits: {
          edges: Array<{
            node: TTranscript,
          }>,
        },
      },
    },
  },
  setState: Function,
  setTooltip: Function,
  push: Function,
  mutationId: string,
};

const LolliplotComponent = compose(
  withTooltip,
  withRouter,
  withState('state', 'setState', initialState),
  withProps({
    renderProteinLolliplot(data: {}, transcript: TTranscript, {
      setState,
      setTooltip,
      push,
      mutationId,
    }: TProps): void {
      const element = document.querySelector(selector);
      if (element) element.innerHTML = ''; // eslint-disable-line fp/no-mutation
      setState(s => ({
        ...s,
        actions: lolliplot({
          d3,
          data,
          element,
          width: element ? element.clientWidth - 40 : 0,
          height: 450,
          domainWidth: transcript.length_amino_acid,
          statsBoxWidth: 350,
          mutationId,
          onMutationClick: d => { push(`/ssms/${d.id}`); },
          onMutationMouseover: d => {
            setTooltip(
              <span>
                <div>AA Change: {d.aa_change}</div>
                <div>DNA Change: {d.genomic_dna_change}</div>
                <div># of Cases: {d.donors}</div>
                <div>Functional Impact: {d.impact}</div>
              </span>
            );
          },
          onMutationMouseout: () => setTooltip(),
          onProteinMouseover: d => {
            setTooltip(
              <span>
                <div>{d.id}</div>
                <div>{d.description}</div>
                <div><b>Click to zoom</b></div>
              </span>
            );
          },
          onProteinMouseout: () => setTooltip(),
        }),
      }));
    },
  }),
  lifecycle({
    componentDidMount(): void {
      this.props.relay.setVariables({ // eslint-disable-line fp/no-this
        fetchGene: true,
        lolliplotGeneId: btoa(`Gene:${this.props.geneId}`), // eslint-disable-line fp/no-this
      });
    },
    async componentWillReceiveProps(nextProps: TProps): Promise<*> {
      const { relay, ssms, state, renderProteinLolliplot, setState } = this.props; // eslint-disable-line fp/no-this
      if (!nextProps.ssms.hits) {
        const transcript = (nextProps.viewer.node.transcripts.hits.edges.find(x => x.node.is_canonical) || {}).node;

        relay.setVariables({ // eslint-disable-line fp/no-this
          fetchSsms: true,
          filters: makeFilter([
            {
              field: 'consequence.transcript.transcript_id',
              value: [transcript.transcript_id],
            },
          ], false),
        });
      }

      if (
        (!ssms.hits && nextProps.ssms.hits) ||
        !isEqual(state.activeTranscript, nextProps.state.activeTranscript)
      ) {
        const transcript = nextProps.state.activeTranscript.transcript_id
          ? nextProps.state.activeTranscript
          : (nextProps.viewer.node.transcripts.hits.edges.find(x => x.node.is_canonical) || {}).node;

        if (nextProps.ssms.hits.edges.length) {
          const data = nextProps.ssms.hits.edges.map(x => x.node);

          const proteinLolliplotData = buildProteinLolliplotData({
            transcript,
            data,
          });

          renderProteinLolliplot(proteinLolliplotData, transcript, nextProps);
        }

        setState(s => ({
          ...s,
          activeTranscript: transcript,
          loading: false,
          notEnoughData: !nextProps.ssms.hits.edges.length,
        }));
      }
    },
  })
)(({
  state: {
    loading,
    activeTranscript,
    proteinLolliplotData = {},
    notEnoughData = false,
    actions: {
      reset,
    },
  },
  setState,
  viewer: { node: gene },
}) => (
  <Column>
    <Row>
      <h1 style={{ ...styles.heading, padding: '1rem' }} id="protein">
        <DoubleHelix width="12px" />
        <span style={{ marginLeft: '1rem' }}>Protein</span>
      </h1>
    </Row>
    <Loader
      loading={!gene || loading}
      height="387px"
    >
      {gene &&
      <Row style={{ marginBottom: '2rem', padding: '0 2rem' }} spacing="1rem">
        <span style={{ alignSelf: 'center' }}>
              Transcript:
            </span>
        <Dropdown
          selected={
            <span
              style={{
                fontWeight: activeTranscript.transcript_id === gene.canonical_transcript_id
                      ? 'bold' : 'initial',
              }}
            >
              {activeTranscript.transcript_id} ({activeTranscript.length_amino_acid} aa)
                </span>
              }
        >
          {gene.transcripts.hits.edges.map(x => x.node)
              .filter(t => t.transcript_id === gene.canonical_transcript_id)
              .map(t =>
                <DropdownItem
                  key={t.transcript_id}
                  style={{
                    fontWeight: 'bold',
                    ...(activeTranscript.transcript_id === t.transcript_id ? {
                      backgroundColor: 'rgb(44, 136, 170)',
                      color: 'white',
                    } : {}),
                    cursor: 'pointer',
                  }}
                  onClick={() => setState(s => ({ ...s, activeTranscript: t }))}
                >
                  {t.transcript_id} ({t.length_amino_acid} aa)
                </DropdownItem>
              )}
          {gene.transcripts.hits.edges.map(x => x.node)
              .filter(t => t.length_amino_acid && t.transcript_id !== gene.canonical_transcript_id)
              .map(t =>
                <DropdownItem
                  key={t.transcript_id}
                  style={{
                    ...(activeTranscript.transcript_id === t.transcript_id ? {
                      backgroundColor: 'rgb(44, 136, 170)',
                      color: 'white',
                    } : {}),
                    cursor: 'pointer',
                  }}
                  onClick={() => setState(s => ({ ...s, activeTranscript: t }))}
                >
                  {t.transcript_id} ({t.length_amino_acid} aa)
                </DropdownItem>
              )}
        </Dropdown>
        <Button
          style={visualizingButton}
          onClick={reset}
          leftIcon={<i className="fa fa-refresh" />}
        >
              Reset
            </Button>
        <DownloadVisualizationButton
          svg="#protein-viewer-root svg.chart"
          data={proteinLolliplotData}
          stylePrefix="#protein-viewer-root"
          slug={`protein_viewer-${gene.symbol}-${moment().format('YYYY-MM-DD')}`}
        />
      </Row>
        }
    </Loader>
    {!loading && notEnoughData &&
    <Column style={{ alignItems: 'center', padding: '20px' }}>
          Not enough data
        </Column>
      }
    <div style={{ padding: '0 3rem' }} id={id} />
  </Column>
  ));

export const LolliplotQuery = {
  initialVariables: {
    fetchSsms: false,
    filters: null,
    score: 'occurrence.case.project.project_id',
    lolliplotGeneId: '',
    fetchGene: false,
  },
  fragments: {
    viewer: () => Relay.QL`
      fragment on Root {
        node(id: $lolliplotGeneId) @include(if: $fetchGene) {
          ...on Gene {
            gene_id
            canonical_transcript_id
            transcripts {
              hits(first: 99) {
                edges {
                  node {
                    is_canonical
                    transcript_id
                    length_amino_acid
                    domains {
                      hit_name
                      start
                      end
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
    ssms: () => Relay.QL`
      fragment on Ssms {
        dummy_field: hits (first: 1) { total }
        hits(first: 100 filters: $filters, score: $score) @include(if: $fetchSsms) {
          total
          edges {
            node {
              score
              ssm_id
              genomic_dna_change
              consequence {
                hits(first: 100) {
                  edges {
                    node {
                      transcript {
                        aa_change
                        aa_start
                        annotation {
                          impact
                        }
                        consequence_type
                        gene {
                          gene_id
                          symbol
                        }
                        is_canonical
                        transcript_id
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const Lolliplot = Relay.createContainer(
  LolliplotComponent,
  LolliplotQuery
);

export default Lolliplot;
