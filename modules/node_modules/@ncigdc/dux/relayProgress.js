// @flow

const UPDATE_RELAY_PROGRESS = 'UPDATE_RELAY_PROGRESS';

const updateProgress = (percent: number): Object => ({
  type: UPDATE_RELAY_PROGRESS,
  payload: percent,
});

const reducer = (state: number = 0, action: Object) => {
  switch (action.type) {
    case 'UPDATE_RELAY_PROGRESS':
      return action.payload;
    default:
      return state;
  }
};

/*----------------------------------------------------------------------------*/

type TProps = { dispatch: Function };
type THandleStateChange = (props: TProps) => (readyState: Object) => void;
const handleStateChange: THandleStateChange = props => ({ events }) => {
  props.dispatch(updateProgress(events.length * 30));

  if (events.some(x => x.type === 'NETWORK_QUERY_RECEIVED_ALL' || x.type === 'STORE_FOUND_ALL')) {
    props.dispatch(updateProgress(0));
  }
};

export default reducer;
export { updateProgress, handleStateChange };
