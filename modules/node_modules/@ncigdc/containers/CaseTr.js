/* @flow */

import React from 'react';
import Relay from 'react-relay';

import ShoppingCartIcon from 'react-icons/lib/fa/shopping-cart';
import TrashIcon from 'react-icons/lib/fa/trash';
import { RepositoryFilesLink } from '@ncigdc/components/Links/RepositoryLink';
import CaseLink from '@ncigdc/components/Links/CaseLink';
import DropDownButton from '@ncigdc/components/DropDownButton';

import { addAllFilesInCart, removeFilesFromCart } from '@ncigdc/dux/cart';

import { findDataCategory, sumDataCategories, CATEGORY_MAP } from '@ncigdc/utils/data';
import { makeFilter } from '@ncigdc/utils/filters';

import type { TCategory } from '@ncigdc/utils/data/types';

import { Tr, Td } from '@ncigdc/uikit/Table';

import { withTheme } from '@ncigdc/theme';

export type TProps = {|
  index: number,
  node: {|
    case_id: string,
    demographic: {|
      gender: string,
    |},
    project: {|
      primary_site: string,
      project_id: string,
    |},
    summary: {|
      data_categories: Array<{|
        case_count?: number,
        data_category: TCategory,
      |}>,
    |},
  |},
  theme: Object,
|};

import { connect } from 'react-redux';

const AddToCartButton = connect(state => ({ cart: state.cart }))(({ files = [], filteredFiles = [], dispatch, onActivate }) => (
  <DropDownButton
    options={[
      {
        key: 'addAll',
        text: <span><ShoppingCartIcon style={{ marginRight: '1em' }} />Add all Case files to the Cart ({files.length})</span>,
        onClick: () => dispatch(addAllFilesInCart(files)),
      },
      {
        key: 'removeAll',
        text: <span><TrashIcon style={{ marginRight: '1em' }} />Remove all Case files from the Cart ({files.length})</span>,
        onClick: () => dispatch(removeFilesFromCart(files)),
      },
      //{ key: 'addFiltered', text: 'Add filtered Case files to the Cart ({filteredFiles.length})' },
      //{ key: 'removeFiltered', text: 'Remove filtered case files from the Cart ({filteredFiles.length})' },
    ]}
    style={{
      dropdownList: {
        left: 0,
        right: 'auto !important',
      },
      dropdownListItem: {

      },
    }}
    label={(
      <span>
        <span className="fa fa-shopping-cart" style={{ marginLeft: '0.5rem' }} />
        <span className="caret" style={{ marginLeft: '0.5rem', marginRight: '0.5rem' }} />
      </span>
      )}
    onActivate={onActivate}
  >
  </DropDownButton>
));

export const CaseTrComponent = ({ node, index, theme, relay }: TProps) => {
  type TFilesLinkProps = { fields?: Array<Object>, children?: mixed };
  type TFilesLink = (props: TFilesLinkProps) => any;
  const FilesLink: TFilesLink = ({ fields = [], children }) => (
    <RepositoryFilesLink
      query={{
        searchTableTab: 'files',
        filters: makeFilter([{ field: 'cases.case_id', value: [node.case_id] }, ...fields], false),
      }}
    >
      {children}
    </RepositoryFilesLink>
  );

  return (
    <Tr
      style={{
        backgroundColor: index % 2 === 0 ? theme.tableStripe : '#fff',
      }}
    >
      <Td>
        <AddToCartButton
          files={node.files}
          onActivate={() => relay.setVariables({ isFileDataRequired: true })}
        />
      </Td>
      <Td><CaseLink id={node.case_id} merge whitelist={['filters']} /></Td>
      <Td>{node.project.project_id}</Td>
      <Td>{node.project.primary_site}</Td>
      <Td>{node.demographic.gender}</Td>
      <Td>
        <FilesLink>{sumDataCategories(node.summary.data_categories)}</FilesLink>
      </Td>
      <Td>
        <FilesLink
          fields={[{ field: 'files.data_category', value: CATEGORY_MAP.Seq }]}
        >
          {findDataCategory('Seq', node.summary.data_categories).file_count}
        </FilesLink>
      </Td>
      <Td>
        <FilesLink
          fields={[{ field: 'files.data_category', value: CATEGORY_MAP.Exp }]}
        >
          {findDataCategory('Exp', node.summary.data_categories).file_count}
        </FilesLink>
      </Td>
      <Td>
        <FilesLink
          fields={[{ field: 'files.data_category', value: CATEGORY_MAP.SNV }]}
        >
          {findDataCategory('SNV', node.summary.data_categories).file_count}
        </FilesLink>
      </Td>
      <Td>
        <FilesLink
          fields={[{ field: 'files.data_category', value: CATEGORY_MAP.CNV }]}
        >
          {findDataCategory('CNV', node.summary.data_categories).file_count}
        </FilesLink>
      </Td>
      <Td>
        <FilesLink
          fields={[{ field: 'files.data_category', value: CATEGORY_MAP.Clinical }]}
        >
          {findDataCategory('Clinical', node.summary.data_categories).file_count}
        </FilesLink>
      </Td>
      <Td>
        <FilesLink
          fields={[{ field: 'files.data_category', value: CATEGORY_MAP.Bio }]}
        >
          {findDataCategory('Bio', node.summary.data_categories).file_count}
        </FilesLink>
      </Td>
      <Td>annotations</Td>
    </Tr>
  );
};

export const CaseTrQuery = {
  initialVariables: {
    isFileDataRequired: false,
  },
  fragments: {
    node: () => Relay.QL`
      fragment on Case {
        case_id
        project {
          project_id
          primary_site
        }
        demographic {
          gender
        }
        summary {
          data_categories {
            file_count
            data_category
          }
        }
        files @include(if: $isFileDataRequired){
          file_id
          access
          file_size
          cases {
            project {
              project_id
            }
          }
        }
      }
    `,
  },
};

const CaseTr = Relay.createContainer(
  withTheme(CaseTrComponent),
  CaseTrQuery
);

export default CaseTr;
