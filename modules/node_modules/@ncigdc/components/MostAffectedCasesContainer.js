// @flow

import React from 'react';
import { withState, withProps, lifecycle, compose } from 'recompose';
import { isEqual } from 'lodash';

import { replaceFilters } from '@ncigdc/utils/filters';
import { PaginationContainer } from '@ncigdc/uikit/Pagination';
import { fetchApi } from '@ncigdc/utils/ajax';

import MostAffectedCases from './MostAffectedCases';

const initialState = {
  pagination: { total: 0 },
  mostAffectedCasesTable: [],
  mostAffectedCasesChart: [],
  loading: true,
};

export default compose(
  withState('state', 'setState', initialState),
  withProps({
    fetchBarChart: async ({ currentFilters, setState, projectId }) => {
      const filters = replaceFilters({
        op: '=',
        content: {
          field: 'project.project_id',
          value: projectId,
        },
      }, currentFilters);

      const data = await fetchApi(
        'analysis/top_mutated_cases_by_ssm',
        {
          headers: { 'Content-Type': 'application/json' },
          body: {
            size: 20,
            filters,
            fields: [
              'case_id',
              'gene.ssm.ssm_id',
              'summary.data_categories.data_category',
              'summary.data_categories.file_count',
              'project.primary_site',
              'demographic.gender',
              'diagnoses.days_to_last_follow_up',
            ].join(),
          },
        }
      );

      setState(s => ({
        ...s,
        mostAffectedCasesChart: data.data.hits,
      }));
    },
    fetchData: async ({ currentFilters, offset = 0, setState, projectId, first }) => {
      setState(s => ({ ...s, loading: true }));

      const filters = replaceFilters({
        op: '=',
        content: {
          field: 'project.project_id',
          value: projectId,
        },
      }, currentFilters);

      const data = await fetchApi(
        'analysis/top_mutated_cases_by_ssm',
        {
          headers: { 'Content-Type': 'application/json' },
          body: {
            from: offset,
            size: first,
            filters,
            fields: [
              'case_id',
              'gene.ssm.ssm_id',
              'summary.data_categories.data_category',
              'summary.data_categories.file_count',
              'project.primary_site',
              'demographic.gender',
              'diagnoses.days_to_last_follow_up',
            ].join(),
          },
        }
      );

      setState(s => ({
        ...s,
        mostAffectedCasesTable: data.data.hits,
        loading: false,
        pagination: data.data.pagination,
      }));
    },
  }),
  lifecycle({
    componentDidMount() {
      this.props.fetchData(this.props);
      this.props.fetchBarChart(this.props);
    },
    componentWillReceiveProps(next) {
      if (!isEqual(this.props.currentFilters, next.currentFilters)) {
        this.props.fetchData(next);
        this.props.fetchBarChart(next);
      }
    },
  })
)(({ state, ...props }) => {
  return (
    <PaginationContainer
      total={state.pagination.total}
      onChange={pageInfo => props.fetchData({ ...props, ...pageInfo })}
      entityType="Cases"
      loading={state.loading}
    >
      <MostAffectedCases
        mostAffectedCasesTable={state.mostAffectedCasesTable}
        mostAffectedCasesChart={state.mostAffectedCasesChart}
      />
    </PaginationContainer>
  );
});
