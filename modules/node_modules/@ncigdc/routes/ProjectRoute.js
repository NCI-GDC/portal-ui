/* @flow */
/* eslint fp/no-class:0 */

import React from 'react';
import Relay from 'react-relay';

import ProjectPage from '@ncigdc/containers/ProjectPage';
import type { TPrepareNodeParams } from '@ncigdc/utils/routes/types';
import { parseFilterParam } from '@ncigdc/utils/uri';
import { replaceFilters } from '@ncigdc/utils/filters';
import { nodeAndViewerQuery } from './queries';

const prepareNodeParams: TPrepareNodeParams = type => ({ location: { query }, match: { params } }) => {
  const q = query || {};
  const clinicalFilters = {
    op: 'AND',
    content: [
      {
        op: '=',
        content: {
          field: 'project.project_id',
          value: params.id,
        },
      },
      // TODO: graphql Filters currently don't support nested groups, uncomment when they are supported.
      // {
      //   op: 'OR',
      //   content: [
      //     {
      //       op: 'NOT',
      //       content: {
      //         field: 'demographic.demographic_id',
      //         value: 'MISSING',
      //       },
      //     },
      //     {
      //       op: 'NOT',
      //       content: {
      //         field: 'diagnoses.diagnosis_id',
      //         value: 'MISSING',
      //       },
      //     },
      //     {
      //       op: 'NOT',
      //       content: {
      //         field: 'family_histories.family_history_id',
      //         value: 'MISSING',
      //       },
      //     },
      //     {
      //       op: 'NOT',
      //       content: {
      //         field: 'exposures.exposure_id',
      //         value: 'MISSING',
      //       },
      //     },
      //   ],
      // },
    ],
  };

  const biospecimenFilters = {
    op: 'AND',
    content: [
      {
        op: '=',
        content: {
          field: 'project.project_id',
          value: params.id,
        },
      },
      {
        op: 'NOT',
        content: {
          field: 'samples.sample_id',
          value: 'MISSING',
        },
      },
    ],
  };

  const qq: Object = {
    ...q,
    clinicalFilters: replaceFilters(clinicalFilters, parseFilterParam(q.filters, null)),
    biospecimenFilters: replaceFilters(biospecimenFilters, parseFilterParam(q.filters, null)),
  };

  return ({
    id: btoa(`${type}:${params.id}`),
    ...qq,
  });
};

class ProjectRoute extends Relay.Route {
  static routeName = 'ProjectPageRoute';
  static queries = nodeAndViewerQuery;
  static prepareParams = prepareNodeParams('Project');
}

export default (props: mixed) => (
  <Relay.Renderer
    Container={ProjectPage}
    queryConfig={new ProjectRoute(props)}
    environment={Relay.Store}
  />
);
