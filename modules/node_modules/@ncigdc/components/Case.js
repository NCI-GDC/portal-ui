// @flow

import React from 'react';
import { LocationSubscriber } from 'react-router/Broadcasts';
import FileIcon from 'react-icons/lib/fa/file-o';
import { compose, getContext } from 'recompose';
import JSURL from 'jsurl';
import { stringify } from 'query-string';

import { makeFilter, mergeQuery } from '@ncigdc/utils/filters';
import { EXPERIMENTAL_STRATEGIES, DATA_CATEGORIES } from '@ncigdc/utils/constants';
import { parseFilterParam, removeEmptyKeys } from '@ncigdc/utils/uri';
import Column from '@ncigdc/uikit/Flex/Column';
import Row from '@ncigdc/uikit/Flex/Row';
import CountCard from '@ncigdc/components/CountCard';
import SummaryCard from '@ncigdc/components/SummaryCard';
import EntityPageVerticalTable from '@ncigdc/components/EntityPageVerticalTable';
import ClinicalCard from '@ncigdc/components/ClinicalCard';
import BiospecimenCard from '@ncigdc/components/BiospecimenCard';
import FrequentMutationsContainer from '@ncigdc/components/FrequentMutationsContainer';
import { withTheme } from '@ncigdc/theme';
import Link from '@ncigdc/components/Links/Link';

import type { TRawQuery } from '@ncigdc/utils/uri/types';

const styles = {
  icon: {
    width: '4rem',
    height: '4rem',
    color: '#888',
  },
  card: {
    backgroundColor: 'white',
  },
  heading: {
    flexGrow: 1,
    fontSize: '2rem',
    marginBottom: 7,
    marginTop: 7,
  },
};

const enhance = compose(
  getContext({ router: React.PropTypes.object }),
  withTheme
);

const Case = ({
  node,
  totalNumCases,
  theme,
  numCasesAggByProject,
  router,
  query,
}: {
  node: Object,
  totalNumCases: number,
  theme: Object,
  numCasesAggByProject: Array<{ [string]: number }>,
  router: Object,
  query: Object,
}) => {
  const p = node;

  const annotationIds = p.annotations.map(annotation =>
    annotation.annotation_id
  );

  const experimentalStrategies = EXPERIMENTAL_STRATEGIES.reduce((result, name) => {
    const strat = p.summary.experimental_strategies.find(item =>
      item.experimental_strategy.toLowerCase() === name.toLowerCase()
    );

    if (strat) {
      const linkQuery = {
        filters: makeFilter([
          { field: 'cases.case_id', value: p.case_id },
          { field: 'files.experimental_strategy', value: [strat.experimental_strategy] },
        ], false),
        facetTab: 'files',
        searchTableTab: 'files',
      };

      return [
        ...result,
        {
          ...strat,
          id: strat.experimental_strategy,
          file_count: (
            <Link
              merge="replace"
              pathname="/repository"
              query={linkQuery}
            >
              {strat.file_count}
            </Link>
          ),
          file_count_value: strat.file_count,
          tooltip: (
            <span>
              <b>{strat.experimental_strategy}</b><br />
              {strat.file_count} file{strat.file_count > 1 ? 's' : ''}
            </span>
          ),
          clickHandler: () => {
            const newQuery = mergeQuery(linkQuery, query, 'replace');
            const q = removeEmptyKeys({ ...newQuery, filters: newQuery.filters && JSURL.stringify(newQuery.filters) });
            router.transitionTo(`/repository?${stringify(q)}`);
          },
        },
      ];
    }

    return result;
  }, []);

  const dataCategories = Object.keys(DATA_CATEGORIES).reduce((acc, key) => {
    const type = p.summary.data_categories.find(item => item.data_category === DATA_CATEGORIES[key].full) || {
      data_category: DATA_CATEGORIES[key].full,
      file_count: 0,
    };

    const linkQuery = {
      filters: makeFilter([
        { field: 'cases.case_id', value: p.case_id },
        { field: 'files.data_category', value: [type.data_category] },
      ], false),
      facetTab: 'files',
      searchTableTab: 'files',
    };

    return acc.concat({
      ...type,
      id: type.data_category,
      file_count: (
        <Link
          merge="replace"
          pathname="/repository"
          query={linkQuery}
        >
          {type.file_count}
        </Link>
      ),
      file_count_value: type.file_count,
      tooltip: (
        <span>
          <b>{type.data_category}</b><br />
          {type.file_count} file{type.file_count > 1 ? 's' : ''}
        </span>
      ),
      clickHandler: () => {
        const newQuery = mergeQuery(linkQuery, query, 'replace');
        const q = removeEmptyKeys({ ...newQuery, filters: newQuery.filters && JSURL.stringify(newQuery.filters) });
        router.transitionTo(`/repository?${stringify(q)}`);
      },
    });
  }, []);

  return (
    <Column spacing={theme.spacing}>
      <Row spacing={theme.spacing}>
        <EntityPageVerticalTable
          id="summary"
          title={<span><i className="fa fa-table" /> Summary</span>}
          thToTd={[
            { th: 'Case UUID', td: p.case_id },
            { th: 'Case Submitter ID', td: p.submitter_id },
            {
              th: 'Project ID',
              td: <Link pathname={`/projects/${p.project.project_id}`}>{p.project.project_id}</Link>,
            },
            { th: 'Project Name', td: p.project.name },
            { th: 'Disease Type', td: p.project.disease_type },
            { th: 'Program', td: p.project.program.name },
            { th: 'Primary Site', td: p.project.primary_site },
          ]}
          style={{ flex: 1 }}
        />

        <Column style={{ width: '200px' }} spacing={theme.spacing}>
          <CountCard
            title="FILES"
            count={p.files.length.toLocaleString()}
            icon={<FileIcon style={styles.icon} />}
            linkParams={p.files.length ? {
              pathname: '/repository',
              query: {
                filters: makeFilter([{ field: 'cases.case_id', value: p.case_id }], false),
                facetTab: 'files',
                searchTableTab: 'files',
              },
            } : null}
          />
          <CountCard
            title="ANNOTATIONS"
            count={(annotationIds || []).length.toLocaleString()}
            icon={<i className="fa fa-edit" style={styles.icon} />}
            linkParams={(annotationIds || []).length ? {
              pathname: '/annotations',
              query: {
                filters: makeFilter([{ field: 'annotations.case_id', value: p.case_id }], false),
              },
            } : null}
          />
        </Column>
      </Row>

      <Row style={{ flexWrap: 'wrap' }} spacing={theme.spacing}>
        <span style={{ flex: 1 }}>
          <SummaryCard
            tableTitle="File Counts by Experimental Strategy"
            pieChartTitle="File Counts by Experimental Strategy"
            data={experimentalStrategies}
            footer={`${(experimentalStrategies || []).length} Experimental Strategies`}
            path="file_count_value"
            headings={[
              { key: 'experimental_strategy', title: 'Experimental Strategy', color: true },
              {
                key: 'file_count',
                title: 'Files',
                style: { textAlign: 'right' },
              },
            ]}
          />
        </span>
        <span style={{ flex: 1 }}>
          <SummaryCard
            tableTitle="File Counts by Data Category"
            pieChartTitle="File Counts by Experimental Strategy"
            data={dataCategories}
            footer={`${(dataCategories || []).length} Experimental Strategies`}
            path="file_count_value"
            headings={[
              { key: 'data_category', title: 'Data Category', color: true },
              {
                key: 'file_count',
                title: 'Files',
                style: { textAlign: 'right' },
              },
            ]}
          />
        </span>
      </Row>

      <Row id="clinical" style={{ flexWrap: 'wrap' }} spacing={theme.spacing}>
        <ClinicalCard p={p} />
      </Row>

      <Row id="biospecimen" style={{ flexWrap: 'wrap' }} spacing={theme.spacing}>
        <BiospecimenCard p={p} />
      </Row>

      <Column style={{ ...styles.card, marginTop: '2rem' }}>
        <h1 style={{ ...styles.heading, padding: '1rem' }} id="frequent-mutations">
          <i className="fa fa-bar-chart-o" style={{ paddingRight: '10px' }} />
          Most Frequent Mutations
        </h1>

        <LocationSubscriber>{(ctx: {| pathname: string, query: TRawQuery |}) => {
          const { filters } = ctx.query || {};
          const currentFilters = parseFilterParam(filters, { op: 'and', content: [] });
          return (
            <FrequentMutationsContainer
              numCasesAggByProject={numCasesAggByProject}
              totalNumCases={totalNumCases}
              projectId={p.project.project_id}
              api={API}
              showSurvivalPlot={false}
              currentFilters={currentFilters}
            />
          );
        }}</LocationSubscriber>

      </Column>
    </Column>
  );
};

export default enhance(Case);
