// @flow

import React from 'react';
import { compose, lifecycle, withState } from 'recompose';
import _ from 'lodash';
import { scaleOrdinal, schemeCategory10 } from 'd3';
import { connect } from 'react-redux';
import { renderPlot } from '@oncojs/survivalplot';
import { insertRule } from 'glamor';

import toMap from '@ncigdc/utils/toMap';
import { Row, Column } from '@ncigdc/uikit/Flex';
import Button from '@ncigdc/uikit/Button';
import { Tooltip, setTooltip } from '@ncigdc/uikit/Tooltip';
import Hidden from '@ncigdc/components/Hidden';
import withRouter from '@ncigdc/utils/withRouter';

import DownloadVisualizationButton from '@ncigdc/components/DownloadVisualizationButton';

import { graphTitle, visualizingButton } from '@ncigdc/theme/mixins';
import SpinnerCentered from '@ncigdc/components/SpinnerCentered';

type TProps = {
  height: number,
  legend: Array<{
    key: string,
    value: any,
  }>,
  rawData: {
    results: Array<{
      donors: Array<Object>,
    }>,
    overallStats: {
      pValue: number,
    },
  },
  setXDomain: Function,
  setSurvivalContainer: Function,
  survivalPlotloading: boolean,
  xDomain: Array<number>,
  survivalContainer: Element,
  dispatch: Function,
  push: Function,
};

const colors = scaleOrdinal(schemeCategory10);
const palette = [colors(0), colors(1)];

const styles = {
  pValue: {
    fontSize: '1.1rem',
    height: '1.5rem',
    marginTop: '0.5rem',
  },
};

const SurvivalPlotWrapper = ({
  height = 0,
  legend,
  rawData,
  setXDomain,
  setSurvivalContainer,
  survivalPlotloading = false,
}: TProps) => {
  const { results = [], overallStats = {} } = rawData || {};
  const pValue = overallStats.pValue;

  return (
    <div className="survival-plot" style={{ height: '100%' }}>
      {
        !survivalPlotloading && (
          <Column>
            <Row style={{ justifyContent: 'flex-end', marginRight: '12px' }} spacing="1rem">
              <DownloadVisualizationButton
                svg={'.survival-plot-container svg'}
                data={results}
                stylePrefix=".survival-plot"
                slug="survival-plot"
                noText
                tooltipHTML="Download SurvivalPlot data or image"
                tsvData={
                  results.reduce((data, set) => {
                    const mapData = set.donors.map((d) => toMap(d));
                    return [...data, ...(results.length > 1 ? mapData.map((m, idx) => m.set('mutated', !idx)) : mapData)];
                  }, [])
                }
              />
              <Tooltip Component="Reload SurvivalPlot">
                <Button
                  style={visualizingButton}
                  onClick={() => setXDomain()}
                ><i className="fa fa-undo" /><Hidden>Reset</Hidden></Button>
              </Tooltip>
            </Row>
            <div style={graphTitle()}>Overall Survival Plot</div>
            <Row style={{ justifyContent: 'center', flexWrap: 'wrap', marginTop: '0.5rem' }}>
              {legend &&
                legend.map((l, i) => (
                  <div
                    key={l.key}
                    style={{
                      color: palette[i],
                      margin: '0 1rem',
                      fontSize: '1.35rem',
                    }}
                  >{l.value}</div>
                ))
              }
            </Row>
            {
              <span style={styles.pValue}>
                {pValue && `Log-Rank Test P-Value = ${pValue.toExponential(2)}`}
              </span>
            }
          </Column>
        )
      }
      {survivalPlotloading && <SpinnerCentered />}
      <div
        className="survival-plot-container"
        ref={setSurvivalContainer}
        style={{ overflow: 'hidden', height: survivalPlotloading ? '0px' : height, position: 'relative' }}
      />
    </div>
  );
};

function renderSurvivalPlot(props: TProps): void {
  const { height = 0, rawData = {}, xDomain, survivalContainer, setXDomain, dispatch, push } = props;
  const { results = [] } = rawData;

  if (survivalContainer) {
    renderPlot({
      container: survivalContainer,
      dataSets: results,
      palette,
      xDomain,
      xAxisLabel: 'Duration (days)',
      yAxisLabel: 'Survival Rate',
      height,
      getSetSymbol: (curve, curves) => (
        curves.length === 1 ?
          '' :
          `<tspan font-style="italic">S</tspan><tspan font-size="0.7em" baseline-shift="-15%">${
          curves.indexOf(curve) + 1
        }</tspan>`
      ),
      onMouseEnterDonor: (e, donor) => {
        dispatch(setTooltip(
          <span>
            Case ID: {donor.id}<br />
            Survival Rate: {Math.round(donor.survivalEstimate * 100)}%<br />
            {donor.censored ? `Interval of last follow-up: ${donor.time} days` : `Time of Death: ${donor.time} days`}
          </span>
        ));
      },
      onMouseLeaveDonor: () => dispatch(setTooltip(null)),
      onClickDonor: (e, donor) => push({ pathname: `/cases/${donor.id}` }),
      onDomainChange: setXDomain,
      margins: {
        top: 15,
        right: 20,
        bottom: 40,
        left: 50,
      },
    });
  }
}

const enhance = compose(
  connect(),
  withRouter,
  withState('xDomain', 'setXDomain', undefined),
  withState('survivalContainer', 'setSurvivalContainer', null),

  lifecycle({
    shouldComponentUpdate(nextProps: TProps): void {
      return !_.isEqual(this.props, nextProps); // eslint-disable-line fp/no-this
    },

    componentDidUpdate(): void {
      renderSurvivalPlot(this.props); // eslint-disable-line fp/no-this
    },

    componentDidMount(): void {
      renderSurvivalPlot(this.props); // eslint-disable-line fp/no-this
    },
  })
);

export default enhance(SurvivalPlotWrapper);

/*----------------------------------------------------------------------------*/

insertRule(`
  .survival-plot .axis path,
  .survival-plot .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }
  .survival-plot .axis path {
    stroke: #e6dede;
  }
  .survival-plot .axis .tick text {
    fill: #888;
    font-size: 1.2ex;
  }
  .survival-plot .axis .axis-label {
    color: #999999;
    font-size: 0.96rem;
    fill: #999999;
    font-weight: 300;
  }
  .survival-plot .axis .minor line {
    stroke: none;
  }
  .survival-plot .line {
    fill: none;
    stroke-width: 1.5px;
  }
  .survival-plot .serie .point {
    r: 3;
    transition: all 0.1s;
    cursor: pointer;
    stroke-width: none;
  }
  .survival-plot .serie .point:hover,
  .survival-plot .serie .point:active {
    r: 5;
  }
  .survival-plot .serie .point[status="alive"] {
    opacity: 0.5;
  }
  .survival-plot .serie .point[status="deceased"] {
    opacity: 0;
    transition: r 0.3s, opacity 0.3s;
    r: 5;
  }
  .survival-plot .serie .point[status="deceased"]:hover,
  .survival-plot .serie .point[status="deceased"]:active {
    opacity: 1;
    r: 2;
  }
  .survival-plot .serie .point-line {
    cursor: pointer;
  }
  .survival-plot .serie .point-line[status="deceased"] {
    opacity: 0;
  }
  .survival-plot .brush .extent {
    stroke: #fff;
    fill: #edf8ff;
    shape-rendering: crispEdges;
    pointer-events: none;
  }
`);
