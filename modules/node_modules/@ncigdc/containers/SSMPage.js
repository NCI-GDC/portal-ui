/* @flow */

import React from 'react';
import Relay from 'react-relay';
import { compose, lifecycle } from 'recompose';

import { makeFilter } from '@ncigdc/utils/filters';
import FullWidthLayout from '@ncigdc/components/Layouts/FullWidthLayout';
import SSM from '@ncigdc/components/SSM';

export type TProps = {
  node: {
    genomic_dna_change: string,
  },
  viewer: {
    cohort: {
      cases: {
        aggregations: {
          project__project_id: {
            buckets: Array<Object>,
          },
        },
      },
    },
  },
};

export const SSMPageComponent = compose(
  lifecycle({
    componentDidMount() {
      const transcript = this.props.node.consequence.hits.edges.find(x =>
        x.node.transcript.is_canonical
      ).node.transcript;

      this.props.relay.setVariables({
        fetchVizData: true,
        ssmFilters: makeFilter([
          {
            field: 'consequence.transcript.transcript_id',
            value: [transcript.transcript_id],
          },
        ], false),
        geneFilters: makeFilter([
          {
            field: 'genes.gene_id',
            value: [transcript.gene.gene_id],
          },
        ], false)
      })
    }
  })
)((props: TProps) => (
  <FullWidthLayout
    title={props.node.ssm_id}
    entityType={<i className="fa fa-file-o" />}
  >
    <SSM
      node={props.node}
      gene={(props.viewer.cohort.genes || { hits: { edges: [{ node: null }] } }).hits.edges[0].node}
      ssms={(props.viewer.cohort.ssms || { hits: { edges: [] } }).hits.edges}
      allCasesAgg={props.viewer.cohort.cases.aggregations.project__project_id.buckets}
    />
  </FullWidthLayout>
));

export const SSMPageQuery = {
  initialVariables: {
    score: 'occurrence.case.project.project_id',
    fetchVizData: false,
    geneFilters: null,
    ssmFilters: null,
  },
  fragments: {
    node: () => Relay.QL`
      fragment on Ssm {
        ssm_id
        chromosome
        start_position
        reference_allele
        genomic_dna_change
        tumor_allele
        mutation_subtype
        ncbi_build
        consequence {
          hits(first: 99) {
            edges {
              node {
                transcript {
                  aa_change
                  consequence_type
                  transcript_id
                  is_canonical
                  transcript_id
                  annotation {
                    impact
                    hgvsc
                  }
                  gene {
                    external_db_ids {
                      entrez_gene
                      uniprotkb_swissprot
                      hgnc
                      omim_gene
                    }
                    symbol
                    gene_strand
                    gene_id
                  }
                }
              }
            }
          }
        }
        occurrence {
          hits(first: 99) {
            edges {
              node {
                case {
                  case_id
                  disease_type
                  primary_site
                  project {
                    project_id
                  }
                }
              }
            }
          }
        }
      }
    `,
    viewer: () => Relay.QL`
      fragment on Root {
        cohort {
          cases {
            aggregations {
              project__project_id {
                buckets {
                  doc_count
                  key
                }
              }
            }
          }
          genes @include(if: $fetchVizData) {
            hits(first: 1 filters: $geneFilters) {
              edges {
                node {
                  transcripts {
                    hits(first: 99) {
                      edges {
                        node {
                          transcript_id
                          length_amino_acid
                          is_canonical
                          domains {
                            hit_name
                            start
                            end
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ssms @include(if: $fetchVizData) {
            hits(first: 100 filters: $ssmFilters score: $score) {
              total
              edges {
                node {
                  score
                  ssm_id
                  genomic_dna_change
                  occurrence {
                    hits(first: 99) {
                      edges {
                        node {
                          case {
                            case_id
                            disease_type
                            primary_site
                            project {
                              project_id
                            }
                          }
                        }
                      }
                    }
                  }
                  consequence {
                    hits(first: 99) {
                      edges {
                        node {
                          transcript {
                            is_canonical
                            consequence_type
                            gene {
                              gene_id
                              symbol
                            }
                            aa_change
                            transcript_id
                            aa_start
                            annotation {
                              impact
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const SSMPage = Relay.createContainer(
  SSMPageComponent,
  SSMPageQuery
);

export default SSMPage;
