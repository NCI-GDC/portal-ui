// @flow

import React from 'react';
import { compose, withState } from 'recompose';
import _ from 'lodash';

import { Row, Column } from '@ncigdc/uikit/Flex';

import BarChart from '@ncigdc/components/Charts/BarChart';
import SurvivalPlotWrapper from '@ncigdc/components/SurvivalPlotWrapper';
import DownloadVisualizationButton from '@ncigdc/components/DownloadVisualizationButton';
import MutationTable from '@ncigdc/components/MutationTable';

import { withTheme } from '@ncigdc/theme';
import { graphTitle } from '@ncigdc/theme/mixins';

const FrequentMutations = ({
  frequentMutations,
  numCasesAggByProject,
  totalNumCases,
  setSelectedSurvivalData,
  selectedSurvivalData,
  defaultSurvivalRawData,
  width,
  api,
  projectId,
  defaultSurvivalLegend,
  showSurvivalPlot,
  theme,
  survivalPlotloading,
}) => {
  const survivalData = showSurvivalPlot && {
    legend: selectedSurvivalData.legend || defaultSurvivalLegend,
    rawData: selectedSurvivalData.rawData || defaultSurvivalRawData,
  };

  return (
    <Column>
      {!!frequentMutations.length &&
        <div>
          <Row
            style={{
              paddingBottom: '2.5rem',
              ...(!showSurvivalPlot ? { justifyContent: 'center' } : {}),
            }}
          >
            <span style={{ flex: 1 }}>
              <div style={{ textAlign: 'right', marginRight: 50, marginLeft: 30 }}>
                <DownloadVisualizationButton
                  svg="#mutation-chart svg"
                  data={frequentMutations.map(fm => _.omit(fm, 'consequence_type'))}
                  slug="bar-chart"
                  noText
                  tooltipHTML="Download image or data"
                />
              </div>
              <div style={graphTitle}>Distribution of Most Frequent Mutations</div>
              <Row id="mutation-chart" style={{ padding: '10px', justifyContent: 'center' }}>
                <BarChart
                  bandwidth={!showSurvivalPlot && 60}
                  data={frequentMutations
                    .sort((a, b) => b.num_affected_cases_all - a.num_affected_cases_all)
                    .map(x => ({
                    label: x.genomic_dna_change,
                    value: x.occurrence.length,
                    tooltip: projectId
                      ? (
                        <span>
                          <b>{x.genomic_dna_change}</b><br />
                          <div>{x.num_affected_cases_project} Case{x.num_affected_cases_project > 1 ? 's' : ''}
                          &nbsp;affected in {projectId}</div>
                          <div>{x.num_affected_cases_project} / {numCasesAggByProject[projectId]}
                          &nbsp;({((x.num_affected_cases_project / numCasesAggByProject[projectId]) * 100).toFixed(2)}%)</div>
                        </span>
                      )
                      : (
                        <span><b>{x.genomic_dna_change}</b><br />
                          <div>{x.num_affected_cases_all} Case{x.num_affected_cases_all > 1 ? 's ' : ' '}
                            &nbsp;affected in all projects</div>
                          <div>{x.num_affected_cases_all} / {totalNumCases}
                          &nbsp;({((x.num_affected_cases_all / totalNumCases) * 100).toFixed(2)}%)</div>
                        </span>
                      ),
                    href: `mutations/${x.ssm_id}`,
                  }))}
                  margin={{ top: 30, right: 50, bottom: 105, left: 40 }}
                  height={250}
                  yAxis={{ title: '# Affected Cases' }}
                  styles={{
                    xAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                    yAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                    bars: { fill: theme.secondary },
                    tooltips: {
                      fill: '#fff',
                      stroke: theme.greyScale4,
                      textFill: theme.greyScale3,
                    },
                  }}
                />
              </Row>
            </span>
            {showSurvivalPlot && (
              <span style={{ flexGrow: 1, flex: 1 }}>
                <SurvivalPlotWrapper
                  {...survivalData}
                  survivalPlotloading={survivalPlotloading}
                  onReset={() => setSelectedSurvivalData({})}
                  height={240}
                  width={width}
                />
              </span>
            )}
          </Row>
          <MutationTable
            numCasesAggByProject={numCasesAggByProject}
            projectId={projectId}
            totalNumCases={totalNumCases}
            frequentMutations={frequentMutations}
            selectedSurvivalData={selectedSurvivalData}
            setSelectedSurvivalData={setSelectedSurvivalData}
            showSurvivalPlot={showSurvivalPlot}
            api={api}
          />
        </div>
      }
      {!frequentMutations.length &&
        <span style={{ padding: '2rem' }}>No mutation data to display</span>
      }
    </Column>
  );
};

const enhance = compose(
  withState('selectedSurvivalData', 'setSelectedSurvivalData', {}),
  withTheme
);

export default enhance(FrequentMutations);
