// @flow

import React from 'react';
import _ from 'lodash';
import SearchIcon from 'react-icons/lib/fa/search';
import { compose, withState } from 'recompose';

import { humanify } from '@ncigdc/utils/string';
import { search, idFields, formatValue } from '@ncigdc/utils/biotree';
import { makeFilter } from '@ncigdc/utils/filters';

import Card from '@ncigdc/uikit/Card';
import { Row, Column } from '@ncigdc/uikit/Flex';
import Input from '@ncigdc/uikit/Form/Input';

import EntityPageVerticalTable from '@ncigdc/components/EntityPageVerticalTable';
import BioTreeView from '@ncigdc/components/BioTreeView';
import DownloadButton from '@ncigdc/components/DownloadButton';

import { withTheme } from '@ncigdc/theme';

const styles = {
  button: {
    color: '#333',
    backgroundColor: '#fff',
    borderColor: '#ccc',
    minWidth: '115px',
    minHeight: '34px',
    display: 'inline-flex',
    outline: 'none',
  },
  searchIcon: theme => ({
    backgroundColor: theme.greyScale5,
    color: theme.greyScale2,
    padding: '0.8rem',
    width: '3.4rem',
    height: '3.4rem',
    borderRadius: '4px 0 0 4px',
    border: `1px solid ${theme.greyScale4}`,
    borderRight: 'none',
  }),
};

const BiospecimenCard = ({ p, state: { selectedEntity: se, type, query }, setState, theme }) => {
  const selectedEntity =
    (query && (_.flatten(p.samples.hits.edges.map(e => search(query, e))) || [])[0]) || se;

  return (
    <Card
      style={{ flex: 1 }}
      title={
        <Row style={{ justifyContent: 'space-between' }}>
          <span>Biospecimen</span>
          <DownloadButton
            filename={`biospecimen.case-${p.case_id}`}
            url={`${API}cases`}
            activeText="Processing"
            inactiveText="Export"
            filters={makeFilter([{ field: 'cases.case_id', value: p.case_id }], false)}
            fields={['case_id']}
            dataExportExpands={[
              'samples',
              'samples.portions',
              'samples.portions.analytes',
              'samples.portions.analytes.aliquots',
              'samples.portions.analytes.aliquots.annotations',
              'samples.portions.analytes.annotations',
              'samples.portions.submitter_id',
              'samples.portions.slides',
              'samples.portions.annotations',
              'samples.portions.center',
            ]}
          />
        </Row>
      }
    >
      <Row>
        <Column flex="3" style={{ padding: '0 15px' }}>
          <Row spacing="30px">
            <Row flex="1">
              <SearchIcon style={styles.searchIcon(theme)} />
              <Input
                onChange={({ target }) => setState(s => ({ ...s, query: target.value }))}
                placeholder="Search"
              />
            </Row>
          </Row>

          <Column style={{ padding: '10px' }}>
            <BioTreeView
              entities={p.samples}
              type={{ s: 'sample', p: 'samples' }}
              query={query}
              selectedEntity={selectedEntity}
              selectEntity={(selectedEntity, type) => setState(s => ({ ...s, selectedEntity, type: type.s }))}
              defaultExpanded
            />
          </Column>

        </Column>
        <Column flex="4">
          <EntityPageVerticalTable
            thToTd={[
              { th: 'Submitter ID', td: selectedEntity.submitter_id },
              { th: `${type} ID`, td: selectedEntity[idFields.find(id => selectedEntity[id])] },
              ...Object.entries(selectedEntity)
                .filter(([key]) =>
                  !['submitter_id', 'expanded', `${type}_id`, '__dataID__'].includes(key)
                )
                .map(([key, val]) => {
                  if (['portions', 'aliquots', 'analytes', 'slides'].includes(key)) {
                    return { th: humanify({ term: key }), td: formatValue(val.hits.total) };
                  }
                  return { th: humanify({ term: key }), td: formatValue(val) };
                }),
            ]}
            style={{ flex: 1 }}
          />
        </Column>
      </Row>
    </Card>
  );
};

export default compose(
  withState(
    'state',
    'setState',
    ({ p }) => ({
      selectedEntity: p.samples.hits.edges[0].node,
      type: 'sample',
      query: '',
    })
  ),
  withTheme
)(BiospecimenCard);
