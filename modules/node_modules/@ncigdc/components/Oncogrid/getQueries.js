/* @flow */
/* global API */
import { replaceFilters } from '@ncigdc/utils/filters';
import memoize from 'memoizee';

const MAX_CASES = 50;
async function getGenes({
  api,
  projectId,
  currentFilters,
  consequenceTypes,
  impacts,
}: {
  api: string,
  projectId?: string,
  currentFilters: Object,
  consequenceTypes: Array<string>,
  impacts: Array<string>,
}): Promise<Object> {
  const filters = replaceFilters({
    op: 'and',
    content: [
      projectId && { op: '=', content: { field: 'cases.project.project_id', value: projectId } },
      impacts && { op: 'in', content: { field: 'ssms.consequence.transcript.annotation.impact', value: impacts } },
      consequenceTypes && { op: 'in',
        content: {
          field: 'ssms.consequence.transcript.consequence_type',
          value: consequenceTypes,
        },
      },
    ].filter(Boolean),
  }, currentFilters);

  const fields = [
    'gene_id',
    'case.case_id',
    'symbol',
    'is_cancer_gene_census',
  ];

  const r = await fetch(`${api}analysis/top_mutated_genes_by_project?size=50&fields=${fields.join()}${
    filters.content.length ? `&filters=${JSON.stringify(filters)}` : ''
  }`);

  return r.json();
}

async function getOccurences({
  api,
  projectId,
  geneIds,
  consequenceTypes,
  impacts,
  currentFilters,
}: {
  api: string,
  projectId?: string,
  geneIds: Array<string>,
  consequenceTypes: Array<string>,
  impacts: Array<string>,
  currentFilters: Object,
}): Promise<Object> {
  if (!geneIds.length) return { data: { hits: [] } };

  const filters = replaceFilters({
    op: 'and',
    content: [
      { op: 'in', content: { field: 'genes.gene_id', value: geneIds } },
      { op: 'in', content: { field: 'ssms.consequence.transcript.annotation.impact', value: impacts } },
      {
        op: 'in',
        content: { field: 'ssms.consequence.transcript.consequence_type', value: consequenceTypes },
      },
      projectId && { op: '=', content: { field: 'cases.project.project_id', value: projectId } },
    ].filter(Boolean),
  }, currentFilters);

  const fields = [
    'ssm.consequence.transcript.consequence_type',
    'ssm.consequence.transcript.annotation.impact',
    'ssm.consequence.transcript.gene.gene_id',
    'ssm.ssm_id',
    'case.case_id',
  ];

  const r = await fetch(`${api}ssm_occurrences?size=8000&filters=${JSON.stringify(filters)}&fields=${fields.join()}`);
  return r.json();
}

async function getCases({
  api,
  geneIds,
  projectId,
  currentFilters,
  impacts,
}: {
  api: string,
  geneIds: Array<string>,
  projectId?: string,
  currentFilters: Object,
  impacts: Array<string>,
}): Promise<Object> {
  if (!geneIds.length) return { data: { hits: [] } };

  const filters = replaceFilters({
    op: 'and',
    content: [
      { op: 'in', content: { field: 'genes.gene_id', value: geneIds } },
      { op: 'in', content: { field: 'ssms.consequence.transcript.annotation.impact', value: impacts } },
      projectId && { op: '=', content: { field: 'cases.project.project_id', value: projectId } },
    ].filter(Boolean),
  }, currentFilters);

  const r = await fetch(`${api}analysis/top_mutated_cases_by_gene`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      ...(filters && { filters: JSON.stringify(filters) }),
      size: MAX_CASES,
      fields: [
        'diagnoses.days_to_death',
        'diagnoses.age_at_diagnosis',
        'diagnoses.vital_status',
        'demographic.gender',
        'demographic.race',
        'demographic.ethnicity',
        'case_id',
        'summary.data_categories.file_count',
        'summary.data_categories.data_category',
      ].join(),
    }),
  });

  return r.json();
}

async function getQueries({
  projectId,
  // $FlowIgnore
  api = API,
  consequenceTypes,
  impacts = ['HIGH'],
  currentFilters,
}: {
  projectId: string,
  consequenceTypes: Array<string>,
  impacts?: Array<string>,
  currentFilters: Object,
}): Promise<Object> {
  const { data } = await getGenes({ api, projectId, currentFilters, impacts, consequenceTypes });
  const genes = data.hits;
  const geneIds = genes.map(gene => gene.gene_id);

  const d = await Promise.all([
    getOccurences({ api, projectId, consequenceTypes, geneIds, impacts, currentFilters }),
    getCases({ api, projectId, geneIds, currentFilters, impacts }),
  ]);

  return {
    genes,
    occurences: d[0].data.hits,
    cases: d[1].data.hits,
  };
}

export default memoize(getQueries, {
  promise: true,
  normalizer: (args) => JSON.stringify(args[0]),
  max: 10,
});
