/* @flow */

import React, { PropTypes } from 'react';
import Relay from 'react-relay';

import Pagination from '@ncigdc/components/Pagination';
import Showing from '@ncigdc/components/Pagination/Showing';

import { Tr, Th } from '@ncigdc/uikit/Table';

import FileTr from './FileTr';

import type { TTableProps } from './types';

const styles = {
  table: {
    width: '100%',
    borderCollapse: 'collapse',
    borderSpacing: 0,
  },
};

export const FileTableComponent = (props: TTableProps) => {
  const prefix = 'files';

  return (
    <div>
      <div style={{ backgroundColor: 'white', padding: '1rem' }}>
        <Showing
          docType="files"
          prefix={prefix}
          params={props.relay.route.params}
          total={props.hits.pagination.total}
        />
      </div>
      <div style={{ overflowX: 'auto' }}>
        <table style={styles.table}>
          <thead>
            <Tr>
              <Th>C</Th>
              <Th>Access</Th>
              <Th>File Name</Th>
              <Th>Cases</Th>
              <Th>Project</Th>
              <Th>Category</Th>
              <Th>Format</Th>
              <Th>Size</Th>
            </Tr>
          </thead>
          <tbody>
            {props.hits.edges.map((e, i) => (
              <FileTr {...e} key={e.node.id} index={i} />
          ))}
          </tbody>
        </table>
      </div>
      <Pagination prefix={prefix} params={props.relay.route.params} total={props.hits.pagination.total} />
    </div>
  );
};

export const FileTableQuery = {
  fragments: {
    hits: () => Relay.QL`
      fragment on RepositoryFileConnection {
        pagination {
          sort
          total
          size
          offset
        }
        edges {
          node {
            id
            ${FileTr.getFragment('node')}
          }
        }
      }
    `,
  },
};

const FileTable = Relay.createContainer(
  FileTableComponent,
  FileTableQuery
);

export default FileTable;
