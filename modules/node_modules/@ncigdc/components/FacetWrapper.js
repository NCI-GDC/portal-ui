/* @flow */
/* eslint fp/no-this: 0, jsx-a11y/no-static-element-interactions: 0, max-len: 1, no-else-return:1 */

import React from 'react';
import _ from 'lodash';

import { css } from 'glamor';
import { compose, lifecycle, defaultProps, renameProps } from 'recompose';
import { withTheme } from '@ncigdc/theme';

import TermAggregation from '@ncigdc/components/Aggregations/TermAggregation';
import DateFacet from '@ncigdc/components/Aggregations/DateFacet';
import PrefixFacet from '@ncigdc/components/Aggregations/PrefixFacet';
import RangeFacet from '@ncigdc/components/Aggregations/RangeFacet';

import escapeForRelay from '@ncigdc/utils/escapeForRelay';

const COMMON_PREPOSITIONS = ['a', 'an', 'and', 'at', 'but', 'by', 'for', 'in',
  'nor', 'of', 'on', 'or', 'out', 'so', 'the', 'to', 'up', 'yet'];

const fieldNameToTitle = (fieldName) => fieldName.replace(/_|\./g, ' ')
  .split(' ')
  .map(word => (COMMON_PREPOSITIONS.includes(word) ? word : _.capitalize(word)))
  .join(' ');

const getFacetType = facet => {
  if (_.includes(facet.field, 'datetime')) {
    return 'datetime';
  } else if (_.some(['_id', '_uuid', 'md5sum', 'file_name'], idSuffix => _.includes(facet.field, idSuffix))) {
    return 'id';
  } else if (facet.type === 'long') {
    return 'range';
  } else {
    return 'terms';
  }
};

const styles = {
  FacetWrapper: {
    position: 'relative',
  },
  removeIcon: {
    color: '#bb0e3d',
    position: 'absolute',
    zIndex: 1,
    fontSize: '1.4em',
    top: 15,
    right: 15,
    ':hover::before': {
      textShadow: '0 0 7px rgba(255, 127, 71, 0.62)',
    },
  },
};

const FacetWrapper = compose(
  withTheme,
  defaultProps({
    onRequestRemove: _.noop,
    isRemovable: false,
  }),
  renameProps({
    onRequestRemove: 'handleRequestRemove',
  }),
  lifecycle({
    componentWillMount(): void {
      if (!this.props.relay.variables[`shouldShow_${escapeForRelay(this.props.facet.field)}`]) {
        this.props.relay.setVariables({
          [`shouldShow_${escapeForRelay(this.props.facet.field)}`]: true,
        });
      }
    },
    componentWillUnmount(): void {
      if (this.props.relay.variables[`shouldShow_${escapeForRelay(this.props.facet.field)}`]) {
        this.props.relay.setVariables({
          [`shouldShow_${escapeForRelay(this.props.facet.field)}`]: false,
        });
      }
    },
  })
)(({ facet, title, aggregation = {}, handleRequestRemove, style, isRemovable, additionalProps }) => {
  const facetType = getFacetType(facet);
  const displayTitle = title || fieldNameToTitle(facet.field);
  const commonProps = {
    style,
    title: displayTitle,
  };

  const facetComponent = ({
    id: () => (
      <PrefixFacet
        field={facet.full}
        hits={{}}
        {...commonProps}
        fieldNoDoctype={facet.field}
        doctype={facet.doc_type}
        {...additionalProps}
      />
    ),
    datetime: () => (
      <DateFacet
        field={facet.full}
        {...commonProps}
        {...additionalProps}
      />
    ),
    range: () => (
      <RangeFacet
        field={facet.field}
        convertDays={false}
        max={aggregation.max}
        min={aggregation.min}
        {...commonProps}
        {...additionalProps}
      />
    ),
    terms: () => (
      <TermAggregation
        field={facet.full}
        {...commonProps}
        buckets={aggregation.buckets || []}
        {...additionalProps}
      />
    ),
  }[facetType])();

  return (
    <div {...css(styles.FacetWrapper)} style={style}>
      {
        isRemovable && <i
          className="fa fa-times"
          onClick={handleRequestRemove}
          onKeyPress={(event) => event.key === 'Enter' && handleRequestRemove()}
          role="button"
          tabIndex="0"
          {...css(styles.removeIcon)}
        />
      }
      {facetComponent}
    </div>
  );
});

export default FacetWrapper;
