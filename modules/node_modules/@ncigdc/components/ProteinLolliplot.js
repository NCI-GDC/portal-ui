// @flow

import React from 'react';
import moment from 'moment';
import { insertRule } from 'glamor';
import Lolliplot from '@oncojs/lolliplot';
import * as d3 from 'd3';
import { compose, lifecycle, withState } from 'recompose';
import { isEqual } from 'lodash';

import { Row, Column } from '@ncigdc/uikit/Flex';
import Dropdown from '@ncigdc/uikit/Dropdown';
import DropdownItem from '@ncigdc/uikit/DropdownItem';
import Button from '@ncigdc/uikit/Button';

import { visualizingButton } from '@ncigdc/theme/mixins';
import DoubleHelix from '@ncigdc/theme/icons/DoubleHelix';
import SpinnerParticle from '@ncigdc/uikit/Loaders/Particle';
import { buildProteinLolliplotData } from '@ncigdc/utils/data';
import { withTooltip } from '@ncigdc/uikit/Tooltip';
import DownloadVisualizationButton from '@ncigdc/components/DownloadVisualizationButton';
import withRouter from '@ncigdc/utils/withRouter';

const rootId = 'protein-viewer-root';

insertRule(`
  #${rootId} text { user-select: none; }
`);

const styles = {
  heading: {
    flexGrow: 1,
    fontSize: '2.2rem',
    marginBottom: 7,
    marginTop: 7,
    display: 'flex',
    alignItems: 'center',
  },
};

type TTranscript = {
  length_amino_acid: number,
  transcript_id: string,
};

type TProps = {
  setLolliplot: Function,
  setTooltip: Function,
  push: Function,
  lolliplot: {
    remove: Function,
    reset: Function,
  },
  data: {
    ssms: Array<{}>,
    transcript: TTranscript,
  },
  gene: {
    canonical_transcript_id: string,
    symbol: string,
  },
  transcripts: Array<TTranscript>,
  selectTranscript: Function,
  loading: boolean,
};

function renderProteinLolliplot({
  setLolliplot,
  setTooltip,
  push,
  lolliplot,
  data: { ssms, transcript },
}: TProps): void {
  const proteinLolliplotData = buildProteinLolliplotData({ transcript, data: ssms });
  if (lolliplot.remove) lolliplot.remove();
  if (!proteinLolliplotData.mutations.length) {
    setLolliplot({ notEnoughData: true });
    return;
  }
  setLolliplot(
    Lolliplot({
      d3,
      data: proteinLolliplotData,
      selector: `#${rootId}`,
      height: 450,
      domainWidth: transcript.length_amino_acid,
      onMutationClick: d => { push(`/ssms/${d.id}`); },
      onMutationMouseover: d => {
        setTooltip(
          <span>
            <div>AA Change: {d.aa_change}</div>
            <div>Mutation ID: {d.id}</div>
            <div># of Cases: {d.donors}</div>
            <div>Functional Impact: {d.impact}</div>
          </span>
        );
      },
      onMutationMouseout: () => setTooltip(),
      onProteinMouseover: d => {
        setTooltip(
          <span>
            <div>{d.id}</div>
            <div>{d.description}</div>
            <div><b>Click to zoom</b></div>
          </span>
        );
      },
      onProteinMouseout: () => setTooltip(),
    })
  );
}

const enhance = compose(
  withTooltip,
  withState('lolliplot', 'setLolliplot', {}),
  withRouter,
  lifecycle({
    componentWillReceiveProps(nextProps: TProps): void {
      if (!isEqual(nextProps.data, this.props.data)) { // eslint-disable-line fp/no-this
        renderProteinLolliplot(nextProps);
      }
    },
  })
);

const ProteinLolliplot = ({
  gene,
  data = {
    transcript: {
      length_amino_acid: 0,
      transcript_id: '',
    },
    ssms: [],
  },
  transcripts = [],
  lolliplot,
  selectTranscript,
  loading = true,
}: TProps) => (
  <Column>
    <Row>
      <h1 style={{ ...styles.heading, padding: '1rem' }} id="protein">
        <DoubleHelix width="12px" />
        <span style={{ marginLeft: '1rem' }}>Protein</span>
      </h1>
    </Row>
    <Row style={{ marginBottom: '2rem', padding: '0 2rem' }} spacing="1rem">
      <span style={{ alignSelf: 'center' }}>
        Transcript:
      </span>
      <Dropdown
        selected={
          <span
            style={{
              fontWeight: data.transcript.transcript_id === gene.canonical_transcript_id
                ? 'bold' : 'initial',
            }}
          >
            {data.transcript.transcript_id} ({data.transcript.length_amino_acid} aa)
          </span>
        }
      >
        {transcripts
        .filter(t => t.transcript_id === gene.canonical_transcript_id)
        .map(t =>
          <DropdownItem
            key={t.transcript_id}
            style={{
              fontWeight: 'bold',
              ...(data.transcript.transcript_id === t.transcript_id ? {
                backgroundColor: 'rgb(44, 136, 170)',
                color: 'white',
              } : {}),
            }}
            onClick={() => selectTranscript(t)}
          >
            {t.transcript_id} ({t.length_amino_acid} aa)
          </DropdownItem>
        )}
        {transcripts
        .filter(t => t.length_amino_acid && t.transcript_id !== gene.canonical_transcript_id)
        .map(t =>
          <DropdownItem
            key={t.transcript_id}
            style={{
              ...(data.transcript.transcript_id === t.transcript_id ? {
                backgroundColor: 'rgb(44, 136, 170)',
                color: 'white',
              } : {}),
            }}
            onClick={() => selectTranscript(t)}
          >
            {t.transcript_id} ({t.length_amino_acid} aa)
          </DropdownItem>
        )}
      </Dropdown>
      <Button
        style={visualizingButton}
        onClick={lolliplot.reset}
        leftIcon={<i className="fa fa-refresh" />}
      >
        Reset
      </Button>
      <DownloadVisualizationButton
        svg="#protein-viewer-root svg.chart"
        data={data}
        stylePrefix="#protein-viewer-root"
        slug={`protein_viewer-${gene.symbol}-${moment().format('YYYY-MM-DD')}`}
      />
    </Row>
    {loading &&
      <Column style={{ alignItems: 'center', padding: '20px' }}><SpinnerParticle /></Column>
    }
    {
      !loading && lolliplot.notEnoughData && (
        <Column style={{ alignItems: 'center', padding: '20px' }}>Not enough data</Column>
      )
    }
    <div style={{ padding: '0 3rem' }} id={rootId} />
  </Column>
);

export default enhance(ProteinLolliplot);
