// @flow

import React from 'react';
import Relay from 'react-relay';
import withSize from '@ncigdc/utils/withSize';
import { startCase, truncate, isEqual, get } from 'lodash';
import { compose, withState, withPropsOnChange } from 'recompose';
import { scaleOrdinal, schemeCategory10 } from 'd3';
import { parseIntParam, parseFilterParam } from '@ncigdc/utils/uri';
import Showing from '@ncigdc/components/Pagination/Showing';
import { withTheme } from '@ncigdc/theme';
import { tableToolTipHint } from '@ncigdc/theme/mixins';
import Loader from '@ncigdc/uikit/Loaders/Loader';
import GeneLink from '@ncigdc/components/Links/GeneLink';
import withRouter from '@ncigdc/utils/withRouter';
import MutationLink from '@ncigdc/components/Links/MutationLink';
import { makeFilter, addInFilters } from '@ncigdc/utils/filters';
import EntityPageHorizontalTable from '@ncigdc/components/EntityPageHorizontalTable';
import SurvivalIcon from '@ncigdc/theme/icons/SurvivalIcon';
import { Row } from '@ncigdc/uikit/Flex';
import Button from '@ncigdc/uikit/Button';
import { Tooltip } from '@ncigdc/uikit/Tooltip';
import Pagination from '@ncigdc/components/Pagination';
import { getSurvivalCurves } from '@ncigdc/utils/survivalplot';
import Hidden from '@ncigdc/components/Hidden';
import BubbleIcon from '@ncigdc/theme/icons/BubbleIcon';
import { SpinnerIcon } from '@ncigdc/theme/icons';
import type { TGroupFilter } from '@ncigdc/utils/filters/types';
import ProjectBreakdown from '@ncigdc/containers/ProjectBreakdown';
import type { TTheme } from '@ncigdc/theme';

type TProps = {
  projectId: string,
  showSurvivalPlot: boolean,
  selectedSurvivalData: {
    id: string,
  },
  setSelectedSurvivalData: Function,
  cohort: {
    ssms: {
      hits: {
        total: number,
        edges: Array<{
          node: {},
        }>,
      },
    },
    cases: {
      hits: {
        total: number,
      },
      aggregations: {
        project__project_id: {
          buckets: Array<{
            doc_count: number,
            key: string,
          }>,
        },
      },
    },
  },
  shouldShowGeneSymbol: boolean,
  relay: {
    route: {
      params: {},
    },
  },
  setSurvivalLoadingId: Function,
  survivalLoadingId: string,
  theme: TTheme,
  query: {
    fmTable_offset: string,
    fmTable_size: string,
    fmTable_filters: string,
  },
  defaultFilters: TGroupFilter,
};
const colors = scaleOrdinal(schemeCategory10);

const mutationSubTypeMap = {
  'single base substitution': 'Substitution',
  'small deletion': 'Deletion',
  'small insertion': 'Insertion',
};

const mapData = (data: Array<Object>, projectId: string, shouldShowGeneSymbol: boolean, theme): Array<Object> => (
  data.map((hit) => {
    const consequenceOfInterest = hit.consequence.hits.edges
      .find(consequence => get(consequence, 'node.transcript.annotation.impact'), {}) || {};
    const { transcript } = consequenceOfInterest.node || {};
    const { annotation = {}, consequence_type: consequenceType = '', gene = {}, aa_change } = transcript || {};
    const { symbol, gene_id: geneId } = gene;
    const impact = annotation.impact;

    return {
      ...hit,
      mutation_subtype: mutationSubTypeMap[(hit.mutation_subtype || '').toLowerCase()] || hit.mutation_subtype,
      consequence_type: (
        <span>
          <b>{startCase(consequenceType.replace('variant', ''))}</b>
          {shouldShowGeneSymbol &&
            <span style={{ marginLeft: '5px' }}>
              <GeneLink id={geneId}>{symbol}</GeneLink>
            </span>
          }
          <span
            style={{
              marginLeft: '5px',
              color: theme.impacts[impact] || 'inherit',
            }}
          >
            {truncate(aa_change)}
          </span>
        </span>
      ),
    };
  })
);

const FrequentMutationsTableComponent = compose(
  withRouter,
  withState('survivalLoadingId', 'setSurvivalLoadingId', ''),
  withPropsOnChange(
    (props, nextProps) => ['query', 'projectId', 'defaultFilters']
      .some((propName) => !isEqual(props[propName], nextProps[propName])),
    ({ relay, query, defaultFilters }) => {
      relay.setVariables({
        fetchData: true,
        fmTable_offset: parseIntParam(query.fmTable_offset, 0),
        fmTable_size: parseIntParam(query.fmTable_size, 10),
        fmTable_filters: parseFilterParam(query.fmTable_filters, defaultFilters || null),
        ssmCaseFilter: addInFilters(
          query.fmTable_filters,
          makeFilter([
            {
              field: 'available_variation_data',
              value: 'ssm',
            },
          ], false)
        ),
      });
    }
  ),
  withTheme,
  withSize()
)(({
  projectId = '',
  showSurvivalPlot = false,
  survivalPlotSampleSize,
  selectedSurvivalData = { id: '' },
  setSelectedSurvivalData = () => {},
  cohort: { ssms, filteredCases },
  shouldShowGeneSymbol = true,
  relay,
  setSurvivalLoadingId,
  survivalLoadingId,
  theme,
  projectBreakdown,
  context = 'cohort',
}: TProps = {}) => {
  if (ssms && !ssms.hits.edges.length) {
    return <Row style={{ padding: '1rem' }}>No mutation data found.</Row>;
  }

  const frequentMutations = !ssms ? [] :
    mapData(ssms.hits.edges.map(x => x.node), projectId, shouldShowGeneSymbol, theme);

  return (
    <Loader
      loading={!ssms}
      height="387px"
    >
      <Row style={{ backgroundColor: 'white', padding: '1rem', justifyContent: 'space-between' }}>
        <Showing
          docType="mutations"
          prefix={'fmTable'}
          params={relay.variables}
          total={!ssms ? 0 : ssms.hits.total}
        />
      </Row>
      <EntityPageHorizontalTable
        headings={[
          {
            key: 'mutation_uuid',
            title: 'ID',
          },
          {
            key: 'genomic_dna_change',
            title: (
              <Tooltip
                Component={
                  <span>
                    Genomic DNA change, shown as <br />
                    {'{chromosome}:g{start}{ref}>{tumor}'}
                  </span>
                }
                style={tableToolTipHint()}
              >
                DNA Change
              </Tooltip>
            ),
            className: 'id-cell',
            style: { whiteSpace: 'pre-line' },
          },
          { key: 'mutation_subtype', title: 'Type' },
          { key: 'consequence_type', title: 'Consequences' },
          ...(projectId ? [{
            key: 'filteredOccurrences',
            title: (
              <Tooltip
                Component={
                  <span>
                    Breakdown of affected cases in {projectId} <br />
                    # of cases affected / # SSM tested cases
                  </span>
                }
                style={tableToolTipHint()}
              >
                # Affected Cases<br />in {projectId}
              </Tooltip>
            ),
          }] : []),
          ...(context === 'cohort' ?
          [{
            key: 'num_affected_cases_cohort',
            title: (
              <Tooltip
                Component={
                  <span>
                    Breakdown of affected cases in cohort <br />
                    # of cases affected / # SSM tested cases
                  </span>
                }
                style={tableToolTipHint()}
              >
                # Affected Cases<br />in cohort
              </Tooltip>),
          }] : []),
          {
            key: 'projectBreakdown',
            title: (
              <Tooltip
                Component={
                  <span>
                    # of cases where mutation is observed, filtered by current criteria <br />
                    / # SSM tested cases portal wide.<br />
                    Expand to see breakdown by project.
                  </span>
                }
                style={tableToolTipHint()}
              >
                # Affected Cases<br /> Across {context === 'cohort' ? 'GDC' : 'all Projects'}
              </Tooltip>
            ),
          },
          {
            key: 'impact',
            title: <span>Impact<br />(VEP)</span>,
            style: { textAlign: 'center' },
          },
          ...(showSurvivalPlot ? [{
            title: <span>Survival<br />Analysis</span>,
            key: 'survival_plot',
            style: { textAlign: 'center', width: '100px' },
          }] : []),
        ]}
        data={frequentMutations.map(({ score = 0, ...x }) => ({
          ...x,
          mutation_uuid: (
            <MutationLink id={x.ssm_id}>
              <Tooltip
                Component={
                  <span>
                    {x.ssm_id}
                  </span>
                }
              >
                {x.ssm_id.substr(0, 8)}...
              </Tooltip>
            </MutationLink>
          ),
          genomic_dna_change: <span>{x.genomic_dna_change}</span>,
          filteredOccurrences:
            `${score.toLocaleString()} / ${(filteredCases.hits.total || 0).toLocaleString()}
            (${((score / filteredCases.hits.total) * 100).toFixed(2)}%)`,
          num_affected_cases_cohort:
            `${score.toLocaleString()} / ${(filteredCases.hits.total || 0).toLocaleString()}
            (${((score / filteredCases.hits.total) * 100).toFixed(2)}%)`,
          projectBreakdown: (
            <ProjectBreakdown
              filters={makeFilter([{ field: 'ssms.ssm_id', value: x.ssm_id }], false)}
              cohort={projectBreakdown}
              caseTotal={x.occurrence.hits.total}
            />
          ),
          impact: !['LOW', 'MODERATE', 'HIGH', 'MODIFIER'].includes(x.impact) ? null : (
            <BubbleIcon
              toolTipText={x.impact}
              text={x.impact.slice(0, (x.impact === 'MODIFIER' ? 2 : 1))}
              backgroundColor={theme.impacts[x.impact]}
            />
          ),
          ...(showSurvivalPlot ? {
            survival_plot: (
              <Tooltip Component={`Click icon to plot ${x.genomic_dna_change}`}>
                <Button
                  style={{
                    padding: '2px 3px',
                    backgroundColor: colors(selectedSurvivalData.id === x.ssm_id ? 1 : 0),
                    color: 'white',
                    margin: '0 auto',
                  }}
                  onClick={() => {
                    if (x.ssm_id !== selectedSurvivalData.id) {
                      setSurvivalLoadingId(x.ssm_id);
                      getSurvivalCurves({
                        field: 'gene.ssm.ssm_id',
                        value: x.ssm_id,
                        slug: x.ssm_id.substr(0, 8),
                        currentFilters: projectId
                          ? {
                            op: 'and',
                            content: [{ op: '=', content: { field: 'cases.project.project_id', value: projectId } }],
                          }
                          : null,
                        size: survivalPlotSampleSize,
                      })
                        .then((data) => {
                          setSelectedSurvivalData(data);
                          setSurvivalLoadingId('');
                        });
                    } else {
                      setSelectedSurvivalData({});
                    }
                  }}
                >
                  {survivalLoadingId === x.ssm_id ? <SpinnerIcon /> : <SurvivalIcon />}
                  <Hidden>add to survival plot</Hidden>
                </Button>
              </Tooltip>
            ),
          } : {}),
        }))
        .sort((a, b) => b.score - a.score)
        }
      />
      <Pagination
        prefix={'fmTable'}
        params={relay.variables}
        total={!ssms ? 0 : ssms.hits.total}
      />
    </Loader>
  );
});

export const FrequentMutationsTableQuery = {
  initialVariables: {
    fetchData: false,
    score: 'occurrence.case.project.project_id',
    fmTable_filters: null,
    fmTable_size: 10,
    fmTable_offset: 0,
    consequenceFilters: {
      op: 'NOT',
      content: {
        field: 'consequence.transcript.annotation.impact',
        value: 'missing',
      },
    },
    ssmCaseFilter: null,
  },
  fragments: {
    cohort: () => Relay.QL`
      fragment on Cohort {
        x: cases { hits(first: 0) { total }}
        filteredCases: cases @include(if: $fetchData) {
          hits(first: 0 filters: $ssmCaseFilter) {
            total
          }
        }
        ssms @include (if: $fetchData) {
          hits(first: $fmTable_size offset: $fmTable_offset filters: $fmTable_filters, score: $score) {
            total
            edges {
              node {
                score
                genomic_dna_change
                mutation_subtype
                ssm_id
                consequence {
                  hits(first: 1 filters: $consequenceFilters) {
                    edges {
                      node {
                        transcript {
                          is_canonical
                          annotation {
                            impact
                          }
                          consequence_type
                          gene {
                            gene_id
                            symbol
                          }
                          aa_change
                        }
                      }
                    }
                  }
                }
                occurrence {
                  hits(first: 0 filters: $ssmCaseFilter) {
                    total
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const FrequentMutationsTable = Relay.createContainer(
  FrequentMutationsTableComponent,
  FrequentMutationsTableQuery
);

export default FrequentMutationsTable;
