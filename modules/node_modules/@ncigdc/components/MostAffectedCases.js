// @flow

import React from 'react';

import ageDisplay from '@ncigdc/utils/ageDisplay';
import { makeFilter } from '@ncigdc/utils/filters';
import { DATA_CATEGORIES } from '@ncigdc/utils/constants';

import { Row, Column } from '@ncigdc/uikit/Flex';
import { Tooltip } from '@ncigdc/uikit/Tooltip';

import BarChart from '@ncigdc/components/Charts/BarChart';
import EntityPageHorizontalTable from '@ncigdc/components/EntityPageHorizontalTable';

import { withTheme } from '@ncigdc/theme';

const MostAffectedCases = ({
  mostAffectedCases,
  theme,
}) => (
  <Column>
    {!!mostAffectedCases.length &&
      <div>
        <Row style={{ padding: '0 2rem', justifyContent: 'center' }}>
          <BarChart
            data={mostAffectedCases.map(c => ({
              label: `${c.case_id.substring(0, 14)}\u2026`,
              value: c.gene.length,
              tooltip: <span>{c.case_id}<br />{c.gene.length} Genes Affected</span>,
              href: `cases/${c.case_id}`,
            }))}
            margin={{ top: 30, right: 50, bottom: 105, left: 40 }}
            height={250}
            bandwidth={50}
            yAxis={{ title: '# Genes Affected' }}
            styles={{
              xAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
              yAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
              bars: { fill: theme.secondary },
              tooltips: {
                fill: '#fff',
                stroke: theme.greyScale4,
                textFill: theme.greyScale3,
              },
            }}
          />
        </Row>

        <EntityPageHorizontalTable
          headings={[
            { key: 'id', title: 'UUID' },
            { key: 'primary_site', title: 'Site' },
            { key: 'gender', title: 'Gender' },
            { key: 'age_at_diagnosis', title: 'Age at Diagnosis' },
            { key: 'tumor_stage', title: 'Stage' },
            { key: 'days_to_death',
              title: <Tooltip innerHTML='Survival (days)'>Survival</Tooltip>,
            },
            { key: 'days_to_last_follow_up',
              title: <Tooltip innerHTML='Days to Last Follow Up'>Last Follow<br />Up</Tooltip>,
              style: { textAlign: 'right' },
            },
            { key: 'data_types',
              title: 'Available Files per Data Category',
              style: { textAlign: 'right' },
              subheadings: Object.keys(DATA_CATEGORIES).map(k =>
                <abbr key={DATA_CATEGORIES[k].abbr}>
                  <Tooltip innerHTML={DATA_CATEGORIES[k].full}>
                    {DATA_CATEGORIES[k].abbr}
                  </Tooltip>
                </abbr>
        ),
            },
            {
              key: 'num_mutations',
              title: '#Mutations',
              style: { textAlign: 'right' },
            },
            {
              key: 'num_genes',
              title: '#Genes',
              style: { textAlign: 'right' },
            },
          ]}
          data={mostAffectedCases.map(c => {
            const dataCategorySummary = c.summary.data_categories.reduce((acc, d) => ({
              ...acc, [d.data_category]: d.file_count,
            }), {});

            return {
              id: <a href={`/cases/${c.case_id}`}>{c.case_id}</a>,
              primary_site: c.project.primary_site,
              gender: c.demographic.gender,
              age_at_diagnosis: ageDisplay(c.diagnoses[0].age_at_diagnosis),
              tumor_stage: c.diagnoses[0].tumor_stage,
              days_to_last_follow_up: c.diagnoses[0].days_to_last_follow_up,
              num_mutations: c.gene.reduce((sum, g) => sum + g.ssm.length, 0),
              num_genes: c.gene.length,
              data_types: Object.keys(DATA_CATEGORIES).map(k => (
          dataCategorySummary[DATA_CATEGORIES[k].full] ? (
            <a
              href={
                `/search/f?filters=${makeFilter([
                  { field: 'cases.case_id', value: c.case_id },
                  { field: 'files.data_category', value: DATA_CATEGORIES[k].full },
                ])}`
              }
            >
              {dataCategorySummary[DATA_CATEGORIES[k].full]}
            </a>
            ) : '--'
          )
        ) };
          })}
        />
      </div>
}
    {!mostAffectedCases.length &&
    <span style={{ padding: '2rem' }}>No most affected case data to display</span>
}
  </Column>
);

export default withTheme(MostAffectedCases);
