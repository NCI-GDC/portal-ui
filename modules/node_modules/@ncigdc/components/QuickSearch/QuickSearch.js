// @flow

import React from 'react';
import _ from 'lodash';
import { compose } from 'recompose';
import styled from '@ncigdc/theme/styled';
import QuickSearchResults from './QuickSearchResults';
import { withSearch } from '@ncigdc/utils/withSearch';
import namespace from '@ncigdc/utils/namespace';
import type { TSearchHit } from './types';

const styles = {
  searchIconWrapper: {
    marginRight: '4px',
    position: 'relative',
  },
  searchIcon: {
    // add a bit of transition delay to avoid jank with really fast queries
    transition: 'opacity 0.2s ease 0.1s',
  },
  loadingIcon: {
    position: 'absolute',
    left: 0,
    top: 0,
    transition: 'opacity 0.2s ease 0.1s',
  },
  invisible: {
    opacity: 0,
  },
  visible: {
    opacity: 1,
  },
  container: {
    position: 'relative',
  },
};

const SearchInput = styled.input({
  fontSize: '14px',
  height: '3rem',
  padding: '0.7rem 1rem',
  border: ({ theme }) => `1px solid ${theme.greyScale5}`,
  width: '17rem',
  borderRadius: '4px',
  outline: 'none',
  transition: 'all 0.2s ease',
  marginTop: -10,
  marginBottom: -10,
  ':focus': {
    borderColor: 'rgb(18, 141, 219) !important',
    boxShadow: '0px 0px 22px 0px rgba(18, 147, 219, 0.75)',
  },
});

const TYPE_PATHS_MAP = {
  annotation: '/annotations',
  case: '/cases',
  file: '/files',
  gene_centric: '/genes',
  occurrence: '/occurrence',
  project: '/projects',
  report: '/report',
  ssm_centric: '/ssms',
};

export default
compose(
  namespace('search', withSearch())
)(({
  search: {
    state,
    setState,
    setQuery,
    handleKeyDown,
    highlightItem,
    selectItem,
    reset,
  },
  tabIndex,
  style,
}) => (
  <a
    tabIndex={tabIndex}
    onClick={() => !state.isInSearchMode && setState({ isInSearchMode: true })}
    onBlur={(event) => {
      const currentTarget = event.currentTarget;
      const relatedTarget = event.relatedTarget;
      // defer 1 frame to get correct value of document.activeElement, which is required for x-browser compat
      setImmediate(() => {
        const triggerElement = relatedTarget || document.activeElement;
        if (!(currentTarget.contains(triggerElement) || currentTarget === triggerElement)) {
          setTimeout(reset, 500);
        }
      });
    }}
    style={{
      ...style,
      ...styles.container,
    }}
  >
    <span style={styles.searchIconWrapper}>
      <i className="fa fa-search stock-icon" style={Object.assign({}, styles.searchIcon, state.isLoading ? styles.invisible : styles.visible)} />
      <i className="fa fa-spin fa-spinner stock-icon" style={Object.assign({}, styles.loadingIcon, state.isLoading ? styles.visible : styles.invisible)} />
    </span>
    { !state.isInSearchMode && <span className="hidden-md hidden-sm" data-translate>Quick Search</span> }

    {
      state.isInSearchMode &&
      <SearchInput
        autoFocus
        placeholder="Quick Search"
        type="text"
        onChange={event => setQuery(event.target.value)}
        onKeyDown={handleKeyDown}
      />
    }
    {
      state.results && (
        <QuickSearchResults
          results={_.map(state.results, item =>
            (item === state.highlightedResult ? { ...item, isSelected: true } : item)
          )}
          query={state.query}
          onSelectItem={highlightItem}
          onActivateItem={selectItem}
          isLoading={state.isLoading}
        />
      )
    }
  </a>
));
