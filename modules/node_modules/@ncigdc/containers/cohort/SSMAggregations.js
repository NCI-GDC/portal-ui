/* @flow */
/* eslint jsx-a11y/no-static-element-interactions: 0, max-len: 1 */

import React from 'react';
import Relay from 'react-relay';
import _ from 'lodash';
import { compose, withState } from 'recompose';

import SuggestionFacet from '@ncigdc/components/Aggregations/SuggestionFacet';
import FacetWrapper from '@ncigdc/components/FacetWrapper';
import FacetHeader from '@ncigdc/components/Aggregations/FacetHeader';

import type { TBucket } from '@ncigdc/components/Aggregations/types';

import { withTheme } from '@ncigdc/theme';
import { Column } from '@ncigdc/uikit/Flex';
import escapeForRelay from '@ncigdc/utils/escapeForRelay';

const presetFacets = [
  { title: 'SSM ID', field: 'ssm_id', full: 'ssms.ssm_id', doc_type: 'ssms', type: 'id' },
  { title: 'Impact', field: 'consequence.transcript.annotation.impact', full: 'ssms.consequence.transcript.annotation.impact', doc_type: 'ssms', type: 'terms' },
  { title: 'Consequence Type', field: 'consequence.transcript.consequence_type', full: 'ssms.consequence.transcript.consequence_type', doc_type: 'ssms', type: 'terms' },
  { title: 'Mutation Type', field: 'mutation_type', full: 'ssms.mutation_type', doc_type: 'ssms', type: 'terms' },
  { title: 'Data Categories', field: 'occurrence.case.summary.data_categories.data_category', full: 'ssms.occurrence.case.summary.data_categories.data_category', doc_type: 'ssms', type: 'terms' },
];

export type TProps = {
  aggregations: {
    consequence__transcript__annotation__impact: { buckets: [TBucket] },
    consequence__transcript__consequence_type: { buckets: [TBucket] },
    mutation_type: { buckets: [TBucket] },
    occurrence__case__summary__data_categories__data_category: { buckets: [TBucket] },
  },
  hits: {
    edges: Array<{|
      node: {|
       id: string,
     |},
   |}>,
 },
  setAutocomplete: Function,
  theme: Object,
  suggestions: Array,
};

export const SSMAggregationsComponent = compose(
  withState('idCollapsed', 'setIdCollapsed', false)
)((props: TProps) => (
  <div>
    <FacetHeader
      title="Mutation"
      field="ssms.ssm_id"
      collapsed={props.idCollapsed}
      setCollapsed={props.setIdCollapsed}
    />
    <SuggestionFacet
      title="Mutation"
      doctype="ssms"
      collapsed={props.idCollapsed}
      fieldNoDoctype="ssm_id"
      placeholder="Search for mutation id"
      hits={props.suggestions}
      // eslint-disable-next-line react/jsx-curly-spacing
      setAutocomplete={() => { /* autcomplete turned off for now */ }}
      dropdownItem={(x) => (
        <span style={{ display: 'flex' }}>
          <Column>
            <span style={{ fontWeight: 'bold' }}>
              {x.node.ssm_id}
            </span>
          </Column>
        </span>
      )}
      style={{ borderBottom: `1px solid ${props.theme.greyScale5}` }}
    />
    {
      _.reject(presetFacets, { full: 'ssms.ssm_id' }).map((facet) => (
        <FacetWrapper
          key={facet.full}
          facet={facet}
          title={facet.title}
          aggregation={props.aggregations[escapeForRelay(facet.field)]}
          relay={props.relay}
          additionalProps={facet.additionalProps}
          style={{ borderBottom: `1px solid ${props.theme.greyScale5}` }}
        />
      ))
    }
  </div>
));

export const SSMAggregationsQuery = {
  fragments: {
    aggregations: () => Relay.QL`
      fragment on SsmAggregations {
        consequence__transcript__annotation__impact {
          buckets {
            doc_count
            key
          }
        }
        consequence__transcript__consequence_type {
          buckets {
            doc_count
            key
          }
        }
        mutation_type {
          buckets {
            doc_count
            key
          }
        }
        occurrence__case__summary__data_categories__data_category {
          buckets {
            doc_count
            key
          }
        }
      }
    `,
  },
};


const SSMAggregations = Relay.createContainer(
  withTheme(SSMAggregationsComponent),
  SSMAggregationsQuery
);

export default SSMAggregations;
