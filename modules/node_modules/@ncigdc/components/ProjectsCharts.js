/* @flow */
// Vendor
import React from 'react';
import Measure from 'react-measure';
import Relay from 'react-relay';
import { connect } from 'react-redux';
import * as d3 from 'd3';
import { compose, withState, withProps, lifecycle } from 'recompose';
import JSURL from 'jsurl';

// Custom
import Column from '@ncigdc/uikit/Flex/Column';
import Row from '@ncigdc/uikit/Flex/Row';
import SpinnerParticle from '@ncigdc/uikit/Loaders/Particle';

import withRouter from '@ncigdc/utils/withRouter';
import { fetchApi } from '@ncigdc/utils/ajax';
import { setFilter, mergeQuery } from '@ncigdc/utils/filters';
import { removeEmptyKeys } from '@ncigdc/utils/uri';

import DoubleRingChart from '@ncigdc/components/Charts/DoubleRingChart';
import StackedBarChart from '@ncigdc/components/Charts/StackedBarChart';

import styled from '@ncigdc/theme/styled';
import { withTheme } from '@ncigdc/theme';

const Container = styled(Row, {
  marginBottom: '2rem',
  backgroundColor: 'white',
  border: '1px solid #ddd',
  borderRadius: '4px',
  height: '300px',
});

const initialState = {
  topGenesWithCasesPerProject: {},
  numUniqueCases: 0,
  projectsIsFetching: true,
  genesIsFetching: true,
};

const ProjectsChartsComponent = compose(
  withState('state', 'setState', initialState),
  withRouter,
  connect(state => ({ relayProgress: state.relayProgress })),
  withProps({
    async fetchData(props): Promise<*> {
      const projectIds = props.hits.edges.map(x => x.node.project_id);

      const { data } = await fetchApi(
        `analysis/top_mutated_genes_by_project?fields=gene_id,symbol&filters=${
          JSON.stringify(
            {
              op: 'AND',
              content: [
                projectIds.length && {
                  op: 'in',
                  content: {
                    field: 'case.project.project_id',
                    value: projectIds,
                  },
                },
                {
                  op: 'in',
                  content: {
                    field: 'case.ssm.consequence.transcript.annotation.impact',
                    value: ['HIGH', 'MODERATE'],
                  },
                },
              ].filter(Boolean),
            }
          )
        }`
      );

      const topGenesSource = data.hits || [];

      const { aggregations } = await fetchApi('analysis/top_cases_counts_by_genes', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: {
          size: 0,
          gene_ids: topGenesSource.map(g => g.gene_id).join(),
          filters: JSON.stringify({
            op: 'in',
            content: { field: 'gene.ssm.consequence.transcript.annotation.impact', value: ['HIGH', 'MODERATE'] },
          }),
        },
      });

      const caseAggs = aggregations.projects.buckets.filter(b => projectIds.includes(b.key));

      const caseAggsByProject = caseAggs.reduce((acc, b) => ({
        ...acc,
        [b.key]: { genes: b.genes.my_genes.gene_id.buckets, case_with_ssm: b.case_summary.case_with_ssm.doc_count },
      }), {});

      const numUniqueCases = caseAggs.reduce((sum, b) => sum + b.case_summary.case_with_ssm.doc_count, 0);

      const topGenesWithCasesPerProject = Object.keys(caseAggsByProject).reduce((acc, projectId) => {
        const agg = caseAggsByProject[projectId];
        const docCounts = agg.genes.reduce((acc, a) => Object.assign(acc, { [a.key]: a.doc_count }), {});

        Object.keys(docCounts).forEach((geneId) => {
          acc[geneId] = acc[geneId]
            ? Object.assign(acc[geneId], { [projectId]: docCounts[geneId] })
            : {
              [projectId]: docCounts[geneId],
              symbol: topGenesSource.reduce((symbol, g) => (g.gene_id === geneId ? g.symbol : symbol), ''),
            };
        });

        return acc;
      }, {});

      props.setState(state => ({
        ...state,
        numUniqueCases,
        topGenesWithCasesPerProject,
        projectsIsFetching: false,
        genesIsFetching: false,
      }));
    },
  }),
  lifecycle({
    componentDidMount(): void {
      this.props.fetchData(this.props);
    },
    componentWillReceiveProps(nextProps: Object): void {
      if (this.props.relayProgress.event !== nextProps.relayProgress.event &&
        ['NETWORK_QUERY_RECEIVED_ALL', 'STORE_FOUND_ALL'].includes(nextProps.relayProgress.event)
      ) {
        this.props.setState(s => ({ ...s,
          projectsIsFetching: true,
          genesIsFetching: true,
        }));

        this.props.fetchData(nextProps);
      }
    },
  }),
  withTheme
)(({
  state: {
    numUniqueCases,
    topGenesWithCasesPerProject,
    projectsIsFetching,
    genesIsFetching,
  },
  hits,
  theme,
  query,
  pathname,
  push,
}: {
    state: {
      numUniqueCases: number,
      topGenesWithCasesPerProject: { [gene_id: string]: { [project_id: string]: number, symbol: string}},
      projectsIsFetching: boolean,
      genesIsFetching: boolean,
    },
    hits: { edges: Array<Object> },
    theme: Object,
    query: Object,
    pathname: string,
    push: Function,
  }) => {
  const projects = hits.edges.map(x => x.node);

  const stackedBarData = Object.keys(topGenesWithCasesPerProject).map(geneId => ({
    symbol: topGenesWithCasesPerProject[geneId].symbol,
    gene_id: geneId,
    onClick: () => push(`/genes/${geneId}`),
    ...topGenesWithCasesPerProject[geneId],
    total: Object.keys(topGenesWithCasesPerProject[geneId])
      .filter(k => k !== 'symbol')
      .reduce((sum, projectId) => sum + topGenesWithCasesPerProject[geneId][projectId], 0),
  })).sort((a, b) => b.total - a.total);

  const doubleRingData = projects.reduce((acc, p) => {
    const primarySiteCasesCount = acc[p.primary_site]
      ? acc[p.primary_site].value + p.summary.case_count
      : p.summary.case_count;

    return {
      ...acc,
      [p.primary_site]: {
        value: primarySiteCasesCount,
        tooltip: (
          <span>
            <b>{p.primary_site}</b><br />
            {primarySiteCasesCount} case{primarySiteCasesCount > 1 ? 's' : ''}
          </span>
        ),
        clickHandler: () => {
          const newQuery = mergeQuery(
            { filters: setFilter({ field: 'projects.primary_site', value: [].concat(p.primary_site || []) }) },
            query,
            'toggle'
          );

          const q = removeEmptyKeys({ ...newQuery, filters: newQuery.filters && JSURL.stringify(newQuery.filters) });

          push({ pathname, query: q });
        },
        outer: [
          ...(acc[p.primary_site] || { outer: [] }).outer,
          {
            key: p.project_id,
            value: p.summary.case_count,
            tooltip: (
              <span>
                <b>{p.name}</b><br />
                {p.summary.case_count} case{p.summary.case_count > 1 ? 's' : 0}
              </span>
            ),
            clickHandler: () => {
              const newQuery = mergeQuery(
                { filters: setFilter({ field: 'projects.project_id', value: [].concat(p.project_id || []) }) },
                query,
                'toggle'
              );

              const q = removeEmptyKeys({
                ...newQuery, filters: newQuery.filters && JSURL.stringify(newQuery.filters),
              });

              push({ pathname, query: q });
            },
          },
        ],
      },
    };
  }, {});

  const totalCases = projects.reduce((sum, p) => sum + p.summary.case_count, 0);

  const color = d3.scaleOrdinal([
    ...d3.schemeCategory20,
    '#CE6DBD',
    '#AD494A',
    '#8C6D31',
    '#B5CF6B',
  ]);
   // there are 24 primary sites
  const projectsInTopGenes = Object.keys(topGenesWithCasesPerProject)
    .reduce((acc, g) => [...acc, ...Object.keys(topGenesWithCasesPerProject[g])], []);

  const primarySiteProjects = projects.sort((a, b) => {
      // sort the projects with top mutated genes to the top so they're colored darker
    if (projectsInTopGenes.indexOf(a.project_id) !== -1 && projectsInTopGenes.indexOf(b.project_id) === -1) {
      return -1;
    }
    if (projectsInTopGenes.indexOf(a.project_id) === -1 && projectsInTopGenes.indexOf(b.project_id) !== -1) {
      return 1;
    }
    return 0;
  }).reduce((acc, p, i) => ({
    ...acc,
    [p.primary_site]: {
      color: acc[p.primary_site] ? acc[p.primary_site].color : color(i),
      projects: [...(acc[p.primary_site] || { projects: [] }).projects, p.project_id],
    },
  }), {});
    // brighten project colors by a multiplier that's based on projects number, so the slices don't get too light
    // and if there's only two slices the colors are different enough
  const primarySiteToColor = Object.keys(primarySiteProjects).reduce((acc, primarySite) => ({
    ...acc,
    [primarySite]: {
      ...primarySiteProjects[primarySite],
      projects: primarySiteProjects[primarySite].projects.reduce((acc, project_id, i) => ({
        ...acc,
        [project_id]: d3.color(primarySiteProjects[primarySite].color)
          .brighter(0.5 * ((1 / primarySiteProjects[primarySite].projects.length) * i)),
      }), {}),
    },
  }), {});

  return (
    <Container>
      <Column flex={3} style={{ paddingRight: '10px', minWidth: '450px' }}>
        <div style={{ alignSelf: 'center', color: '#6b6262', padding: '1.5rem 0 0.5rem', fontWeight: 'bold' }}>
          Top Mutated Genes in Selected Projects
        </div>
        {!genesIsFetching ? [
          <div style={{ alignSelf: 'center', color: '#6b6262', fontSize: '1.2rem' }} key='bar-subtitle'>
            {`${numUniqueCases} Unique Case${numUniqueCases === 0 || numUniqueCases > 1 ? 's' : ''} with Mutation Data`}
          </div>,
          <span style={{ transform: 'scale(0.9)' }} key="bar-wrapper">
            <Measure key='bar-chart'>
              {({ width }) =>
                <StackedBarChart
                  width={width + 100}
                  height={170}
                  data={stackedBarData}
                  projectsIdtoName={projects.reduce((acc, p) => ({ ...acc, [p.project_id]: p.name }), {})}
                  colors={Object.keys(primarySiteToColor)
                    .reduce((acc, pSite) => ({ ...acc, ...primarySiteToColor[pSite].projects }), {})
                  }
                  yAxis={{ title: 'Cases Affected' }}
                  styles={{
                    xAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                    yAxis: { stroke: theme.greyScale4, textFill: theme.greyScale3 },
                  }}
                />
              }
            </Measure>
          </span>,
        ] :
        <Row style={{ justifyContent: 'center', paddingTop: '2em', paddingBottom: '2em' }}>
          <SpinnerParticle />
        </Row>
        }
      </Column>
      <Column flex={2} style={{ minWidth: '200px' }}>
        <div style={{ alignSelf: 'center', color: '#6b6262', padding: '1.5rem 0 0.5rem', fontWeight: 'bold' }}>
          Case Distribution per Project
        </div>
        {!projectsIsFetching ? [
          <div style={{ alignSelf: 'center', fontSize: '1.2rem', marginBottom: '2rem' }} key='pie-subtitle'>
            {`${totalCases} Case${totalCases === 0 || totalCases > 1 ? 's' : ''}
              across ${projects.length} Project${projects.length === 0 || projects.length > 1 ? 's' : ''}`
            }
          </div>,
          <span style={{ transform: 'scale(0.75)' }} key="circle-wrapper">
            <DoubleRingChart
              key='pie-chart'
              colors={primarySiteToColor}
              data={
                Object.keys(doubleRingData)
                  .map(primary_site => ({
                    key: primary_site,
                    ...doubleRingData[primary_site],
                  })
                )}
              height={200}
              width={200}
            />
          </span>,
        ] :
        <Row style={{ justifyContent: 'center', paddingTop: '2em', paddingBottom: '2em' }}>
          <SpinnerParticle />
        </Row>
        }
      </Column>
    </Container>
  );
});

export const ProjectsChartsQuery = {
  fragments: {
    hits: () => Relay.QL`
      fragment on ProjectConnection {
        total
        edges @relay(plural: true) {
          node {
            id
            project_id
            name
            disease_type
            program {
              name
            }
            primary_site
            summary {
              case_count
              data_categories {
                case_count
                data_category
              }
              file_count
            }
          }
        }
      }
    `,
  },
};

const ProjectsCharts = Relay.createContainer(
  ProjectsChartsComponent,
  ProjectsChartsQuery
);

export default ProjectsCharts;
