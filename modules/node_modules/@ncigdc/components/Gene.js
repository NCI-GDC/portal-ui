// @flow
/* global $ */

import React from 'react';
import { compose, lifecycle, withState, withProps } from 'recompose';
import _ from 'lodash';
import Lolliplot from '@oncojs/lolliplot';
import * as d3 from 'd3';

import externalReferenceLinks from '@ncigdc/utils/externalReferenceLinks';
import { fetchApi } from '@ncigdc/utils/ajax';
import { makeFilter } from '@ncigdc/utils/filters';
import { buildProteinLolliplotData } from '@ncigdc/utils/data';

import { Row, Column } from '@ncigdc/uikit/Flex';
import withDropdown from '@ncigdc/uikit/withDropdown';
import { ExternalLink } from '@ncigdc/uikit/Links';
import { Tooltip } from '@ncigdc/uikit/Tooltip';

import MinusIcon from '@ncigdc/theme/icons/Minus';
import PlusIcon from '@ncigdc/theme/icons/Plus';
import TableIcon from '@ncigdc/theme/icons/Table';
import BookIcon from '@ncigdc/theme/icons/Book';
import ChartIcon from '@ncigdc/theme/icons/BarChart';

import EntityPageVerticalTable from './EntityPageVerticalTable';
import ProteinLolliplotComponent from './ProteinLolliplot';
import FrequentMutations from './FrequentMutations';
import CancerDistribution from './CancerDistribution';

export const zDepth1 = {
  boxShadow: '0 2px 5px 0 rgba(0,0,0,0.16),0 2px 10px 0 rgba(0,0,0,0.12)',
};

export const dropdown = {
  ...zDepth1,
  position: 'absolute',
  zIndex: 1,
  minWidth: '165px',
  backgroundColor: 'white',
  textAlign: 'left',
  marginTop: '1rem',
  right: 0,
  outline: 'none',
  maxHeight: '200px',
  overflow: 'auto',
};

const styles = {
  heading: {
    flexGrow: 1,
    fontSize: '2.2rem',
    marginBottom: 7,
    marginTop: 7,
    display: 'flex',
    alignItems: 'center',
  },
  countCard: {
    width: 'auto',
    marginBottom: '2rem',
  },
  summary: {
    marginBottom: '2rem',
  },
  column: {
    width: '100%',
    minWidth: 450,
  },
  card: {
    backgroundColor: 'white',
  },
};

const impactColors = {
  HIGH: 'rgb(185, 36, 36)',
  MODERATE: 'rgb(193, 158, 54)',
  LOW: 'rgb(49, 161, 60)',
};

const strandIconMap = {
  '-1': <MinusIcon />,
  1: <PlusIcon />,
};

const initialState = {
  ProteinLolliplot: {},
  gene: {},
  mutations: [],
};

const Gene = compose(
  withState('state', 'setState', initialState),
  withProps({
    renderProteinLolliplot(data, transcript, { setState }): void {
      setState(s => ({
        ...s,
        ProteinLolliplot: Lolliplot({
          d3,
          data,
          selector: '#protein-viewer-root',
          height: 450,
          domainWidth: transcript.length_amino_acid,
          // onMutationClick: d => { window.location.href = `/mutations/${d.id}`; },
          // onMutationMouseover: d => {
          //   $('.global-tooltip')
          //     .addClass('active')
          //     .html(`
          //       <div>AA Change: ${d.aa_change}</div>
          //       <div>DNA Change: ${d.genomic_dna_change}</div>
          //       <div># of Cases: ${d.donors}</div>
          //       <div>Functional Impact: ${d.impact}</div>
          //     `);
          // },
          // onMutationMouseout: () => $('.global-tooltip').removeClass('active'),
          // onProteinMouseover: d => {
          //   $('.global-tooltip')
          //     .addClass('active')
          //     .html(`
          //       <div>${d.id}</div>
          //       <div>${d.description}</div>
          //       <div><b>Click to zoom</b></div>
          //     `);
          // },
          // onProteinMouseout: () => $('.global-tooltip').removeClass('active'),

        }),
      }));
    },
  }),
  lifecycle({
    async componentDidMount(): Promise<*> {
      const { data: { aggregations} } = await fetchApi('case_ssms?facets=project.project_id.raw&size=0');

      const gene = {
        ...this.props.node,
        allCasesAgg: aggregations['project.project_id.raw'].buckets,
      };

      const transcript = gene.transcripts.find(x => x.is_canonical);

      const { data } = await fetchApi('analysis/frequent_mutations_by_project', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: {
          filters: makeFilter([
            {
              field: 'consequence.transcript.gene.gene_id',
              value: [gene.gene_id],
            },
            {
              field: 'consequence.transcript.transcript_id',
              value: [transcript.id],
            },
          ]),
          fields: [
            'ssm_id',
            'genomic_dna_change',
            'occurrence.case.project.project_id',
            'consequence.transcript.is_canonical',
            'consequence.transcript.annotation.impact',
            'consequence.transcript.consequence_type',
            'consequence.transcript.gene_symbol',
            'consequence.transcript.gene.gene_id',
            'consequence.transcript.aa_change',
            'consequence.transcript.transcript_id',
            'consequence.transcript.aa_start',
          ].join(),
        },
      });

      const proteinLolliplotData = buildProteinLolliplotData({ transcript, data: data.hits });

      this.props.renderProteinLolliplot(proteinLolliplotData, transcript, this.props);

      this.props.setState(s => ({ ...s, gene }));
    },
  })
)
(({ state: { gene, mutations, ProteinLolliplot }, ...props }) => {
  const allCasesAggByProject = (gene.allCasesAgg || []).reduce((acc, bucket) =>
    ({ ...acc, [bucket.key]: bucket.doc_count }), {}
  );

  const cancerDistData = (gene.case || []).reduce((acc, c) => {
    const cases = [...new Set([...(acc[c.project.project_id] || { cases: [] }).cases, c.case_id])];
    return {
      ...acc,
      [c.project.project_id]: {
        disease_type: c.project.disease_type,
        cancer_type: c.project.cancer_type || 'tbd',
        site: c.project.primary_site,
        cases,
        ssms: [...new Set([...(acc[c.project.project_id] || { ssms: [] }).ssms, ...c.ssm.map(m => m.ssm_id)])],
        freq: cases.length / allCasesAggByProject[c.project.project_id],
      },
    };
  }, {});

  const sortedCancerDistData = Object.keys(cancerDistData)
    .map(k => ({ project_id: k, ...cancerDistData[k] }))
    .sort((a, b) => b.freq - a.freq);

  const totalNumCases = Object.keys(allCasesAggByProject).reduce((sum, b) => sum + allCasesAggByProject[b], 0);

  const frequentMutations = mutations.map(x => {
    const consequence = x.consequence.find(c => c.transcript.is_canonical);
    const transcript = consequence.transcript || {};
    const annotation = transcript.annotation || {};
    return {
      ...x,
      num_affected_cases_all: x.occurrence.length,
      num_affected_cases_by_project: x.occurrence.reduce((acc, o) => ({
        ...acc,
        [o.case.project.project_id]: acc[o.case.project.project_id] ? acc[o.case.project.project_id] + 1 : 1,
      }), {}),
      impact: annotation.impact,
      consequence_type: (
        <span>
          <b>{_.startCase(transcript.consequence_type.replace('variant', ''))}</b>
          <span style={{ marginLeft: '5px' }}>
            <a href={`/genes/${transcript.gene.gene_id}`}>{transcript.gene_symbol}</a>
          </span>
          <span
            style={{
              marginLeft: '5px',
              color: impactColors[annotation.impact] || 'inherit',
            }}
          >
            {transcript.aa_change}
          </span>
        </span>
      ),
    };
  });

  return (
    <span>
      <Row spacing="2rem">
        <EntityPageVerticalTable
          id="summary"
          title={<span><TableIcon style={{ marginRight: '1rem' }} />Summary</span>}
          thToTd={[
            { th: 'Symbol', td: gene.symbol },
            { th: 'Name', td: gene.name },
            { th: 'Synonyms',
              collapsibleTd: gene.synonyms, // FIXME-API: coming back as stringified listZ
              style: {
                whiteSpace: 'pre-wrap',
                wordBreak: 'breakWord',
              },
            },
            { th: 'Type', td: gene.biotype },
            {
              th: 'Location',
              td: `chr${gene.gene_chromosome}:${gene.gene_start}-${gene.gene_end}
                (${(gene.case || [{ ssm: [{ ncbi_build: '--' }] }])[0].ssm[0].ncbi_build})`,
            },
            { th: 'Strand', td: gene.gene_strand ? strandIconMap[gene.gene_strand.toString(10)] : '--' },
            { th: 'Description',
              collapsibleTd: gene.description,
              style: {
                whiteSpace: 'pre-wrap',
                wordBreak: 'breakWord',
                lineHeight: '2.2rem',
              },
            },
          ]}
          style={{
            ...styles.summary,
            ...styles.column,
            alignSelf: 'flex-start',
          }}
        />
        <EntityPageVerticalTable
          title={<span><BookIcon style={{ marginRight: '1rem' }} /> External References</span>}
          thToTd={
            Object.keys(gene.external_db_ids || {}).map(db => ({
              th: db.replace(/_/g, ' '),
              td: (
                <ExternalLink
                  href={externalReferenceLinks[db](gene.external_db_ids[db])}
                >
                  {gene.external_db_ids[db]}
                </ExternalLink>
              ),
            }))
          }
          style={{ ...styles.summary, ...styles.column, alignSelf: 'flex-start' }}
        />
      </Row>
      <Column style={styles.card} id="cancer-distribution">
        <Row>
          <h1 style={{ ...styles.heading, padding: '1rem' }}>
            <ChartIcon style={{ marginRight: '1rem' }} />
            Cancer Distribution
          </h1>
        </Row>
        <CancerDistribution
          tableHeadings={[
            { key: 'project_id', title: 'Project ID' },
            { key: 'disease_type', title: 'Disease Type' },
            { key: 'site', title: 'Site' },
            { key: 'num_affected_cases',
              title: (
                <Tooltip
                  innerHTML={`Number of Cases where ${gene.symbol} contains SSM`}
                >
                  # Affected Cases
                </Tooltip>
              ),
            },
            { key: 'num_mutations',
              title: <Tooltip innerHTML={`Number of SSM observed in ${gene.symbol}`}># Mutations</Tooltip>,
              style: { textAlign: 'right' },
            },
          ]}
          tableData={sortedCancerDistData.map(d => ({
            ...d,
            project_id: <a href={`/projects/${d.project_id}`}>{d.project_id}</a>,
            num_affected_cases:
              `${d.cases.length}/${allCasesAggByProject[d.project_id]} (${(d.freq * 100).toFixed(2)}%)`,
            num_mutations: d.ssms.length,
          }))}
          chartData={sortedCancerDistData.map(d => ({
            label: d.project_id,
            value: (d.freq * 100),
            href: `projects/${d.project_id}`,
            tooltip: `
              DNA Change<br />
              ${d.cases.length} Case${d.cases.length > 1 ? 's' : ''} Affected in <b>${d.project_id}</b><br />
              ${d.cases.length} / ${allCasesAggByProject[d.project_id]}&nbsp;(${(d.freq * 100).toFixed(2)})%
            `,
          }))}
          tagline={`${sortedCancerDistData.reduce((acc, d) => [...acc, ...d.cases], []).length} cases affected by
            ${sortedCancerDistData.reduce((acc, d) => [...acc, ...d.ssms], []).length} mutations across
            ${sortedCancerDistData.length} projects`
          }
        />
      </Column>

      <Column style={{ ...styles.card, marginTop: '2rem' }}>
        <ProteinLolliplotComponent
          gene={gene}
          reset={ProteinLolliplot.reset}
        />
      </Column>

      <Column style={{ ...styles.card, marginTop: '2rem' }}>
        <h1 style={{ ...styles.heading, padding: '1rem' }} id="frequent-mutations">
          <ChartIcon style={{ marginRight: '1rem' }} />
          Most Frequent Mutations
        </h1>

        <FrequentMutations
          frequentMutations={frequentMutations.map(m => ({ ...m, score: m._score }))}
          totalNumCases={totalNumCases}
          showSurvivalPlot={false}
        />
      </Column>
    </span>
  );
});

export default withDropdown(Gene);
