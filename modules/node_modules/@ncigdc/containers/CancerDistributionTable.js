// @flow
import React from 'react';
import Relay from 'react-relay';
import { buildCancerDistributionData } from '@ncigdc/utils/data';
import { tableToolTipHint } from '@ncigdc/theme/mixins';
import EntityPageHorizontalTable from '@ncigdc/components/EntityPageHorizontalTable';
import { Tooltip } from '@ncigdc/uikit/Tooltip';
import { Column } from '@ncigdc/uikit/Flex';
import { makeFilter } from '@ncigdc/utils/filters';

type TProps = {|
  node: Object,
  aggregations: Object,
|};

const CancerDistributionTableComponent = ({
  node: gene,
  cases,
}: TProps = {}) => {
  const casesByProjectMap = cases.aggregations.project__project_id.buckets.reduce((acc, bucket) =>
    ({ ...acc, [bucket.key]: bucket.doc_count }), {}
  );

  const cancerDistData = gene.case.hits.edges.map(x => x.node)
    .reduce(buildCancerDistributionData(casesByProjectMap), {});

  const sortedCancerDistData = Object.keys(cancerDistData)
    .map(k => ({ project_id: k, ...cancerDistData[k] }))
    .sort((a, b) => b.freq - a.freq);

  return (
    <Column style={{ width: '100%', minWidth: 450 }}>
      <EntityPageHorizontalTable
        headings={[
          { key: 'project_id', title: 'Project ID' },
          { key: 'disease_type', title: 'Disease Type' },
          { key: 'site', title: 'Site' },
          { key: 'num_affected_cases',
            title: (
              <Tooltip
                Component={`Number of Cases where ${gene.symbol} contains SSM`}
                style={tableToolTipHint()}
              >
                # Affected Cases
              </Tooltip>
            ),
          },
          { key: 'num_mutations',
            title: (
              <Tooltip
                Component={`Number of SSM observed in ${gene.symbol}`}
                style={tableToolTipHint()}
              >
                # Mutations
              </Tooltip>
            ),
            style: { textAlign: 'right' },
          },
        ]}
        data={sortedCancerDistData.map(d => ({
          ...d,
          project_id: <a href={`/projects/${d.project_id}`}>{d.project_id}</a>,
          num_affected_cases: (
            <span>
              {d.cases.length.toLocaleString()} / {casesByProjectMap[d.project_id].toLocaleString()} ({(d.freq * 100).toFixed(2)}%)
            </span>
          ),
          num_mutations: d.ssms.length,
        }))}
      />
    </Column>
  );
};

const CancerDistributionTableQuery = {
  initialVariables: {
    ssmTested: makeFilter([{
      field: 'available_variation_data',
      value: 'ssm',
    }], false),
  },
  fragments: {
    node: () => Relay.QL`
      fragment on Gene {
        case {
          hits(first: 99 filters: $ssmTested) {
            edges {
              node {
                submitter_id
                case_id
                primary_site
                disease_type
                project {
                  project_id
                }
                ssm {
                  hits(first: 99) {
                    edges {
                      node {
                        ssm_id
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
    cases: () => Relay.QL`
      fragment on CohortCases {
        aggregations(filters: $ssmTested) {
          project__project_id {
            buckets {
              doc_count
              key
            }
          }
        }
      }
    `,
  },
};

const CancerDistributionTable = Relay.createContainer(
  CancerDistributionTableComponent,
  CancerDistributionTableQuery
);

export default CancerDistributionTable;
