/* @flow */

import React from 'react';
import Relay from 'react-relay';

import TermAggregation from '@ncigdc/components/Aggregations/TermAggregation';
import SuggestionFacet from '@ncigdc/components/Aggregations/SuggestionFacet';

import type { TBucket } from '@ncigdc/components/Aggregations/types';

import { withTheme } from '@ncigdc/theme';

export type TProps = {
  aggregations: {
    demographic__ethnicity: { buckets: [TBucket] },
    demographic__gender: { buckets: [TBucket] },
    demographic__race: { buckets: [TBucket] },
    diagnoses__vital_status: { buckets: [TBucket] },
    project__disease_type: { buckets: [TBucket] },
    project__primary_site: { buckets: [TBucket] },
    project__project_id: { buckets: [TBucket] },
  },
  hits: {
    edges: Array<{|
      node: {|
       id: string,
     |},
   |}>,
 },
  setAutocomplete: Function,
  theme: Object,
};

export const CaseAggregationsComponent = (props: TProps) => {
  return (
    <div>
      <SuggestionFacet
        title="Case"
        placeholder="Search for UUID, Submitter ID"
        hits={props.hits}
        setAutocomplete={props.setAutocomplete}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'cases.project__primary_site'}
        title="Primary Site"
        buckets={props.aggregations.project__primary_site.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'cases.project__program__name'}
        title="Cancer Program"
        buckets={props.aggregations.project__program__name.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'cases.project__project_id'}
        title="Project"
        buckets={props.aggregations.project__project_id.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'cases.project__disease_type'}
        title="Disease Type"
        buckets={props.aggregations.project__disease_type.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'cases.demographic__gender'}
        title="Gender"
        buckets={props.aggregations.demographic__gender.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'cases.diagnoses__vital_status'}
        title="Vital Status"
        buckets={props.aggregations.diagnoses__vital_status.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'cases.demographic__race'}
        title="Race"
        buckets={props.aggregations.demographic__race.buckets}
      />
      <TermAggregation
        style={{ borderTop: `1px solid ${props.theme.greyScale5}` }}
        field={'cases.demographic__ethnicity'}
        title="Ethnicity"
        buckets={props.aggregations.demographic__ethnicity.buckets}
      />
    </div>
  );
};

export const CaseAggregationsQuery = {
  fragments: {
    aggregations: () => Relay.QL`
      fragment on RepositoryCaseAggregations {
        demographic__ethnicity {
          buckets {
            doc_count
            key
          }
        }
        demographic__gender {
          buckets {
            doc_count
            key
          }
        }
        demographic__race {
          buckets {
            doc_count
            key
          }
        }
        diagnoses__vital_status {
          buckets {
            doc_count
            key
          }
        }
        project__disease_type {
          buckets {
            doc_count
            key
          }
        }
        project__program__name {
          buckets {
            doc_count
            key
          }
        }
        project__primary_site {
          buckets {
            doc_count
            key
          }
        }
        project__project_id {
          buckets {
            doc_count
            key
          }
        }
      }
    `,
  },
};


const CaseAggregations = Relay.createContainer(
  withTheme(CaseAggregationsComponent),
  CaseAggregationsQuery
);

export default CaseAggregations;
