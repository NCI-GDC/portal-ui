// @flow
import React from 'react';
import _ from 'lodash';
import Highlight from 'react-highlighter';
import { css, before } from 'glamor';
import type { TSearchHit } from './types';

const styles = {
  container: {
    position: 'absolute',
    right: 0,
    top: '100%',
    backgroundColor: '#fff',
    listStyleType: 'none',
    padding: 0,
    boxShadow: 'rgba(0, 0, 0, 0.156863) 0px 2px 5px 0px, rgba(0, 0, 0, 0.117647) 0px 2px 10px 0px',
  },
  item: {
    position: 'relative',
    padding: '0.5rem 1rem',
    transition: 'all 0.1s ease',
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'stretch',
  },
  resultItem: {
    '::before': {
      display: 'block',
      content: '""',
      height: '100%',
      width: '100%',
      position: 'absolute',
      left: 0,
      top: 0,
      backgroundColor: '#505556',
      transform: 'scaleX(0.058)',
      transition: 'transform 0.4s cubic-bezier(1, 0.5, 0, 1), background-color 0.3s 0.2s ease',
      transformOrigin: 'left',
    },
  },
  resultItemActive: {
    '::before': {
      transform: 'scaleX(1)',
      backgroundColor: '#1f486c',
    },
  },
  itemIconWrapper: {
    marginLeft: '-1rem',
    marginTop: '-0.5rem',
    marginBottom: '-0.5rem',
    marginRight: '1rem',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'flex-start',
    width: 32,
    flexShrink: 0,
    position: 'relative',
  },
  itemIcon: {
    width: '100%',
    height: '3.2rem',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    color: '#fff',
    position: 'relative',
    perspective: '1000px',
    '::before': {
      zIndex: 1,
    },
    '::after': {
      content: '""',
      position: 'absolute',
      top: 0,
      left: 0,
      width: '100%',
      height: '100%',
      backgroundColor: '#453D3D',
      transition: 'all 0.3s cubic-bezier(1, 0, 0, 1)',
    },
  },
  itemActiveIcon: {
    '::after': {
      backgroundColor: 'rgba(255,255,255  ,0)',
    },
  },
  itemTextWrapper: {
    position: 'relative',
  },
  itemTitle: {
    fontWeight: '500',
  },
  selectedItem: {
    color: '#fff',
  },
  deemphasizedItem: {
    color: '#999',
  },
  highlights: {
    fontSize: '1.14rem',
    fontStyle: 'italic',
    color: '#525252',
  },
  loadingMessage: {
    minWidth: '11em',
    textAlign: 'left',
    color: '#999',
  },
};

const ResultIcon = ({ type, style, className }) => ({
  case: () => <i style={style} className={`fa fa-user ${className}`} />,
  file: () => <i style={style} className={`fa fa-file-o ${className}`} />,
  project: () => <i style={style} className={`fa fa-files-o ${className}`} />,
  annotation: () => <i style={style} className={`fa fa-align-left ${className}`} />,
  'gene-centric': () => <i style={style} className={`fa fa-square-o ${className}`} />,
  'ssm-centric': () => <i style={style} className={`fa fa-square-o ${className}`} />,
}[type])();

const ResultHighlights = ({ item, query, style }) => ({
  'gene-centric': () => (
    <div style={style}>
      <Highlight search={query}>{item.symbol}</Highlight>
    </div>
  ),
  file: () => (
    <div style={style}>
      <Highlight search={query}>{item.file_name}</Highlight>
      <Highlight search={query}>{item.file_id}</Highlight>
    </div>
  ),
  project: () => (
    <div style={style}>
      <Highlight search={query}>{item.project_id}</Highlight>
      <Highlight search={query}>{item.name}</Highlight>
      <Highlight search={query}>{item.primary_site}</Highlight>
    </div>
  ),
  case: () => (
    <div>
      <Highlight search={query}>{item.case_id}</Highlight>
      { _.get(item, 'project.project_id') && <Highlight search={query}>{item.project.project_id}</Highlight> }

      { _.get(item, 'bioSpecimen.sample_id') && <Highlight search={query}>{item.sample_ids}</Highlight> }
      { _.get(item, 'bioSpecimen.sample_id') && <Highlight search={query}>{item.submitter_sample_ids}</Highlight> }

      { _.get(item, 'bioSpecimen.portion_id') && <Highlight search={query}>{item.portion_ids}</Highlight> }
      { _.get(item, 'bioSpecimen.portion_id') && <Highlight search={query}>{item.submitter_portion_ids}</Highlight> }

      { _.get(item, 'bioSpecimen.analyte_id') && <Highlight search={query}>{item.analyte_ids}</Highlight> }
      { _.get(item, 'bioSpecimen.analyte_id') && <Highlight search={query}>{item.submitter_analyte_ids}</Highlight> }

      { _.get(item, 'bioSpecimen.aliquot_id') && <Highlight search={query}>{item.aliquot_ids}</Highlight> }
      { _.get(item, 'bioSpecimen.aliquot_id') && <Highlight search={query}>{item.submitter_aliquot_ids}</Highlight> }
    </div>
  ),
}[item._type]());

type TProps = {
  results: TSearchHit[],
  query: string,
  onSelectItem: Function,
  onActivateItem: Function,
  isLoading: boolean,
};

export default ({ results = [], query, isLoading, onSelectItem, onActivateItem }: TProps) => (
  <ul style={{ ...styles.container }}>
    {
      results.map((item) => (
        <li
          key={item._id}
          {
            ... css(
              styles.item,
              styles.resultItem,
              item.isSelected && styles.resultItemActive,
              item.isSelected && styles.selectedItem,
              isLoading && styles.deemphasizedItem
              )
          }
          onMouseEnter={() => onSelectItem(item)}
          onClick={() => onActivateItem(item)}
        >
          <div style={styles.itemIconWrapper}>
            <ResultIcon type={item._type} className={css(styles.itemIcon, item.isSelected && styles.itemActiveIcon)} />
          </div>
          <div style={styles.itemTextWrapper}>
            <span style={styles.itemTitle}>{ item._id }</span>
            <ResultHighlights item={item} query={query} style={{ ...styles.highlights, ...(item.isSelected && _.pick(styles.selectedItem, 'color')) }} />
          </div>
        </li>
      ))
    }
    <li {...css(styles.item)}>
      {
        isLoading
        ? <div style={styles.loadingMessage}>Loading search results...</div>
        : <div>
            Total of <strong>{results.length}</strong> Result(s) Found...
          </div>
      }
    </li>
  </ul>
);
