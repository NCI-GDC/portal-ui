/* @flow */
/* globals fetch */
import fs from 'fs';
import path from 'path';
import 'isomorphic-fetch';
import _ from 'lodash';

import escapeForRelay from '@ncigdc/utils/escapeForRelay';
import getFacetType from '@ncigdc/utils/getFacetType';

// ids and dates don't need aggregations
const getFacetAggregationTemplate = (facet) => {
  const fieldName = escapeForRelay(facet.field);
  const facetType = getFacetType(facet);
  if (_.includes(['datetime'], facetType)) {
    return '';
  }
  return `
${fieldName} @include(if: $shouldShow_${fieldName}) {
  ${({
    terms: `
      buckets {
        doc_count
        key
      }
      `,
    id: `
      buckets {
        doc_count
        key
      }
      `,
    range: `
      count
      max
      avg
      min
    `,
  }[facetType])}
}`;
};

const exportTemplate = (facets, exportFunctionName, fragmentName) => `
export const initial${fragmentName}Variables = {
${
  facets.map(facet => `  shouldShow_${escapeForRelay(facet.field)}: false`).join(',\n')
}
};

export const ${exportFunctionName} = () => Relay.QL\`
  fragment on ${fragmentName} {
    ${facets.map(getFacetAggregationTemplate).join('\n')}
  }
\`;
`;

const wrapFile = (contents) => `/* @flow */
/* eslint max-len:0, comma-dangle:0 */

import Relay from 'react-relay';
${contents}
`

let generateFragments = async () => {
  const mapping = await fetch('http://localhost:5000/v0/gql/_mapping').then(x => x.json());
  const groupedFacets = _.groupBy(_.values(mapping), facet => facet.doc_type);

  const repositoryCaseAggregations = exportTemplate(groupedFacets.cases, 'repositoryCaseAggregationsFragment', 'CaseAggregations');
  const repositoryFileAggregations = exportTemplate(groupedFacets.files, 'repositoryFileAggregationsFragment', 'FileAggregations');

  fs.writeFileSync(path.join(__dirname, 'repositoryCaseAggregations.js'), wrapFile(repositoryCaseAggregations));
  fs.writeFileSync(path.join(__dirname, 'repositoryFileAggregations.js'), wrapFile(repositoryFileAggregations));
};

generateFragments()
  .then(() => console.log('done'))
  .catch((e) => console.error(e));
