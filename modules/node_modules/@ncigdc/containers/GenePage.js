/* @flow */

import React from 'react';
import Relay from 'react-relay';

import FullWidthLayout from '@ncigdc/components/Layouts/FullWidthLayout';
import Gene from '@ncigdc/components/Gene';

import FrequentMutationsChart from '@ncigdc/containers/FrequentMutationsChart';
import FrequentMutationsTable from '@ncigdc/containers/FrequentMutationsTable';
import GeneSummary from '@ncigdc/containers/GeneSummary';
import GeneExternalReferences from '@ncigdc/containers/GeneExternalReferences';
import Lolliplot from '@ncigdc/containers/Lolliplot';

export type TProps = {
  node: {
    symbol: string,
  },
  viewer: {
    cohort: {
      cases: {
        aggregations: {
          project__project_id: Object,
        },
      },
    },
  },
};

export const GenePageComponent = (props: TProps) => (
  <FullWidthLayout
    title={props.node.symbol}
    entityType={<i className="fa fa-file-o" />}
  >
    <Gene
      node={props.node}
      casesByProject={props.viewer.cohort.cases.aggregations.project__project_id.buckets}
      viewer={props.viewer}
    />
  </FullWidthLayout>
);

export const GenePageQuery = {
  initialVariables: {
    filters: null,
    score: 'occurrence.case.project.project_id',
    fetchSsms: false,
  },
  fragments: {
    node: () => Relay.QL`
      fragment on Gene {
        ${GeneSummary.getFragment('node')}
        ${GeneExternalReferences.getFragment('node')}
        description
        gene_id
        symbol
        name
        synonyms
        biotype
        gene_chromosome
        gene_start
        gene_end
        gene_strand
        canonical_transcript_id
        case {
          hits(first: 99) {
            edges {
              node {
                submitter_id
                case_id
                primary_site
                disease_type
                project {
                  project_id
                }
                ssm {
                  hits(first: 99) {
                    edges {
                      node {
                        ssm_id
                      }
                    }
                  }
                }
              }
            }
          }
        }
        external_db_ids {
          entrez_gene
          uniprotkb_swissprot
          hgnc
          omim_gene
        }
        transcripts {
          hits(first: 99) {
            edges {
              node {
                is_canonical
                transcript_id
                length_amino_acid
                domains {
                  hit_name
                  start
                  end
                }
              }
            }
          }
        }
      }
    `,
    viewer: () => Relay.QL`
      fragment on Root {
        cohort {
          frequentMutationsChartFragment: ssms {
            ${FrequentMutationsChart.getFragment('ssms')}
          }
          frequentMutationsTableFragment: ssms {
            ${FrequentMutationsTable.getFragment('ssms')}
          }
          lolliplotFragment: ssms {
            ${Lolliplot.getFragment('ssms')}
          }
          cases {
            aggregations {
              project__project_id {
                buckets {
                  doc_count
                  key
                }
              }
            }
          }
        }
      }
    `,
  },
};

const GenePage = Relay.createContainer(
  GenePageComponent,
  GenePageQuery
);

export default GenePage;
