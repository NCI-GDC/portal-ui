// @flow

import React from 'react';
import Relay from 'react-relay';
import { isEqual, startCase, truncate } from 'lodash';
import { withState, withProps, lifecycle, compose } from 'recompose';

import GeneLink from '@ncigdc/components/Links/GeneLink';
import FrequentMutations from './FrequentMutations';
import { PaginationContainer } from '../uikit/Pagination';

const impactColors = {
  HIGH: 'rgb(185, 36, 36)',
  MODERATE: 'rgb(193, 158, 54)',
  LOW: 'rgb(49, 161, 60)',
};

function mapData(data: Array<Object>, projectId: string): Array<Object> {
  return data.map((hit) => {
    const { transcript } = hit.consequence.find(c => c.transcript.is_canonical) || {};
    const { annotation = {}, consequence_type = '', aa_change, gene } = transcript || {};
    const { symbol } = gene || {};
    const impact = annotation.impact;

    return {
      ...hit,
      score: hit._score,
      num_affected_cases_all: hit.occurrence.length,
      num_affected_cases_project: hit.occurrence.filter(o =>
        o.case.project.project_id === projectId
      ).length,
      num_affected_cases_by_project: hit.occurrence.reduce((acc, o) => ({
        ...acc,
        [o.case.project.project_id]: acc[o.case.project.project_id] ? acc[o.case.project.project_id] + 1 : 1,
      }), {}),
      impact,
      consequence_type: (
        <span>
          <b>{startCase(consequence_type.replace('variant', ''))}</b>
          <span style={{ marginLeft: '5px' }}>
            {symbol && <GeneLink id={symbol}>{symbol}</GeneLink>}
          </span>
          <span
            style={{
              marginLeft: '5px',
              color: impactColors[impact] || 'inherit',
            }}
          >
            {truncate(aa_change)}
          </span>
        </span>
      ),
    };
  });
}

const FrequentMutationsComponent = compose(
  lifecycle({
    componentDidMount() {
      this.props.relay.setVariables({ fetchData: true });
    },
    componentWillReceiveProps(next) {
      if (!isEqual(this.props.currentFilters, next.currentFilters)) {
        this.props.fetchData(next);
        this.props.fetchBarChart(next);
      }
    },
  })
)(({ state, ...props }) => {
  return <div />
  return !!state.frequentMutationsTable.length && (
    <PaginationContainer
      total={state.total}
      onChange={
        pageInfo => {
          props.relay.setVariables({ offset: pageInfo.offset, first: pageInfo.first });
        }
      }
      entityType="Mutations"
    >
      <FrequentMutations
        frequentMutationsChart={state.frequentMutationsChart}
        frequentMutationsTable={state.frequentMutationsTable}
        numCasesAggByProject={props.numCasesAggByProject}
        totalNumCases={props.totalNumCases}
        projectId={props.projectId}
        defaultSurvivalRawData={props.defaultSurvivalRawData}
        defaultSurvivalLegend={props.defaultSurvivalLegend}
        survivalPlotloading={props.survivalPlotloading}
        showSurvivalPlot={props.showSurvivalPlot}
      />
    </PaginationContainer>
  );
});

export const FrequentMutationsQuery = {
  initialVariables: {
    filters: null,
    score: 'occurrence.case.project.project_id',
    fetchChartData: false,
    fetchTableData: false,
    offset: 0,
    first: 20,
  },
  fragments: {
    cohort: () => Relay.QL`
      fragment on Cohort {
        frequentMutationsChart: ssms @include(if: $fetchChartData) {
          hits(first: 20 filters: $filters, score: $score) {
            total
            edges {
              node {
                genomic_dna_change
                ssm_id
                consequence {
                  hits(first: 99) {
                    edges {
                      node {
                        transcript {
                          is_canonical
                        }
                      }
                    }
                  }
                }
                occurrence {
                  hits(first: 99) {
                    edges {
                      node {
                        case {
                          project {
                            project_id
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        frequentMutationsTable: ssms {
          hits(first: $first offset: $offset filters: $filters, score: $score) {
            total
            edges {
              node {
                genomic_dna_change
                mutation_subtype
                ssm_id
                consequence {
                  hits(first: 99) {
                    edges {
                      node {
                        transcript {
                          is_canonical
                          annotation {
                            impact
                          }
                          consequence_type
                          gene {
                            gene_id
                          }
                          gene_symbol
                          aa_change
                        }
                      }
                    }
                  }
                }
                occurrence {
                  hits(first: 99) {
                    edges {
                      node {
                        case {
                          project {
                            project_id
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const FrequentMutationsContainer = Relay.createContainer(
  FrequentMutationsComponent,
  FrequentMutationsQuery
);

export default FrequentMutationsContainer;
