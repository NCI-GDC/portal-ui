/* globals _, fetch */
/* eslint prefer-const:0, no-console:0 */

let getFacetType = facet => {
  if (_.includes(facet.field, 'datetime')) {
    return 'datetime';
  } else if (_.some(['_id', '_uuid', 'md5sum', 'file_name'], idSuffix => _.includes(facet.field, idSuffix))) {
    return 'id';
  } else if (facet.type === 'long') {
    return 'range';
  } else {
    return 'terms';
  }
};

let escapeForRelay = (string) => string.replace(/\./g, '__');

// ids and dates don't need aggregations
let getFacetAggregationTemplate = (facet) => {
  const fieldName = escapeForRelay(facet.field);
  const facetType = getFacetType(facet);
  if (_.includes(['datetime'], facetType)) {
    return '';
  }
  return `
  ${fieldName} @include(if: $shouldShow_${fieldName}) {
    ${({
      terms: `
        buckets {
          doc_count
          key
        }
        `,
      id: `
        buckets {
          doc_count
          key
        }
        `,
      range: `
        count
        max
        avg
        min
      `,
    }[facetType])}
  }`;
};

let exportTemplate = (facets, exportFunctionName, fragmentName) => `
  export const initial${fragmentName}Variables = {
    ${
      facets.map(facet => `shouldShow_${escapeForRelay(facet.field)}: false`).join(',\n')
    }
  };

  export const ${exportFunctionName} = () => Relay.QL\`
    fragment on ${fragmentName} {
      ${facets.map(getFacetAggregationTemplate).join('\n')}
    }
  \`;
  `;

let generateFragment = async () => {
  const mapping = await fetch('https://gdc-api.nci.nih.gov/v0/gql/_mapping').then(x => x.json());
  const groupedFacets = _.groupBy(_.values(mapping), facet => facet.doc_type);

  return exportTemplate(groupedFacets.cases, 'repositoryCaseAggregationsFragment', 'RepositoryCaseAggregations');
};

generateFragment().then(console.log.bind(console));
