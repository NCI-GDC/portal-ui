// @flow
import React from 'react';
import { take, xor } from 'lodash';
import UndoIcon from 'react-icons/lib/md/undo';
import LeftArrow from 'react-icons/lib/fa/long-arrow-left';
import Cogs from 'react-icons/lib/fa/cogs';
import Color from 'color';
import { compose, withState, pure, withHandlers, withPropsOnChange, withProps } from 'recompose';

import { humanify } from '@ncigdc/utils/string';

import Button, { buttonBaseStyles } from '@ncigdc/uikit/Button';
import { Row } from '@ncigdc/uikit/Flex';
import Info from '@ncigdc/uikit/Info';

import styled from '@ncigdc/theme/styled';
import { buttonLike } from '@ncigdc/theme/mixins';
import UnstyledButton from '@ncigdc/uikit/UnstyledButton';
import Link from '@ncigdc/components/Links/Link';
import withFilters from '@ncigdc/utils/withFilters';

/*----------------------------------------------------------------------------*/

const Field = styled(Button, ({
  backgroundColor: ({ theme }) => theme.greyScale2,
  ':hover': {
    backgroundColor: ({ theme }) => Color(theme.greyScale2).lighten(0.7).rgbString(),
  },
}));

const Value = styled(Button, ({
  backgroundColor: ({ theme }) => theme.success,
  ':hover': {
    backgroundColor: ({ theme }) => Color(theme.success).lighten(0.7).rgbString(),
  },
}));

const Op = styled.span({
  ...buttonLike,
  backgroundColor: ({ theme }) => theme.primary,
  color: 'white',
});

const NotUnderlinedLink = styled(Link, {
  ':link': {
    textDecoration: 'none',
  },
});

const LinkButton = styled(Link, {
  ...buttonBaseStyles,
  flex: 'none',
  ':link': {
    textDecoration: 'none',
    color: buttonBaseStyles.color,
  },
});

type TProps = {
  currentFilters: Array<Object>,
  onLessClicked: Function,
  isFilterExpanded: Function,
  style: Object,
  linkPathname?: string,
  linkText?: string,
  linkFieldMap?: Function,
  hideLinkOnEmpty: boolean,
};


const enhance = compose(
  withFilters(),
  withPropsOnChange(['filters'], ({ filters }) => ({ currentFilters: (filters && filters.content) || [] })),
  withState('expandedFilters', 'setExpandedFilters', []),
  withProps(({ expandedFilters }) => ({
    isFilterExpanded: (filter) => expandedFilters.includes(filter),
  })),
  withHandlers({
    onLessClicked: ({ expandedFilters, setExpandedFilters }) => filter => {
      setExpandedFilters(xor(expandedFilters, [filter]));
    },
  }),
  pure
);

const styles = {
  leftParen: {
    fontSize: '2rem',
    marginRight: '0.3rem',
    display: 'flex',
    alignItems: 'center',
  },
  rightParen: {
    fontSize: '2rem',
    marginRight: '0.3rem',
    display: 'flex',
    alignItems: 'center',
  },
  groupPadding: {
    padding: '0.5rem 0',
  },
};

const CurrentFilters = ({
  currentFilters,
  onLessClicked,
  isFilterExpanded,
  style,
  linkPathname,
  linkText,
  linkFieldMap = f => f,
  hideLinkOnEmpty = true,
}: TProps = {}) => (
  <Info style={style}>
    {!currentFilters.length &&
      <span style={{ display: 'flex', alignItems: 'center', lineHeight: '44px', width: '100%' }}>
        <LeftArrow />
        <span style={{ marginLeft: '0.6rem' }}>
          Start searching by selecting a facet
        </span>
      </span>
    }
    {!!currentFilters.length &&
      <Row
        style={{
          width: '100%',
          justifyContent: 'space-between',
        }}
      >
        <Row wrap spacing="0.3rem">
          <NotUnderlinedLink
            style={styles.groupPadding}
            query={{}}
          >
            <Button leftIcon={<UndoIcon />}>Clear</Button>
          </NotUnderlinedLink>

          {currentFilters.map((filter, i) => (
            <Row
              key={`${filter.content.field}.${filter.op}.${filter.content.value.map(v => v)}`}
              spacing="0.3rem"
              style={styles.groupPadding}
            >
              <NotUnderlinedLink
                merge="toggle"
                query={{
                  offset: 0,
                  filters: {
                    op: 'and',
                    content: [{
                      op: 'in',
                      content: {
                        field: filter.content.field,
                        value: filter.content.value,
                      },
                    }],
                  },
                }}
              >
                <Field>{humanify({ term: filter.content.field })}</Field>
              </NotUnderlinedLink>
              {filter.op === 'in' && filter.content.value.length === 1 &&
                <Op>IS</Op>
              }
              {filter.op === 'in' && filter.content.value.length > 1 &&
                <Op>IN</Op>
              }
              {filter.op !== 'in' && <Button>{filter.op}</Button>}
              {filter.content.value.length > 1 && <span style={styles.leftParen}>(</span>}
              {(isFilterExpanded(filter) ? filter.content.value : take(filter.content.value, 2)).map(value => (
                <NotUnderlinedLink
                  key={value}
                  merge="toggle"
                  query={{
                    offset: 0,
                    filters: {
                      op: 'and',
                      content: [{
                        op: 'in',
                        content: {
                          field: filter.content.field,
                          value: [value],
                        },
                      }],
                    },
                  }}
                >
                  <Value>{value}</Value>
                </NotUnderlinedLink>
                  ))}
              {filter.content.value.length > 2 &&
                <UnstyledButton style={styles.rightParen} onClick={() => onLessClicked(filter)}>&#8230;</UnstyledButton>
              }
              {isFilterExpanded(filter) &&
                <UnstyledButton
                  style={{ display: 'flex', alignItems: 'center' }}
                  onClick={() => onLessClicked(filter)}
                >
                  Less
                </UnstyledButton>}
              {filter.content.value.length > 1 && <span style={styles.rightParen}>)</span>}
              {i < currentFilters.length - 1 && <Op>AND</Op>}
            </Row>
          ))}
        </Row>
      </Row>
    }
    {linkPathname && (!hideLinkOnEmpty || !!currentFilters.length) &&
      <LinkButton
        pathname={linkPathname}
        query={{
          filters: {
            op: 'and',
            content: currentFilters.map(x => ({
              op: 'in',
              content: {
                field: linkFieldMap(x.content.field),
                value: x.content.value,
              },
            })),
          },
        }}
      >
        <Cogs style={{ marginRight: 5 }} />{linkText}
      </LinkButton>
    }
  </Info>
);

/*----------------------------------------------------------------------------*/

export default enhance(CurrentFilters);
