// @flow

import React from 'react';
import Relay from 'react-relay';
import { compose, withState } from 'recompose';
import { makeFilter } from '@ncigdc/utils/filters';
import TogglableUl from '@ncigdc/uikit/TogglableUl';

const groupByProject = (acc, c) => ({
  ...acc,
  [c.project.project_id]: acc[c.project.project_id] ? acc[c.project.project_id] + 1 : 1,
});

const GeneProjectBreakdownComponent = compose(
  withState('loading', 'setLoading', false)
)(({
  loading,
  setLoading,
  cohort: { genes, cases },
  numCasesAggByProject,
  allCases,
  relay,
  id,
}) => {
  const g = !genes ? { projectBreakdown: {} } : genes.hits.edges.map(x => x.node).map(x => ({
    ...x,
    projectBreakdown: x.case.hits.edges.map(c => c.node).reduce(groupByProject, {}),
  }))[0];

  return (
    <TogglableUl
      onToggle={() => {
        relay.setVariables({
          fetchData: true,
          filters: makeFilter([{ field: 'gene_id', value: id }], false),
        });
        setLoading(l => !l);
      }}
      items={[
        <span key="total">
          {allCases.hits.total.toLocaleString()} / {cases.hits.total.toLocaleString()}
          &nbsp;({((allCases.hits.total / cases.hits.total) * 100).toFixed(2)}%)
        </span>,
        ...(loading && !genes && [<i className="fa fa-spinner fa-spin" />]),
        ...Object.entries(g.projectBreakdown)
          .sort(([ak, av], [bk, bv]) => (bv / numCasesAggByProject[bk]) - (av / numCasesAggByProject[ak]))
          .map(([k, v]) => (
            <span key={k}>
              {k}: {v} / {numCasesAggByProject[k]}
              &nbsp;({((v / numCasesAggByProject[k]) * 100).toFixed(2)}%)
            </span>
          )),
      ]}
    />
  );
});

export const GeneProjectBreakdownQuery = {
  initialVariables: {
    fetchData: false,
    filters: null,
  },
  fragments: {
    cohort: () => Relay.QL`
      fragment on Cohort {
        cases { hits(first: 1) { total } }
        genes @include(if: $fetchData) {
          hits (first: 1 filters: $filters) {
            total
            edges {
              node {
                case {
                  hits(first: 1000) {
                    total
                    edges {
                      node {
                        project {
                          project_id
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
  },
};

const GeneProjectBreakdown = Relay.createContainer(
  GeneProjectBreakdownComponent,
  GeneProjectBreakdownQuery
);

export default GeneProjectBreakdown;
