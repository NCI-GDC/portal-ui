/* @flow */

import React from 'react';
import LocationSubscriber from '@ncigdc/components/LocationSubscriber';
import { compose, withState, withPropsOnChange, pure } from 'recompose';

import CloseIcon from '@ncigdc/theme/icons/CloseIcon';
import type { TRawQuery } from '@ncigdc/utils/uri/types';
import { parseFilterParam } from '@ncigdc/utils/uri';
import { inCurrentFilters } from '@ncigdc/utils/filters';

import { Row, Column } from '@ncigdc/uikit/Flex';
import CountBubble from '@ncigdc/uikit/CountBubble';
import styled from '@ncigdc/theme/styled';
import Input from '@ncigdc/uikit/Form/Input';
import OverflowTooltippedLabel from '@ncigdc/uikit/OverflowTooltippedLabel';

import Link from '../Links/Link';
import { Container } from './';

import type { TBucket } from './types';

type TProps = {
  buckets: [TBucket],
  field: string,
  filteredBuckets: Array<Object>,
  style: Object,
  title: string,
  showingValueSearch: boolean,
  collapsed: boolean,
  setShowingMore: Function,
  showingMore: boolean,
};

const BucketLink = styled(Link, ({
  minWidth: 0,
  display: 'inherit',
  color: ({ theme }) => theme.greyScale1,
  ':link': {
    textDecoration: 'none',
    color: ({ theme }) => theme.greyScale1,
  },
}));

const ToggleMoreLink = styled.div({
  marginLeft: 'auto',
  color: ({ theme }) => theme.greyScale3,
  fontSize: '1.2rem',
  cursor: 'pointer',
  ':link': {
    color: ({ theme }) => theme.greyScale3,
  },
  ':visited': {
    color: ({ theme }) => theme.greyScale3,
  },
});

const BucketRow = styled(Row, ({
  padding: '0.3rem 0',
}));

const BottomRow = styled(Row, ({
  padding: '0.5rem',
}));

let input;
const TermAggregation = (props: TProps) => {
  const dotField = props.field.replace(/__/g, '.');
  const { filteredBuckets } = props;

  return (
    <LocationSubscriber>{(ctx: {| pathname: string, query: TRawQuery |}) => {
      const currentFilters = ctx.query && parseFilterParam((ctx.query || {}).filters, {}).content || [];
      return (
        <Container style={props.style}>
          {!props.collapsed && props.showingValueSearch &&
            <Row>
              <Input
                getNode={node => { input = node; }}
                style={{ borderRadius: '4px', marginBottom: '6px' }}
                onChange={() => props.setFilter(input.value)}
                placeholder={'Search...'}
              />
              { input && input.value &&
                <CloseIcon
                  style={{
                    position: 'absolute',
                    right: 0,
                    padding: '10px',
                    transition: 'all 0.3s ease',
                    outline: 0,
                  }}
                  onClick={() => {
                    props.setFilter('');
                    input.value = '';
                  }}
                />
              }
            </Row>
          }
          {!props.collapsed &&
            <Column>
              {filteredBuckets
                .slice(0, props.showingMore ? Infinity : 5)
                .map(b => ({ ...b, name: b.key === '1' ? 'Cancer Gene Census' : b.key })) // TODO: this needs to change in the data
                .map(bucket => (
                  <BucketRow key={bucket.key}>
                    <BucketLink
                      merge="toggle"
                      query={{
                        offset: 0,
                        filters: {
                          op: 'and',
                          content: [{
                            op: 'in',
                            content: {
                              field: dotField,
                              value: [bucket.key],
                            },
                          }],
                        },
                      }}
                    >
                      <input
                        readOnly
                        type="checkbox"
                        style={{ pointerEvents: 'none', marginRight: '5px' }}
                        checked={inCurrentFilters({ key: bucket.key, dotField, currentFilters })}
                        id={`input-${props.title}-${bucket.name.replace(/\s/g, '-')}`}
                        name={`input-${props.title}-${bucket.name.replace(/\s/g, '-')}`}
                      />
                      <OverflowTooltippedLabel
                        htmlFor={`input-${props.title}-${bucket.name.replace(/\s/g, '-')}`}
                        style={{ marginLeft: '0.3rem' }}
                      >
                        {bucket.name}
                      </OverflowTooltippedLabel>
                    </BucketLink>
                    <CountBubble>{bucket.doc_count.toLocaleString()}</CountBubble>
                  </BucketRow>
                ))
            }
              {filteredBuckets.length > 5 &&
                <BottomRow>
                  <ToggleMoreLink onClick={() => props.setShowingMore(!props.showingMore)}>
                    {props.showingMore
                      ? 'Less...'
                      : filteredBuckets.length - 5 && `${filteredBuckets.length - 5} More...`
                    }
                  </ToggleMoreLink>
                </BottomRow>
              }

              { filteredBuckets.length === 0 &&
                <span>{(input || { value: '' }).value ?
                  'No matching values' :
                    'No data for this field'}
                </span>
              }
            </Column>
          }
        </Container>
      );
    }}
    </LocationSubscriber>
  );
};

const enhance = compose(
  withState('showingMore', 'setShowingMore', false),
  withState('filter', 'setFilter', ''),
  withPropsOnChange(['buckets', 'filter'], ({ buckets, filter }) => ({
    filteredBuckets: buckets.filter(b => b.key !== '_missing' && b.key.toLowerCase().includes(filter.toLowerCase())),
  })),
  pure
);

export default enhance(TermAggregation);
