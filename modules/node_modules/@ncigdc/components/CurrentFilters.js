// @flow
/* eslint fp/no-this: 0 */

// Vendor
import React from 'react';
import { take } from 'lodash';
import UndoIcon from 'react-icons/lib/md/undo';
import LeftArrow from 'react-icons/lib/fa/long-arrow-left';
import Color from 'color';
import { compose, withState, pure, lifecycle, withHandlers } from 'recompose';

import withRouter from '@ncigdc/utils/withRouter';
import { humanify } from '@ncigdc/utils/string';
import { parseFilterParam } from '@ncigdc/utils/uri';

import Button from '@ncigdc/uikit/Button';
import { Row } from '@ncigdc/uikit/Flex';
import Info from '@ncigdc/uikit/Info';

import styled from '@ncigdc/theme/styled';
import { buttonLike } from '@ncigdc/theme/mixins';

import Link from './Links/Link';

/*----------------------------------------------------------------------------*/

const Field = styled(Button, ({
  backgroundColor: ({ theme }) => theme.greyScale2,
  ':hover': {
    backgroundColor: ({ theme }) => Color(theme.greyScale2).lighten(0.7).rgbString(),
  },
}));

const Value = styled(Button, ({
  backgroundColor: ({ theme }) => theme.success,
  ':hover': {
    backgroundColor: ({ theme }) => Color(theme.success).lighten(0.7).rgbString(),
  },
}));

const Op = styled.span({
  ...buttonLike,
  backgroundColor: ({ theme }) => theme.primary,
  color: 'white',
});

type TProps = {
  filtersWithExpanded: Object,
  onLessClicked: Function,
};

const NotUnderlinedLink = styled(Link, {
  ':link': {
    textDecoration: 'none',
  },
});

const addExpandedKey = filtersArray => filtersArray.map(f => ({ ...f, expanded: false }));
const enhance = compose(
  withRouter,
  withState('filtersWithExpanded', 'setFiltersWithExpanded', []),
  lifecycle({
    componentDidMount(): void {
      const { query: { filters }, setFiltersWithExpanded } = this.props || {};
      const currentFilters = parseFilterParam(filters, { content: [] }).content;
      setFiltersWithExpanded(addExpandedKey(currentFilters || []));
    },
    componentWillReceiveProps(nextProps: Object): void {
      if (nextProps && nextProps.query !== this.props.query) {
        const { query: { filters } } = nextProps;
        const { setFiltersWithExpanded } = this.props || {};
        const currentFilters = parseFilterParam(filters, { content: [] }).content;
        setFiltersWithExpanded(addExpandedKey(currentFilters || []));
      }
    },
  }),
  withHandlers({
    onLessClicked: props => field => {
      const { filtersWithExpanded, setFiltersWithExpanded } = props;
      setFiltersWithExpanded(
        filtersWithExpanded.map(f => f.content.field === field ? { ...f, expanded: !f.expanded } : f)
      );
    },
  }),
  pure
);

const CurrentFilters = ({
  filtersWithExpanded,
  onLessClicked,
}: TProps) => {
  const styles = {
    leftParen: {
      fontSize: '2rem',
      marginRight: '0.3rem',
      display: 'flex',
      alignItems: 'center',
    },
    rightParen: {
      fontSize: '2rem',
      marginRight: '0.3rem',
      display: 'flex',
      alignItems: 'center',
    },
    groupPadding: {
      padding: '0.5rem 0',
    },
  };

  const currentFilters = filtersWithExpanded;
  return (
    <Info>
      {!currentFilters.length &&
        <span style={{ display: 'flex', alignItems: 'center', lineHeight: '44px' }}>
          <LeftArrow />
          <span style={{ marginLeft: '0.6rem' }}>
            Start searching by selecting a facet
          </span>
        </span>
      }
      {!!currentFilters.length &&
        <Row wrap spacing="0.3rem">
          <NotUnderlinedLink
            style={styles.groupPadding}
            query={{}}
          >
            <Button leftIcon={<UndoIcon />}>Clear</Button>
          </NotUnderlinedLink>

          {currentFilters.map((filter, i) => (
            <Row
              key={`${filter.content.field}.${filter.op}.${filter.content.value.map(v => v)}`}
              spacing="0.3rem"
              style={styles.groupPadding}
            >
              <NotUnderlinedLink
                merge="toggle"
                query={{
                  offset: 0,
                  filters: {
                    op: 'and',
                    content: [{
                      op: 'in',
                      content: {
                        field: filter.content.field,
                        value: filter.content.value,
                      },
                    }],
                  },
                }}
              >
                <Field>{humanify({ term: filter.content.field })}</Field>
              </NotUnderlinedLink>
              {filter.op === 'in' && filter.content.value.length === 1 &&
                <Op>IS</Op>
              }
              {filter.op === 'in' && filter.content.value.length > 1 &&
                <Op>IN</Op>
              }
              {filter.op !== 'in' && <Button style={styles.op}>{filter.op}</Button>}
              {filter.content.value.length > 1 && <span style={styles.leftParen}>(</span>}
              {(filter.expanded ? filter.content.value : take(filter.content.value, 2)).map(value => (
                <NotUnderlinedLink
                  key={value}
                  merge="toggle"
                  query={{
                    offset: 0,
                    filters: {
                      op: 'and',
                      content: [{
                        op: 'in',
                        content: {
                          field: filter.content.field,
                          value: [value],
                        },
                      }],
                    },
                  }}
                >
                  <Value>{value}</Value>
                </NotUnderlinedLink>
                  ))}
              {filter.content.value.length > 2 &&
                <span style={styles.rightParen} onClick={() => onLessClicked(filter.content.field)}>&#8230;</span>}
              {filter.expanded &&
                <span
                  style={{ display: 'flex', alignItems: 'center' }}
                  onClick={() => onLessClicked(filter.content.field)}
                >
                  Less
                </span>}
              {filter.content.value.length > 1 && <span style={styles.rightParen}>)</span>}
              {i < currentFilters.length - 1 && <Op>AND</Op>}
            </Row>
          ))}
        </Row>
      }
    </Info>
  );
};

/*----------------------------------------------------------------------------*/

export default enhance(CurrentFilters);
