/* @flow */

import React from 'react';
import Relay from 'react-relay';

import Pagination from '@ncigdc/components/Pagination';
import Showing from '@ncigdc/components/Pagination/Showing';
import { RepositoryFilesLink } from '@ncigdc/components/Links/RepositoryLink';

import { makeFilter } from '@ncigdc/utils/filters';

import { Tr, Th } from '@ncigdc/uikit/Table';

import CaseTr from './CaseTr';

import type { TTableProps } from './types';

const styles = {
  table: {
    width: '100%',
    borderCollapse: 'collapse',
    borderSpacing: 0,
  },
};

export const CaseTableComponent = (props: TTableProps) => {
  const prefix = 'cases';
  return (
    <div>
      <div style={{ backgroundColor: 'white', padding: '1rem' }}>
        <Showing
          docType="cases"
          prefix={prefix}
          params={props.relay.route.params}
          total={props.hits.pagination.total}
        />
      </div>
      <div style={{ overflowX: 'auto' }}>
        <table style={styles.table}>
          <thead>
            <Tr>
              <Th rowSpan="2">Case UUID</Th>
              <Th rowSpan="2">Project</Th>
              <Th rowSpan="2">Primary Site</Th>
              <Th rowSpan="2">Gender</Th>
              <Th rowSpan="2">Files</Th>
              <Th colSpan="6">Available Cases per Data Category</Th>
              <Th rowSpan="2">Annotations</Th>
            </Tr>

            <Tr>
              <Th>Seq</Th>
              <Th>Exp</Th>
              <Th>SNV</Th>
              <Th>CNV</Th>
              <Th>Clinical</Th>
              <Th>Bio</Th>
            </Tr>
          </thead>
          <tbody>
            {props.hits.edges.map((e, i) => (
              <CaseTr {...e} key={e.node.id} index={i} />
            ))}
          </tbody>
        </table>
      </div>
      <Pagination prefix={prefix} params={props.relay.route.params} total={props.hits.pagination.total} />
    </div>
  );
};

export const CaseTableQuery = {
  fragments: {
    hits: () => Relay.QL`
      fragment on RepositoryCaseConnection {
        pagination {
          sort
          total
          size
          offset
        }
        edges {
          node {
            id
            ${CaseTr.getFragment('node')}
          }
        }
      }
    `,
  },
};

const CaseTable = Relay.createContainer(
  CaseTableComponent,
  CaseTableQuery
);

export default CaseTable;
